{
  "total_issues": 138,
  "projects_analyzed": 4,
  "generated_at": "2025-02-17T03:51:35.663245",
  "issues": [
    {
      "repository": "Textualize/rich",
      "issue_number": 3517,
      "issue_title": "[BUG] Post 13.8.1 table automatic highlighting no longer works",
      "issue_url": "https://github.com/Textualize/rich/issues/3517",
      "closed_at": "2024-10-03T22:03:47Z",
      "merged_prs": [
        {
          "pr_number": 3518,
          "pr_title": "fix(table): highlight columns added by add_row",
          "pr_url": "https://github.com/Textualize/rich/pull/3518",
          "merged_at": "2024-10-04T09:40:50Z",
          "base_commit": {
            "sha": "5ba9cb56e68dcdf2db50c214d8f1412c8a50761b",
            "ref": "master"
          }
        }
      ],
      "discussion": [
        {
          "author": "nilsso",
          "body": "- [x] I've checked [docs](https://rich.readthedocs.io/en/latest/introduction.html) and [closed issues](https://github.com/Textualize/rich/issues?q=is%3Aissue+is%3Aclosed) for possible solutions.\r\n- [x] I can't find my issue in the [FAQ](https://github.com/Textualize/rich/blob/master/FAQ.md).\r\n\r\n**Describe the bug**\r\n\r\nPost the 13.8.1 release, automatic highlighting of cell contents no longer seems to work.\r\n\r\nRunning the following\r\n```python\r\nfrom rich import print\r\nfrom rich.table import Table\r\n\r\nt = Table(highlight=True, show_header=False)\r\nt.add_row(\"1\", repr(\"FOO\"))\r\nprint(t)\r\n```\r\n\r\nWith release 13.7.1, one before 13.8.1, automatic highlighting works.\r\n\r\nBut with 13.8.1 or greater there's no automatic highlighting in the output.\r\n\r\n**Platform**\r\n<details>\r\n<summary>Click to expand</summary>\r\n\r\nWhat platform (Win/Linux/Mac) are you running on? What terminal software are you using?\r\n\r\n```\r\n(python -m rich.diagnose & pip freeze | grep rich) | clipcopy\r\n```\r\n```\r\n╭───────────────────────── <class 'rich.console.Console'> ─────────────────────────╮\r\n│ A high level console interface.                                                  │\r\n│                                                                                  │\r\n│ ╭──────────────────────────────────────────────────────────────────────────────╮ │\r\n│ │ <console width=265 None>                                                     │ │\r\n│ ╰──────────────────────────────────────────────────────────────────────────────╯ │\r\n│                                                                                  │\r\n│     color_system = None                                                          │\r\n│         encoding = 'utf-8'                                                       │\r\n│             file = <_io.TextIOWrapper name='<stdout>' mode='w' encoding='utf-8'> │\r\n│           height = 38                                                            │\r\n│    is_alt_screen = False                                                         │\r\n│ is_dumb_terminal = False                                                         │\r\n│   is_interactive = False                                                         │\r\n│       is_jupyter = False                                                         │\r\n│      is_terminal = False                                                         │\r\n│   legacy_windows = False                                                         │\r\n│         no_color = False                                                         │\r\n│          options = ConsoleOptions(                                               │\r\n│                        size=ConsoleDimensions(width=265, height=38),             │\r\n│                        legacy_windows=False,                                     │\r\n│                        min_width=1,                                              │\r\n│                        max_width=265,                                            │\r\n│                        is_terminal=False,                                        │\r\n│                        encoding='utf-8',                                         │\r\n│                        max_height=38,                                            │\r\n│                        justify=None,                                             │\r\n│                        overflow=None,                                            │\r\n│                        no_wrap=False,                                            │\r\n│                        highlight=None,                                           │\r\n│                        markup=None,                                              │\r\n│                        height=None                                               │\r\n│                    )                                                             │\r\n│            quiet = False                                                         │\r\n│           record = False                                                         │\r\n│         safe_box = True                                                          │\r\n│             size = ConsoleDimensions(width=265, height=38)                       │\r\n│        soft_wrap = False                                                         │\r\n│           stderr = False                                                         │\r\n│            style = None                                                          │\r\n│         tab_size = 8                                                             │\r\n│            width = 265                                                           │\r\n╰──────────────────────────────────────────────────────────────────────────────────╯\r\n╭─── <class 'rich._windows.WindowsConsoleFeatures'> ────╮\r\n│ Windows features available.                           │\r\n│                                                       │\r\n│ ╭───────────────────────────────────────────────────╮ │\r\n│ │ WindowsConsoleFeatures(vt=False, truecolor=False) │ │\r\n│ ╰───────────────────────────────────────────────────╯ │\r\n│                                                       │\r\n│ truecolor = False                                     │\r\n│        vt = False                                     │\r\n╰───────────────────────────────────────────────────────╯\r\n╭─────────────────────────────────────────────────────────────────────────────────────────────────────────────── Environment Variables ───────────────────────────────────────────────────────────────────────────────────────────────────────────────╮\r\n│ {'TERM': 'alacritty', 'COLORTERM': 'truecolor', 'CLICOLOR': None, 'NO_COLOR': None, 'TERM_PROGRAM': 'tmux', 'COLUMNS': None, 'LINES': None, 'JUPYTER_COLUMNS': None, 'JUPYTER_LINES': None, 'JPY_PARENT_PID': None, 'VSCODE_VERBOSE_LOGGING': None} │\r\n╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯\r\nplatform=\"Darwin\"\r\nrich==13.7.1\r\n```\r\n\r\n</details>\r\n",
          "type": "issue"
        },
        {
          "author": "github-actions",
          "body": "Thank you for your issue. Give us a little time to review it.\n\nPS. You might want to check the [FAQ](https://github.com/textualize/rich/blob/master/FAQ.md) if you haven't done so already.\n\nThis is an automated reply, generated by [FAQtory](https://github.com/willmcgugan/faqtory)",
          "created_at": "2024-10-02T23:32:41Z",
          "type": "comment"
        },
        {
          "author": "nilsso",
          "body": "Thanks for the fix @TomJGooding ",
          "created_at": "2024-10-03T22:03:47Z",
          "type": "comment"
        },
        {
          "author": "github-actions",
          "body": "I hope we solved your problem.\n\nIf you like using Rich, you might also enjoy [Textual](https://textual.textualize.io)",
          "created_at": "2024-10-03T22:03:57Z",
          "type": "comment"
        }
      ]
    },
    {
      "repository": "Textualize/rich",
      "issue_number": 3511,
      "issue_title": "[BUG] No module named 'typing_extensions'",
      "issue_url": "https://github.com/Textualize/rich/issues/3511",
      "closed_at": "2024-10-01T13:35:50Z",
      "merged_prs": [
        {
          "pr_number": 3513,
          "pr_title": "depenency fix",
          "pr_url": "https://github.com/Textualize/rich/pull/3513",
          "merged_at": "2024-10-01T13:35:49Z",
          "base_commit": {
            "sha": "36f3ca645dd225ef5d9d836e1e3c480dc3f68ff0",
            "ref": "master"
          }
        }
      ],
      "discussion": [
        {
          "author": "vtardiveau",
          "body": "- [X] I've checked [docs](https://rich.readthedocs.io/en/latest/introduction.html) and [closed issues](https://github.com/Textualize/rich/issues?q=is%3Aissue+is%3Aclosed) for possible solutions.\r\n- [X] I can't find my issue in the [FAQ](https://github.com/Textualize/rich/blob/master/FAQ.md).\r\n\r\n**Describe the bug**\r\n\r\nSince rich 13.9.0 has been released, when I try to upload a package with twine, I'm getting the following error:\r\n```shell\r\npython -m twine upload --repository-url ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/pypi dist/*\r\nTraceback (most recent call last):\r\n  File \"/usr/local/lib/python3.9/runpy.py\", line 197, in _run_module_as_main\r\n    return _run_code(code, main_globals, None,\r\n  File \"/usr/local/lib/python3.9/runpy.py\", line 87, in _run_code\r\n    exec(code, run_globals)\r\n  File \"/usr/local/lib/python3.9/site-packages/twine/__main__.py\", line 54, in <module>\r\n    sys.exit(main())\r\n  File \"/usr/local/lib/python3.9/site-packages/twine/__main__.py\", line 33, in main\r\n    error = cli.dispatch(sys.argv[1:])\r\n  File \"/usr/local/lib/python3.9/site-packages/twine/cli.py\", line 121, in dispatch\r\n    main = registered_commands[args.command].load()\r\n  File \"/usr/local/lib/python3.9/site-packages/importlib_metadata/__init__.py\", line 189, in load\r\n    module = import_module(match.group('module'))\r\n  File \"/usr/local/lib/python3.9/importlib/__init__.py\", line 127, in import_module\r\n    return _bootstrap._gcd_import(name[level:], package, level)\r\n  File \"<frozen importlib._bootstrap>\", line 1030, in _gcd_import\r\n  File \"<frozen importlib._bootstrap>\", line 1007, in _find_and_load\r\n  File \"<frozen importlib._bootstrap>\", line 986, in _find_and_load_unlocked\r\n  File \"<frozen importlib._bootstrap>\", line 680, in _load_unlocked\r\n  File \"<frozen importlib._bootstrap_external>\", line 850, in exec_module\r\n  File \"<frozen importlib._bootstrap>\", line [228](https://gitlab.com), in _call_with_frames_removed\r\n  File \"/usr/local/lib/python3.9/site-packages/twine/commands/upload.py\", line 28, in <module>\r\n    from twine import settings\r\n  File \"/usr/local/lib/python3.9/site-packages/twine/settings.py\", line 23, in <module>\r\n    from twine import repository\r\n  File \"/usr/local/lib/python3.9/site-packages/twine/repository.py\", line 19, in <module>\r\n    import rich.progress\r\n  File \"/usr/local/lib/python3.9/site-packages/rich/progress.py\", line 45, in <module>\r\n    from typing_extensions import Self  # pragma: no cover\r\nModuleNotFoundError: No module named 'typing_extensions'\r\n```\r\n\r\nWhen I manually install `typing_extensions` or when I fix rich version to 13.8.1 the problem doesn't appear.\r\n\r\nIt's pretty similar to #2979.\r\n",
          "type": "issue"
        },
        {
          "author": "github-actions",
          "body": "Thank you for your issue. Give us a little time to review it.\n\nPS. You might want to check the [FAQ](https://github.com/textualize/rich/blob/master/FAQ.md) if you haven't done so already.\n\nThis is an automated reply, generated by [FAQtory](https://github.com/willmcgugan/faqtory)",
          "created_at": "2024-10-01T12:55:08Z",
          "type": "comment"
        },
        {
          "author": "cpnielsen",
          "body": "This specifically comes from this commit/change: https://github.com/Textualize/rich/commit/67e68f3722571688cab1bc569376b24231c62ba1#diff-77d13adf0fa7cbb6c2fa6adba6462b8d37e1797ab2f23229c8b6d84d7ba0fb6dR42\r\n\r\nThe project requires `typing-extensions` only if python < 3.9, but this change makes it a requirement for python < 3.11.",
          "created_at": "2024-10-01T13:07:36Z",
          "type": "comment"
        },
        {
          "author": "danielrbradley",
          "body": "cc: @willmcgugan for visibility",
          "created_at": "2024-10-01T13:08:17Z",
          "type": "comment"
        },
        {
          "author": "kajinamit",
          "body": "I hit the same problem via the bandit tool (the tool depends on rich). I've submitted the PR which hopefully fixes the issue and appreciate any feedback.",
          "created_at": "2024-10-01T13:31:43Z",
          "type": "comment"
        },
        {
          "author": "github-actions",
          "body": "I hope we solved your problem.\n\nIf you like using Rich, you might also enjoy [Textual](https://textual.textualize.io)",
          "created_at": "2024-10-01T13:36:03Z",
          "type": "comment"
        },
        {
          "author": "danielrbradley",
          "body": "Thank you @willmcgugan for the speedy hot fix ❤️ \r\n\r\nI can confirm this has resolved our issue (using via twine).",
          "created_at": "2024-10-01T13:43:36Z",
          "type": "comment"
        }
      ]
    },
    {
      "repository": "Textualize/rich",
      "issue_number": 3493,
      "issue_title": "[BUG] Panel title text style overriden by panel border style",
      "issue_url": "https://github.com/Textualize/rich/issues/3493",
      "closed_at": "2024-10-01T12:08:21Z",
      "merged_prs": [
        {
          "pr_number": 3509,
          "pr_title": "respect text.style in panels",
          "pr_url": "https://github.com/Textualize/rich/pull/3509",
          "merged_at": "2024-10-01T12:08:20Z",
          "base_commit": {
            "sha": "7022e202245b6bdeb39e8025d2b5dab793841ec8",
            "ref": "master"
          }
        }
      ],
      "discussion": [
        {
          "author": "AAriam",
          "body": "- [X] I've checked [docs](https://rich.readthedocs.io/en/latest/introduction.html) and [closed issues](https://github.com/Textualize/rich/issues?q=is%3Aissue+is%3Aclosed) for possible solutions.\r\n- [X] I can't find my issue in the [FAQ](https://github.com/Textualize/rich/blob/master/FAQ.md).\r\n\r\n**Describe the bug**\r\n\r\nThis is identical to #2466 and #2745, but observed in `v13.8.1` on both iTerm2 and Jupyter (on Mac):\r\n\r\nWhen setting `border_style` for `Panel`, the text style is overwritten:\r\n```python\r\nimport rich\r\nfrom rich.text import Text\r\nfrom rich.panel import Panel\r\n\r\nrich.print(Panel(\"Content\", border_style=\"red\", title=Text(\"Title\", style=\"white\")))\r\n```\r\nproduces:\r\n<img width=\"759\" alt=\"Screenshot 2024-09-15 at 12 48 31\" src=\"https://github.com/user-attachments/assets/3197183e-ac67-423a-8cdb-c796d43aa198\">\r\n\r\nAs a note, when the text is stylized with inline markup, it works fine:\r\n```python\r\nrich.print(Panel(\"Content\", border_style=\"red\", title=\"[white]Title\"))\r\n```\r\nproduces:\r\n<img width=\"710\" alt=\"Screenshot 2024-09-15 at 12 51 08\" src=\"https://github.com/user-attachments/assets/ad43407b-f47d-4611-ac54-0ce49294339d\">\r\n\r\n**Platform**\r\n<details>\r\n<summary>Click to expand</summary>\r\n\r\nPlatform: Mac\r\nTested Terminals: iTerm2, Jupyter\r\nRich version: `13.8.1`\r\n\r\niTerm2 `rich.diagnose`:\r\n```\r\n╭───────────────────────── <class 'rich.console.Console'> ─────────────────────────╮\r\n│ A high level console interface.                                                  │\r\n│                                                                                  │\r\n│ ╭──────────────────────────────────────────────────────────────────────────────╮ │\r\n│ │ <console width=138 ColorSystem.TRUECOLOR>                                    │ │\r\n│ ╰──────────────────────────────────────────────────────────────────────────────╯ │\r\n│                                                                                  │\r\n│     color_system = 'truecolor'                                                   │\r\n│         encoding = 'utf-8'                                                       │\r\n│             file = <_io.TextIOWrapper name='<stdout>' mode='w' encoding='utf-8'> │\r\n│           height = 60                                                            │\r\n│    is_alt_screen = False                                                         │\r\n│ is_dumb_terminal = False                                                         │\r\n│   is_interactive = True                                                          │\r\n│       is_jupyter = False                                                         │\r\n│      is_terminal = True                                                          │\r\n│   legacy_windows = False                                                         │\r\n│         no_color = False                                                         │\r\n│          options = ConsoleOptions(                                               │\r\n│                        size=ConsoleDimensions(width=138, height=60),             │\r\n│                        legacy_windows=False,                                     │\r\n│                        min_width=1,                                              │\r\n│                        max_width=138,                                            │\r\n│                        is_terminal=True,                                         │\r\n│                        encoding='utf-8',                                         │\r\n│                        max_height=60,                                            │\r\n│                        justify=None,                                             │\r\n│                        overflow=None,                                            │\r\n│                        no_wrap=False,                                            │\r\n│                        highlight=None,                                           │\r\n│                        markup=None,                                              │\r\n│                        height=None                                               │\r\n│                    )                                                             │\r\n│            quiet = False                                                         │\r\n│           record = False                                                         │\r\n│         safe_box = True                                                          │\r\n│             size = ConsoleDimensions(width=138, height=60)                       │\r\n│        soft_wrap = False                                                         │\r\n│           stderr = False                                                         │\r\n│            style = None                                                          │\r\n│         tab_size = 8                                                             │\r\n│            width = 138                                                           │\r\n╰──────────────────────────────────────────────────────────────────────────────────╯\r\n╭─── <class 'rich._windows.WindowsConsoleFeatures'> ────╮\r\n│ Windows features available.                           │\r\n│                                                       │\r\n│ ╭───────────────────────────────────────────────────╮ │\r\n│ │ WindowsConsoleFeatures(vt=False, truecolor=False) │ │\r\n│ ╰───────────────────────────────────────────────────╯ │\r\n│                                                       │\r\n│ truecolor = False                                     │\r\n│        vt = False                                     │\r\n╰───────────────────────────────────────────────────────╯\r\n╭────── Environment Variables ───────╮\r\n│ {                                  │\r\n│     'TERM': 'xterm-256color',      │\r\n│     'COLORTERM': 'truecolor',      │\r\n│     'CLICOLOR': None,              │\r\n│     'NO_COLOR': None,              │\r\n│     'TERM_PROGRAM': 'iTerm.app',   │\r\n│     'COLUMNS': None,               │\r\n│     'LINES': None,                 │\r\n│     'JUPYTER_COLUMNS': None,       │\r\n│     'JUPYTER_LINES': None,         │\r\n│     'JPY_PARENT_PID': None,        │\r\n│     'VSCODE_VERBOSE_LOGGING': None │\r\n│ }                                  │\r\n╰────────────────────────────────────╯\r\nplatform=\"Darwin\"\r\n```\r\n\r\nJupyter `rich.diagnose.report`:\r\n```\r\n╭──────────────────── <class 'rich.console.Console'> ─────────────────────╮\r\n│ A high level console interface.                                         │\r\n│                                                                         │\r\n│ ╭─────────────────────────────────────────────────────────────────────╮ │\r\n│ │ <console width=115 ColorSystem.TRUECOLOR>                           │ │\r\n│ ╰─────────────────────────────────────────────────────────────────────╯ │\r\n│                                                                         │\r\n│     color_system = 'truecolor'                                          │\r\n│         encoding = 'utf-8'                                              │\r\n│             file = <ipykernel.iostream.OutStream object at 0x10792e8c0> │\r\n│           height = 100                                                  │\r\n│    is_alt_screen = False                                                │\r\n│ is_dumb_terminal = False                                                │\r\n│   is_interactive = False                                                │\r\n│       is_jupyter = True                                                 │\r\n│      is_terminal = False                                                │\r\n│   legacy_windows = False                                                │\r\n│         no_color = False                                                │\r\n│          options = ConsoleOptions(                                      │\r\n│                        size=ConsoleDimensions(width=115, height=100),   │\r\n│                        legacy_windows=False,                            │\r\n│                        min_width=1,                                     │\r\n│                        max_width=115,                                   │\r\n│                        is_terminal=False,                               │\r\n│                        encoding='utf-8',                                │\r\n│                        max_height=100,                                  │\r\n│                        justify=None,                                    │\r\n│                        overflow=None,                                   │\r\n│                        no_wrap=False,                                   │\r\n│                        highlight=None,                                  │\r\n│                        markup=None,                                     │\r\n│                        height=None                                      │\r\n│                    )                                                    │\r\n│            quiet = False                                                │\r\n│           record = False                                                │\r\n│         safe_box = True                                                 │\r\n│             size = ConsoleDimensions(width=115, height=100)             │\r\n│        soft_wrap = False                                                │\r\n│           stderr = False                                                │\r\n│            style = None                                                 │\r\n│         tab_size = 8                                                    │\r\n│            width = 115                                                  │\r\n╰─────────────────────────────────────────────────────────────────────────╯\r\n╭─── <class 'rich._windows.WindowsConsoleFeatures'> ────╮\r\n│ Windows features available.                           │\r\n│                                                       │\r\n│ ╭───────────────────────────────────────────────────╮ │\r\n│ │ WindowsConsoleFeatures(vt=False, truecolor=False) │ │\r\n│ ╰───────────────────────────────────────────────────╯ │\r\n│                                                       │\r\n│ truecolor = False                                     │\r\n│        vt = False                                     │\r\n╰───────────────────────────────────────────────────────╯\r\n╭────── Environment Variables ───────╮\r\n│ {                                  │\r\n│     'TERM': 'xterm-color',         │\r\n│     'COLORTERM': 'truecolor',      │\r\n│     'CLICOLOR': '1',               │\r\n│     'NO_COLOR': None,              │\r\n│     'TERM_PROGRAM': 'iTerm.app',   │\r\n│     'COLUMNS': None,               │\r\n│     'LINES': None,                 │\r\n│     'JUPYTER_COLUMNS': None,       │\r\n│     'JUPYTER_LINES': None,         │\r\n│     'JPY_PARENT_PID': '585',       │\r\n│     'VSCODE_VERBOSE_LOGGING': None │\r\n│ }                                  │\r\n╰────────────────────────────────────╯\r\nplatform=\"Darwin\"\r\n```\r\n\r\n</details>\r\n",
          "type": "issue"
        },
        {
          "author": "github-actions",
          "body": "Thank you for your issue. Give us a little time to review it.\n\nPS. You might want to check the [FAQ](https://github.com/textualize/rich/blob/master/FAQ.md) if you haven't done so already.\n\nThis is an automated reply, generated by [FAQtory](https://github.com/willmcgugan/faqtory)",
          "created_at": "2024-09-15T11:01:32Z",
          "type": "comment"
        },
        {
          "author": "github-actions",
          "body": "I hope we solved your problem.\n\nIf you like using Rich, you might also enjoy [Textual](https://textual.textualize.io)",
          "created_at": "2024-10-01T12:08:31Z",
          "type": "comment"
        }
      ]
    },
    {
      "repository": "Textualize/rich",
      "issue_number": 3479,
      "issue_title": "[BUG] Infinite loop in Text.append",
      "issue_url": "https://github.com/Textualize/rich/issues/3479",
      "closed_at": "2024-09-06T09:56:58Z",
      "merged_prs": [
        {
          "pr_number": 3480,
          "pr_title": "fix infinite loop in append",
          "pr_url": "https://github.com/Textualize/rich/pull/3480",
          "merged_at": "2024-09-06T09:56:57Z",
          "base_commit": {
            "sha": "9ec419154102acce7363e3958bec6c261864d7fb",
            "ref": "master"
          }
        }
      ],
      "discussion": [
        {
          "author": "willmcgugan",
          "body": "Occurs when appending to self.\r\n\r\n```python\r\na = Text(\"one\", \"blue\")\r\na.append(a)\r\n```",
          "type": "issue"
        },
        {
          "author": "github-actions",
          "body": "Thank you for your issue. Give us a little time to review it.\n\nPS. You might want to check the [FAQ](https://github.com/textualize/rich/blob/master/FAQ.md) if you haven't done so already.\n\nThis is an automated reply, generated by [FAQtory](https://github.com/willmcgugan/faqtory)",
          "created_at": "2024-09-06T09:28:00Z",
          "type": "comment"
        },
        {
          "author": "github-actions",
          "body": "I hope we solved your problem.\n\nIf you like using Rich, you might also enjoy [Textual](https://textual.textualize.io)",
          "created_at": "2024-09-06T09:57:11Z",
          "type": "comment"
        }
      ]
    },
    {
      "repository": "Textualize/rich",
      "issue_number": 3419,
      "issue_title": "[BUG] highlighting for console.print cannot be enabled per line later on if disabled during creation of Console",
      "issue_url": "https://github.com/Textualize/rich/issues/3419",
      "closed_at": "2024-08-26T09:22:48Z",
      "merged_prs": [
        {
          "pr_number": 3420,
          "pr_title": "fix(console): fix selective enabling of highlighting",
          "pr_url": "https://github.com/Textualize/rich/pull/3420",
          "merged_at": "2024-08-26T09:22:47Z",
          "base_commit": {
            "sha": "e1e6d745f670ff3df6b8f47377c0a4006cb74066",
            "ref": "master"
          }
        }
      ],
      "discussion": [
        {
          "author": "bumblebeems",
          "body": "- [x] I've checked [docs](https://rich.readthedocs.io/en/latest/introduction.html) and [closed issues](https://github.com/Textualize/rich/issues?q=is%3Aissue+is%3Aclosed) for possible solutions.\n\n- [X] I can't find my issue in the [FAQ](https://github.com/Textualize/rich/blob/master/FAQ.md).\n\n\n**Describe the bug**\n\n\nWhen `highlight` is set to False upon creation of Console (console = Console(highlight=False), it does not appear to re-enable later on if I set `highlight=True` for an individual line.\n\n\nI have only been learning Python for 3-4 weeks at most so far, so apologies if this is not actually a bug and I'm doing something incorrectly (or it actually *is* in the docs)\n\n\n```py\n\nfrom rich.console import Console\n\n\nconsole = Console(highlight=False)\n\n\n# This works as intended with no highlighting applied to the numbers.\n\nconsole.print('Testing 1 2 3')\n\n# This does not, as the output is the same as the above even though I have tried to enable highlighting for this line.\n\nconsole.print('Testing 1 2 3', highlight=True)\n\n```\n\n\n**Platform**\n\n<details>\n\n<summary>Click to expand</summary>\n\n\nWindows 11, Windows Terminal\n\nWindows 11, Visual Studio Code integrated terminal\n\nUbuntu 22.04, Visual Studio Code integrated terminal\n\n\n```\n\npython -m rich.diagnose:\n\n╭───────────────────────── <class 'rich.console.Console'> ─────────────────────────╮\n\n│ A high level console interface.                                                  │\n\n│                                                                                  │\n\n│ ╭──────────────────────────────────────────────────────────────────────────────╮ │\n\n│ │ <console width=198 ColorSystem.TRUECOLOR>                                    │ │\n\n│ ╰──────────────────────────────────────────────────────────────────────────────╯ │\n\n│                                                                                  │\n\n│     color_system = 'truecolor'                                                   │\n\n│         encoding = 'utf-8'                                                       │\n\n│             file = <_io.TextIOWrapper name='<stdout>' mode='w' encoding='utf-8'> │\n\n│           height = 13                                                            │\n\n│    is_alt_screen = False                                                         │\n\n│ is_dumb_terminal = False                                                         │\n\n│   is_interactive = True                                                          │\n\n│       is_jupyter = False                                                         │\n\n│      is_terminal = True                                                          │\n\n│   legacy_windows = False                                                         │\n\n│         no_color = False                                                         │\n\n│          options = ConsoleOptions(                                               │\n\n│                        size=ConsoleDimensions(width=198, height=13),             │\n\n│                        legacy_windows=False,                                     │\n\n│                        min_width=1,                                              │\n\n│                        max_width=198,                                            │\n\n│                        is_terminal=True,                                         │\n\n│                        encoding='utf-8',                                         │\n\n│                        max_height=13,                                            │\n\n│                        justify=None,                                             │\n\n│                        overflow=None,                                            │\n\n│                        no_wrap=False,                                            │\n\n│                        highlight=None,                                           │\n\n│                        markup=None,                                              │\n\n│                        height=None                                               │\n\n│                    )                                                             │\n\n│            quiet = False                                                         │\n\n│           record = False                                                         │\n\n│         safe_box = True                                                          │\n\n│             size = ConsoleDimensions(width=198, height=13)                       │\n\n│        soft_wrap = False                                                         │\n\n│           stderr = False                                                         │\n\n│            style = None                                                          │\n\n│         tab_size = 8                                                             │\n\n│            width = 198                                                           │\n\n╰──────────────────────────────────────────────────────────────────────────────────╯\n\n╭─── <class 'rich._windows.WindowsConsoleFeatures'> ────╮\n\n│ Windows features available.                           │\n\n│                                                       │\n\n│ ╭───────────────────────────────────────────────────╮ │\n\n│ │ WindowsConsoleFeatures(vt=False, truecolor=False) │ │\n\n│ ╰───────────────────────────────────────────────────╯ │\n\n│                                                       │\n\n│ truecolor = False                                     │\n\n│        vt = False                                     │\n\n╰───────────────────────────────────────────────────────╯\n\n╭────── Environment Variables ───────╮\n\n│ {                                  │\n\n│     'TERM': 'xterm-256color',      │\n\n│     'COLORTERM': 'truecolor',      │\n\n│     'CLICOLOR': None,              │\n\n│     'NO_COLOR': None,              │\n\n│     'TERM_PROGRAM': 'vscode',      │\n\n│     'COLUMNS': None,               │\n\n│     'LINES': None,                 │\n\n│     'JUPYTER_COLUMNS': None,       │\n\n│     'JUPYTER_LINES': None,         │\n\n│     'JPY_PARENT_PID': None,        │\n\n│     'VSCODE_VERBOSE_LOGGING': None │\n\n│ }                                  │\n\n╰────────────────────────────────────╯\n\nplatform=\"Linux\"\n\n\npip freeze | grep rich:\n\nrich==13.7.1\n\n```\n\n</details>",
          "type": "issue"
        },
        {
          "author": "github-actions",
          "body": "We found the following entries in the [FAQ](https://github.com/textualize/rich/blob/master/FAQ.md) which you may find helpful:\n\n\n- [How do I render console markup in RichHandler?](https://github.com/textualize/rich/blob/master/FAQ.md#how-do-i-render-console-markup-in-richhandler)\n- [Strange colors in console output.](https://github.com/textualize/rich/blob/master/FAQ.md#strange-colors-in-console-output)\n\nFeel free to close this issue if you found an answer in the FAQ. Otherwise, please give us a little time to review.\n\nThis is an automated reply, generated by [FAQtory](https://github.com/willmcgugan/faqtory)",
          "created_at": "2024-07-10T05:57:57Z",
          "type": "comment"
        },
        {
          "author": "github-actions",
          "body": "I hope we solved your problem.\n\nIf you like using Rich, you might also enjoy [Textual](https://textual.textualize.io)",
          "created_at": "2024-08-26T09:22:58Z",
          "type": "comment"
        }
      ]
    },
    {
      "repository": "Textualize/rich",
      "issue_number": 3417,
      "issue_title": "[BUG] Dataclass attributes specified with `init=False` cause error in pretty printing",
      "issue_url": "https://github.com/Textualize/rich/issues/3417",
      "closed_at": "2024-08-26T16:01:32Z",
      "merged_prs": [
        {
          "pr_number": 3472,
          "pr_title": "fix for missing field in dataclass",
          "pr_url": "https://github.com/Textualize/rich/pull/3472",
          "merged_at": "2024-08-26T16:01:31Z",
          "base_commit": {
            "sha": "b6f2f7aa5b27f612f391cd28212aff51ad0d42d1",
            "ref": "master"
          }
        }
      ],
      "discussion": [
        {
          "author": "CollinHeist",
          "body": "- [x] I've checked [docs](https://rich.readthedocs.io/en/latest/introduction.html) and [closed issues](https://github.com/Textualize/rich/issues?q=is%3Aissue+is%3Aclosed) for possible solutions.\r\n- [x] I can't find my issue in the [FAQ](https://github.com/Textualize/rich/blob/master/FAQ.md).\r\n\r\n**Describe the bug**\r\n\r\nObjects in pretty traceback printing which are `dataclass` objects with fields that are specified with `init=False` will cause an uncaught exception in the printing. See below.\r\n\r\n```py\r\nfrom dataclasses import dataclass, field, fields\r\n\r\n@dataclass(eq=False)\r\nclass BadDataclass:\r\n    item: int = field(init=False)\r\n\r\n# item is not provided\r\nob = BadDataclass()\r\n\r\n# Displays all fields, including item\r\nprint([f for f in fields(ob) if f.repr])\r\n\r\n# Raises an AttributeError since ob.item is not defined\r\nprint([getattr(ob, f.name) for f in fields(ob)])\r\n```\r\n\r\nThis is specifically caused by [this line](https://github.com/Textualize/rich/blob/master/rich/pretty.py#L782) of code.\r\n\r\n[PR Submitted](https://github.com/Textualize/rich/pull/3418)",
          "type": "issue"
        },
        {
          "author": "github-actions",
          "body": "We found the following entry in the [FAQ](https://github.com/textualize/rich/blob/master/FAQ.md) which you may find helpful:\n\n\n- [Why does content in square brackets disappear?](https://github.com/textualize/rich/blob/master/FAQ.md#why-does-content-in-square-brackets-disappear)\n\nFeel free to close this issue if you found an answer in the FAQ. Otherwise, please give us a little time to review.\n\nThis is an automated reply, generated by [FAQtory](https://github.com/willmcgugan/faqtory)",
          "created_at": "2024-07-06T23:28:56Z",
          "type": "comment"
        },
        {
          "author": "github-actions",
          "body": "I hope we solved your problem.\n\nIf you like using Rich, you might also enjoy [Textual](https://textual.textualize.io)",
          "created_at": "2024-08-26T16:01:40Z",
          "type": "comment"
        }
      ]
    },
    {
      "repository": "Textualize/rich",
      "issue_number": 3412,
      "issue_title": "[BUG] Incorrect auto detection of terminal size on Windows",
      "issue_url": "https://github.com/Textualize/rich/issues/3412",
      "closed_at": "2024-09-30T14:36:43Z",
      "merged_prs": [
        {
          "pr_number": 3413,
          "pr_title": "Fix auto detection of terminal size on Windows",
          "pr_url": "https://github.com/Textualize/rich/pull/3413",
          "merged_at": "2024-09-30T14:36:42Z",
          "base_commit": {
            "sha": "ee46ccd301c311d93cafd82c4eac9066f06646dd",
            "ref": "master"
          }
        }
      ],
      "discussion": [
        {
          "author": "lewis-yeung",
          "body": "- [x] I've checked [docs](https://rich.readthedocs.io/en/latest/introduction.html) and [closed issues](https://github.com/Textualize/rich/issues?q=is%3Aissue+is%3Aclosed) for possible solutions.\r\n- [x] I can't find my issue in the [FAQ](https://github.com/Textualize/rich/blob/master/FAQ.md).\r\n\r\n## Describe the bug\r\n\r\n**I don't know why my PR #2916 didn't get any response and was finally closed. Anyway, I'm opening this issue to restate the bug.**\r\n\r\nCurrently, the automatic detection of terminal size **on Windows** is only performed for `_STDOUT_FILENO` which is the default value passed to `os.get_terminal_size`. So if we redirect the standard output (`stdout`) to a file and create a `Console` on the standard error (`stderr`) with `width` and `height` left `None`, the auto-detected terminal size will always be a fallback value `(80, 25)` (supposing that `legacy_windows` is `False`).\r\n\r\nA simple example to illustrate this problem: on Windows, run the following test script with `stdout` redirected to a file, while `stderr` was still connected to a terminal, e.g., with width = 140 and height = 21:\r\n\r\n```python\r\nimport sys\r\nfrom rich.console import Console\r\n\r\nconsole = Console(stderr=True, legacy_windows=False)\r\nprint(console.size, file=sys.stderr)\r\n```\r\n\r\nThe output is\r\n\r\n```\r\nConsoleDimensions(width=80, height=25)\r\n```\r\n\r\nwhich is not the expected:\r\n\r\n```\r\nConsoleDimensions(width=140, height=21)\r\n```\r\n\r\nHowever, this works as expected On Linux.\r\n\r\n## Platform\r\n<details>\r\n<summary>Click to expand</summary>\r\n\r\nThe output of `python -m rich.diagnose` (tested in Rich v13.7.1):\r\n\r\n```\r\n╭───────────────────────── <class 'rich.console.Console'> ─────────────────────────╮\r\n│ A high level console interface.                                                  │\r\n│                                                                                  │\r\n│ ╭──────────────────────────────────────────────────────────────────────────────╮ │\r\n│ │ <console width=140 ColorSystem.TRUECOLOR>                                    │ │\r\n│ ╰──────────────────────────────────────────────────────────────────────────────╯ │\r\n│                                                                                  │\r\n│     color_system = 'truecolor'                                                   │\r\n│         encoding = 'utf-8'                                                       │\r\n│             file = <_io.TextIOWrapper name='<stdout>' mode='w' encoding='utf-8'> │\r\n│           height = 21                                                            │\r\n│    is_alt_screen = False                                                         │\r\n│ is_dumb_terminal = False                                                         │\r\n│   is_interactive = True                                                          │\r\n│       is_jupyter = False                                                         │\r\n│      is_terminal = True                                                          │\r\n│   legacy_windows = False                                                         │\r\n│         no_color = False                                                         │\r\n│          options = ConsoleOptions(                                               │\r\n│                        size=ConsoleDimensions(width=140, height=21),             │\r\n│                        legacy_windows=False,                                     │\r\n│                        min_width=1,                                              │\r\n│                        max_width=140,                                            │\r\n│                        is_terminal=True,                                         │\r\n│                        encoding='utf-8',                                         │\r\n│                        max_height=21,                                            │\r\n│                        justify=None,                                             │\r\n│                        overflow=None,                                            │\r\n│                        no_wrap=False,                                            │\r\n│                        highlight=None,                                           │\r\n│                        markup=None,                                              │\r\n│                        height=None                                               │\r\n│                    )                                                             │\r\n│            quiet = False                                                         │\r\n│           record = False                                                         │\r\n│         safe_box = True                                                          │\r\n│             size = ConsoleDimensions(width=140, height=21)                       │\r\n│        soft_wrap = False                                                         │\r\n│           stderr = False                                                         │\r\n│            style = None                                                          │\r\n│         tab_size = 8                                                             │\r\n│            width = 140                                                           │\r\n╰──────────────────────────────────────────────────────────────────────────────────╯\r\n╭── <class 'rich._windows.WindowsConsoleFeatures'> ───╮\r\n│ Windows features available.                         │\r\n│                                                     │\r\n│ ╭─────────────────────────────────────────────────╮ │\r\n│ │ WindowsConsoleFeatures(vt=True, truecolor=True) │ │\r\n│ ╰─────────────────────────────────────────────────╯ │\r\n│                                                     │\r\n│ truecolor = True                                    │\r\n│        vt = True                                    │\r\n╰─────────────────────────────────────────────────────╯\r\n╭────── Environment Variables ───────╮\r\n│ {                                  │\r\n│     'TERM': None,                  │\r\n│     'COLORTERM': 'truecolor',      │\r\n│     'CLICOLOR': None,              │\r\n│     'NO_COLOR': None,              │\r\n│     'TERM_PROGRAM': 'vscode',      │\r\n│     'COLUMNS': None,               │\r\n│     'LINES': None,                 │\r\n│     'JUPYTER_COLUMNS': None,       │\r\n│     'JUPYTER_LINES': None,         │\r\n│     'JPY_PARENT_PID': None,        │\r\n│     'VSCODE_VERBOSE_LOGGING': None │\r\n│ }                                  │\r\n╰────────────────────────────────────╯\r\nplatform=\"Windows\"\r\n```\r\n\r\n</details>\r\n",
          "type": "issue"
        },
        {
          "author": "github-actions",
          "body": "Thank you for your issue. Give us a little time to review it.\n\nPS. You might want to check the [FAQ](https://github.com/textualize/rich/blob/master/FAQ.md) if you haven't done so already.\n\nThis is an automated reply, generated by [FAQtory](https://github.com/willmcgugan/faqtory)",
          "created_at": "2024-07-02T14:23:19Z",
          "type": "comment"
        },
        {
          "author": "github-actions",
          "body": "I hope we solved your problem.\n\nIf you like using Rich, you might also enjoy [Textual](https://textual.textualize.io)",
          "created_at": "2024-09-30T14:36:55Z",
          "type": "comment"
        }
      ]
    },
    {
      "repository": "Textualize/rich",
      "issue_number": 3368,
      "issue_title": "[BUG] Test failures with Python 3.13.0b1: test_pretty.py and dataclass repr",
      "issue_url": "https://github.com/Textualize/rich/issues/3368",
      "closed_at": "2024-08-26T15:48:12Z",
      "merged_prs": [
        {
          "pr_number": 3455,
          "pr_title": "Handle dataclasses with Python 3.13 default repr",
          "pr_url": "https://github.com/Textualize/rich/pull/3455",
          "merged_at": "2024-08-26T15:48:11Z",
          "base_commit": {
            "sha": "1b2dada1c9fa6f16ec319a8d370458c8bde203f7",
            "ref": "master"
          }
        }
      ],
      "discussion": [
        {
          "author": "befeleme",
          "body": "- [x] I've checked [docs](https://rich.readthedocs.io/en/latest/introduction.html) and [closed issues](https://github.com/Textualize/rich/issues?q=is%3Aissue+is%3Aclosed) for possible solutions.\r\n- [x] I can't find my issue in the [FAQ](https://github.com/Textualize/rich/blob/master/FAQ.md).\r\n\r\n**Describe the bug**\r\n\r\n3 of `test_pretty` fail with Python 3.13.0b1:\r\n\r\n```\r\n=================================== FAILURES ===================================\r\n____________________________ test_pretty_dataclass _____________________________\r\n\r\n    def test_pretty_dataclass():\r\n        dc = ExampleDataclass(1000, \"Hello, World\", 999, [\"foo\", \"bar\", \"baz\"])\r\n        result = pretty_repr(dc, max_width=80)\r\n        print(repr(result))\r\n        assert (\r\n            result\r\n            == \"ExampleDataclass(foo=1000, bar='Hello, World', baz=['foo', 'bar', 'baz'])\"\r\n        )\r\n        result = pretty_repr(dc, max_width=16)\r\n        print(repr(result))\r\n>       assert (\r\n            result\r\n            == \"ExampleDataclass(\\n    foo=1000,\\n    bar='Hello, World',\\n    baz=[\\n        'foo',\\n        'bar',\\n        'baz'\\n    ]\\n)\"\r\n        )\r\nE       assert \"ExampleDataclass(foo=1000, bar='Hello, World', baz=['foo', 'bar', 'baz'])\" == \"ExampleDataclass(\\n    foo=1000,\\n    bar='Hello, World',\\n    baz=[\\n        'foo',\\n        'bar',\\n        'baz'\\n    ]\\n)\"\r\nE         + ExampleDataclass(foo=1000, bar='Hello, World', baz=['foo', 'bar', 'baz'])\r\nE         - ExampleDataclass(\r\nE         -     foo=1000,\r\nE         -     bar='Hello, World',\r\nE         -     baz=[\r\nE         -         'foo',\r\nE         -         'bar',\r\nE         -         'baz'\r\nE         -     ]\r\nE         - )\r\n\r\ntests/test_pretty.py:184: AssertionError\r\n----------------------------- Captured stdout call -----------------------------\r\n\"ExampleDataclass(foo=1000, bar='Hello, World', baz=['foo', 'bar', 'baz'])\"\r\n\"ExampleDataclass(foo=1000, bar='Hello, World', baz=['foo', 'bar', 'baz'])\"\r\n________________________ test_reference_cycle_dataclass ________________________\r\n\r\n    def test_reference_cycle_dataclass():\r\n        @dataclass\r\n        class Example:\r\n            x: int\r\n            y: Any\r\n    \r\n        test = Example(1, None)\r\n        test.y = test\r\n        res = pretty_repr(test)\r\n>       assert res == \"Example(x=1, y=...)\"\r\nE       AssertionError: assert 'test_reference_cycle_dataclass.<locals>.Example(x=1, y=...)' == 'Example(x=1, y=...)'\r\nE         - Example(x=1, y=...)\r\nE         + test_reference_cycle_dataclass.<locals>.Example(x=1, y=...)\r\n\r\ntests/test_pretty.py:356: AssertionError\r\n___________________________ test_max_depth_dataclass ___________________________\r\n\r\n    def test_max_depth_dataclass():\r\n        @dataclass\r\n        class Foo:\r\n            foo: object\r\n    \r\n        @dataclass\r\n        class Bar:\r\n            bar: object\r\n    \r\n>       assert (\r\n            pretty_repr(Foo(foo=Bar(bar=Foo(foo=[]))), max_depth=2)\r\n            == \"Foo(foo=Bar(bar=Foo(...)))\"\r\n        )\r\nE       AssertionError: assert 'test_max_depth_dataclass.<locals>.Foo(foo=test_max_depth_dataclass.<locals>.Bar(bar=test_max_depth_dataclass.<locals>.Foo(foo=[])))' == 'Foo(foo=Bar(bar=Foo(...)))'\r\nE         - Foo(foo=Bar(bar=Foo(...)))\r\nE         + test_max_depth_dataclass.<locals>.Foo(foo=test_max_depth_dataclass.<locals>.Bar(bar=test_max_depth_dataclass.<locals>.Foo(foo=[])))\r\n\r\ntests/test_pretty.py:487: AssertionError\r\n=========================== short test summary info ============================\r\nFAILED tests/test_pretty.py::test_pretty_dataclass - assert \"ExampleDataclass...\r\nFAILED tests/test_pretty.py::test_reference_cycle_dataclass - AssertionError:...\r\nFAILED tests/test_pretty.py::test_max_depth_dataclass - AssertionError: asser...\r\n============= 3 failed, 799 passed, 24 skipped, 1 warning in 4.76s =============\r\n```\r\nEdit this with a clear and concise description of what the bug.\r\n\r\nProvide a minimal code example that demonstrates the issue if you can. If the issue is visual in nature, consider posting a screenshot.\r\n\r\n**Platform**\r\n<details>\r\n<summary>Click to expand</summary>\r\n\r\nFedora Linux 41\r\n\r\n</details>\r\n",
          "type": "issue"
        },
        {
          "author": "github-actions",
          "body": "Thank you for your issue. Give us a little time to review it.\n\nPS. You might want to check the [FAQ](https://github.com/textualize/rich/blob/master/FAQ.md) if you haven't done so already.\n\nThis is an automated reply, generated by [FAQtory](https://github.com/willmcgugan/faqtory)",
          "created_at": "2024-05-31T06:40:59Z",
          "type": "comment"
        },
        {
          "author": "github-actions",
          "body": "I hope we solved your problem.\n\nIf you like using Rich, you might also enjoy [Textual](https://textual.textualize.io)",
          "created_at": "2024-08-26T15:48:24Z",
          "type": "comment"
        },
        {
          "author": "github-actions",
          "body": "I hope we solved your problem.\n\nIf you like using Rich, you might also enjoy [Textual](https://textual.textualize.io)",
          "created_at": "2024-08-26T15:48:24Z",
          "type": "comment"
        }
      ]
    },
    {
      "repository": "Textualize/rich",
      "issue_number": 3295,
      "issue_title": "[BUG] Overriding `background_color` of `Syntax` doesn't include padding",
      "issue_url": "https://github.com/Textualize/rich/issues/3295",
      "closed_at": "2024-07-01T20:00:14Z",
      "merged_prs": [
        {
          "pr_number": 3296,
          "pr_title": "fix(syntax): include padding with background color override",
          "pr_url": "https://github.com/Textualize/rich/pull/3296",
          "merged_at": "2024-07-01T20:00:13Z",
          "base_commit": {
            "sha": "fde5d6eee3b0437eaecdcbf6f8b11aeab3a5d503",
            "ref": "master"
          }
        }
      ],
      "discussion": [
        {
          "author": "TomJGooding",
          "body": "- [x] I've checked [docs](https://rich.readthedocs.io/en/latest/introduction.html) and [closed issues](https://github.com/Textualize/rich/issues?q=is%3Aissue+is%3Aclosed) for possible solutions.\r\n- [x] I can't find my issue in the [FAQ](https://github.com/Textualize/rich/blob/master/FAQ.md).\r\n\r\n**Describe the bug**\r\n\r\nSee https://github.com/Textualize/textual/discussions/4227#discussioncomment-8634837 for context.\r\n\r\nAccording to the [Syntax documentation](https://rich.readthedocs.io/en/stable/syntax.html#background-color):\r\n\r\n> You can override the background color from the theme by supplying a background_color argument to the constructor.\r\n\r\nHowever this doesn't seem to work as expected if the `Syntax` has padding:\r\n\r\n![image](https://github.com/Textualize/rich/assets/101601846/65b375da-a8ca-4f6d-b208-4f2435f713f8)\r\n\r\n```python\r\nfrom rich.console import Console\r\nfrom rich.syntax import Syntax\r\n\r\ncode = \"\"\"\\\r\ndef do_something():\r\n    pass\\\r\n\"\"\"\r\n\r\nconsole = Console()\r\n\r\nsyntax = Syntax(\r\n    code,\r\n    lexer=\"python\",\r\n    word_wrap=False,\r\n    indent_guides=True,\r\n    padding=(1, 2),\r\n    theme=\"material\",\r\n    background_color=\"red\",\r\n)\r\n\r\nconsole.print(syntax)\r\n```\r\n\r\nIf you set the `background_color` to the special value \"default\", this produces a different unexpected result:\r\n\r\n![image](https://github.com/Textualize/rich/assets/101601846/9a21cdf2-3617-4cb8-9e60-1891a8b7a67a)\r\n\r\n**Platform**\r\n\r\nPlatform is Linux and tested in various terminal emulators.\r\n\r\n```console\r\n$ pip freeze | grep rich\r\nrich==13.6.0\r\n```",
          "type": "issue"
        },
        {
          "author": "github-actions",
          "body": "Thank you for your issue. Give us a little time to review it.\n\nPS. You might want to check the [FAQ](https://github.com/textualize/rich/blob/master/FAQ.md) if you haven't done so already.\n\nThis is an automated reply, generated by [FAQtory](https://github.com/willmcgugan/faqtory)",
          "created_at": "2024-02-29T20:07:42Z",
          "type": "comment"
        },
        {
          "author": "github-actions",
          "body": "I hope we solved your problem.\n\nIf you like using Rich, you might also enjoy [Textual](https://textual.textualize.io)",
          "created_at": "2024-07-01T20:00:24Z",
          "type": "comment"
        }
      ]
    },
    {
      "repository": "Textualize/rich",
      "issue_number": 3213,
      "issue_title": "Export `rich.text.TextType` so it shows up in the reference",
      "issue_url": "https://github.com/Textualize/rich/issues/3213",
      "closed_at": "2024-01-31T13:05:28Z",
      "merged_prs": [
        {
          "pr_number": 3257,
          "pr_title": "Export TextType into the docs.",
          "pr_url": "https://github.com/Textualize/rich/pull/3257",
          "merged_at": "2024-01-31T13:05:27Z",
          "base_commit": {
            "sha": "fd981823644ccf50d685ac9c0cfe8e1e56c9dd35",
            "ref": "master"
          }
        }
      ],
      "discussion": [
        {
          "author": "rodrigogiraoserrao",
          "body": "Exporting `TextType` and making it visible in the docs means we'll be able to link to it from the Textual docs, where it shows up _a lot_.",
          "type": "issue"
        },
        {
          "author": "github-actions",
          "body": "Thank you for your issue. Give us a little time to review it.\n\nPS. You might want to check the [FAQ](https://github.com/textualize/rich/blob/master/FAQ.md) if you haven't done so already.\n\nThis is an automated reply, generated by [FAQtory](https://github.com/willmcgugan/faqtory)",
          "created_at": "2023-11-22T15:18:34Z",
          "type": "comment"
        },
        {
          "author": "willmcgugan",
          "body": "@rodrigogiraoserrao I think this is done. Please check and close if it is.",
          "created_at": "2024-01-10T10:07:17Z",
          "type": "comment"
        },
        {
          "author": "rodrigogiraoserrao",
          "body": "I don't think it is.\r\n`TextType` in `rich/text.py` _is_ documented with a docstring but it doesn't show up in the rich documentation online: https://rich.readthedocs.io/en/stable/reference/text.html\r\n\r\nIt's also not linked to from the Textual docs.\r\nE.g., in the `Button` reference the table with its parameters mentions the `TextType` but doesn't link to it: https://textual.textualize.io/widgets/button/#textual.widgets.Button\r\n\r\nThe rich docs may need to be rebuilt.\r\nI don't know how these docs work but maybe we need to add `TextStyle` to `rich/docs/source/reference/text.rst`:\r\n\r\nhttps://github.com/Textualize/rich/blob/fd981823644ccf50d685ac9c0cfe8e1e56c9dd35/docs/source/reference/text.rst?plain=1#L1-L5",
          "created_at": "2024-01-10T10:32:55Z",
          "type": "comment"
        },
        {
          "author": "github-actions",
          "body": "I hope we solved your problem.\n\nIf you like using Rich, you might also enjoy [Textual](https://textual.textualize.io)",
          "created_at": "2024-01-31T13:05:40Z",
          "type": "comment"
        }
      ]
    },
    {
      "repository": "Textualize/rich",
      "issue_number": 3176,
      "issue_title": "[BUG] Chunks of text go missing when writing Asian text (wrapping issue)",
      "issue_url": "https://github.com/Textualize/rich/issues/3176",
      "closed_at": "2023-11-14T10:03:56Z",
      "merged_prs": [
        {
          "pr_number": 3180,
          "pr_title": "Fix double-width characters disappearing when wrapping",
          "pr_url": "https://github.com/Textualize/rich/pull/3180",
          "merged_at": "2023-11-14T10:03:55Z",
          "base_commit": {
            "sha": "e76f3c3ea78481342e21a7b3328075462ab69c2b",
            "ref": "master"
          }
        }
      ],
      "discussion": [
        {
          "author": "darrenburns",
          "body": "### Description\r\n\r\n(Originally reported in Textual: https://github.com/Textualize/textual/issues/3567)\r\n\r\nWhen you print Asian text (specifically Chinese and Japanese, which do not use spaces), portions of the text go missing, making it unreadable.\r\n\r\nThis seems to be related to wrapping, as the characters which go missing are at the end of a line.\r\nInstead of being wrapped on to a new line, they disappear.\r\n\r\nThere are [rules for wrapping](https://en.m.wikipedia.org/wiki/Line_breaking_rules_in_East_Asian_languages) in these languages which would take more effort to adhere to, but at the very least, text should not go missing when printed.\r\n\r\n### Examples\r\n\r\nFor example, running the snippet below, the `7` in `1670` disappears:\r\n\r\n```python\r\nfrom rich.console import Console\r\nconsole = Console(width=20)\r\nconsole.print(\"アプリケーションは1670万色を使用でき\")\r\n```\r\n\r\nOutput:\r\n\r\n```\r\nアプリケーションは16\r\n0万色を使用でき\r\n```\r\n\r\nAnd in many cases, like those reported in this issue, multiple characters disappear:\r\n\r\n```python\r\nfrom rich.console import Console\r\nconsole = Console(width=20)\r\nconsole.print(\"TextualはPythonの高速アプリケーション開発フレームワークです\")\r\n```\r\n\r\nOutput:\r\n\r\n```\r\nTextualはPy\r\nthonの高速アプリ\r\nケーション開発フレー\r\n```\r\n\r\nNotice that many of the characters at the end of the text are completely missing (`ムワークです`).\r\n",
          "type": "issue"
        },
        {
          "author": "github-actions",
          "body": "I hope we solved your problem.\n\nIf you like using Rich, you might also enjoy [Textual](https://textual.textualize.io)",
          "created_at": "2023-11-14T10:04:11Z",
          "type": "comment"
        }
      ]
    },
    {
      "repository": "Textualize/rich",
      "issue_number": 3172,
      "issue_title": "Typo in Portuguese README",
      "issue_url": "https://github.com/Textualize/rich/issues/3172",
      "closed_at": "2023-10-30T17:16:57Z",
      "merged_prs": [
        {
          "pr_number": 3178,
          "pr_title": "Corrected Typo in Portuguese README",
          "pr_url": "https://github.com/Textualize/rich/pull/3178",
          "merged_at": "2023-10-31T13:54:31Z",
          "base_commit": {
            "sha": "01d01ed5ee322f65ef5c333955570552c68a40d8",
            "ref": "master"
          }
        }
      ],
      "discussion": [
        {
          "author": "DavdSamuel",
          "body": "I noticed a small typo in the Portuguese version of the README. I would like to contribute by fixing it. Can I do so and submit a pull request?",
          "type": "issue"
        },
        {
          "author": "github-actions",
          "body": "Thank you for your issue. Give us a little time to review it.\n\nPS. You might want to check the [FAQ](https://github.com/textualize/rich/blob/master/FAQ.md) if you haven't done so already.\n\nThis is an automated reply, generated by [FAQtory](https://github.com/willmcgugan/faqtory)",
          "created_at": "2023-10-28T19:53:42Z",
          "type": "comment"
        },
        {
          "author": "darrenburns",
          "body": "Yes, of course 👍 ",
          "created_at": "2023-10-30T17:16:57Z",
          "type": "comment"
        },
        {
          "author": "github-actions",
          "body": "I hope we solved your problem.\n\nIf you like using Rich, you might also enjoy [Textual](https://textual.textualize.io)",
          "created_at": "2023-10-30T17:17:12Z",
          "type": "comment"
        }
      ]
    },
    {
      "repository": "Textualize/rich",
      "issue_number": 3142,
      "issue_title": "[BUG] `Panel.fit` forgot `height` and `highlight` parameters",
      "issue_url": "https://github.com/Textualize/rich/issues/3142",
      "closed_at": "2023-11-07T15:48:42Z",
      "merged_prs": [
        {
          "pr_number": 3192,
          "pr_title": "Add missing Panel.fit parameters",
          "pr_url": "https://github.com/Textualize/rich/pull/3192",
          "merged_at": "2023-11-07T15:48:41Z",
          "base_commit": {
            "sha": "21c0f25869bcdd0ef4e8ebc8d48c4b362147f740",
            "ref": "master"
          }
        }
      ],
      "discussion": [
        {
          "author": "xymy",
          "body": "- [x] I've checked [docs](https://rich.readthedocs.io/en/latest/introduction.html) and [closed issues](https://github.com/Textualize/rich/issues?q=is%3Aissue+is%3Aclosed) for possible solutions.\r\n- [x] I can't find my issue in the [FAQ](https://github.com/Textualize/rich/blob/master/FAQ.md).\r\n\r\n**Describe the bug**\r\n\r\n`Panel.fit` forgot `height` and `highlight` parameters. It should be updated to synchronize with the constructor.\r\n\r\n```python\r\nclass Panel(JupyterMixin):\r\n    def __init__(\r\n        self,\r\n        renderable: \"RenderableType\",\r\n        box: Box = ROUNDED,\r\n        *,\r\n        title: Optional[TextType] = None,\r\n        title_align: AlignMethod = \"center\",\r\n        subtitle: Optional[TextType] = None,\r\n        subtitle_align: AlignMethod = \"center\",\r\n        safe_box: Optional[bool] = None,\r\n        expand: bool = True,\r\n        style: StyleType = \"none\",\r\n        border_style: StyleType = \"none\",\r\n        width: Optional[int] = None,\r\n        height: Optional[int] = None,\r\n        padding: PaddingDimensions = (0, 1),\r\n        highlight: bool = False,\r\n    ) -> None:\r\n        ...\r\n\r\n    @classmethod\r\n    def fit(\r\n        cls,\r\n        renderable: \"RenderableType\",\r\n        box: Box = ROUNDED,\r\n        *,\r\n        title: Optional[TextType] = None,\r\n        title_align: AlignMethod = \"center\",\r\n        subtitle: Optional[TextType] = None,\r\n        subtitle_align: AlignMethod = \"center\",\r\n        safe_box: Optional[bool] = None,\r\n        style: StyleType = \"none\",\r\n        border_style: StyleType = \"none\",\r\n        width: Optional[int] = None,\r\n        padding: PaddingDimensions = (0, 1),\r\n    ) -> \"Panel\":\r\n        ...\r\n```",
          "type": "issue"
        },
        {
          "author": "github-actions",
          "body": "Thank you for your issue. Give us a little time to review it.\n\nPS. You might want to check the [FAQ](https://github.com/textualize/rich/blob/master/FAQ.md) if you haven't done so already.\n\nThis is an automated reply, generated by [FAQtory](https://github.com/willmcgugan/faqtory)",
          "created_at": "2023-10-05T14:40:07Z",
          "type": "comment"
        },
        {
          "author": "github-actions",
          "body": "I hope we solved your problem.\n\nIf you like using Rich, you might also enjoy [Textual](https://textual.textualize.io)",
          "created_at": "2023-11-07T15:48:53Z",
          "type": "comment"
        },
        {
          "author": "darrenburns",
          "body": "Thanks for creating this issue. I've merged a fix for it which should be included in the next release, however I'm not sure when that'll be yet.",
          "created_at": "2023-11-07T15:52:01Z",
          "type": "comment"
        }
      ]
    },
    {
      "repository": "Textualize/rich",
      "issue_number": 3123,
      "issue_title": "[BUG] Plain code blocks do not render correctly on a light background",
      "issue_url": "https://github.com/Textualize/rich/issues/3123",
      "closed_at": "2023-09-17T15:48:47Z",
      "merged_prs": [
        {
          "pr_number": 3132,
          "pr_title": "fix markdown on light",
          "pr_url": "https://github.com/Textualize/rich/pull/3132",
          "merged_at": "2023-09-17T15:48:46Z",
          "base_commit": {
            "sha": "a972ca05522577de2f98eb7c957deead9c87b38f",
            "ref": "master"
          }
        }
      ],
      "discussion": [
        {
          "author": "genovese",
          "body": "- [x] I've checked [docs](https://rich.readthedocs.io/en/latest/introduction.html) and [closed issues](https://github.com/Textualize/rich/issues?q=is%3Aissue+is%3Aclosed) for possible solutions.\r\n- [x] I can't find my issue in the [FAQ](https://github.com/Textualize/rich/blob/master/FAQ.md).\r\n\r\n**Describe the bug**\r\n\r\nMarkdown code *blocks* are rendering illegibly and ignoring any styling in the theme given to the console. The code has a black background and the text, rather than being a cyan, is just unstyled text.  So on bright backgrounds this is effectively black on black (one can barely make out letter shapes); on dark backgrounds you see the text but not as styled.  Inline markdown code displays fine and changes styles as expected.  But neither the default code_block theme or any new theme attached to the console seems to change the output from none on black.\r\n\r\nI've attached an image showing this.  You can see the inline markdown code and the code block.\r\n\r\n<img width=\"1574\" alt=\"Screen Shot 2023-09-04 at 11 07 08\" src=\"https://github.com/Textualize/rich/assets/198177/bdb3acae-d8a2-400d-a0ac-1e377ae44b95\">\r\n\r\n\r\n**Platform**\r\n<details>\r\n<summary>Click to expand</summary>\r\n\r\nWhat platform (Win/Linux/Mac) are you running on? What terminal software are you using?\r\n\r\nRunning on Mac OS 12.6.1.  The same thing happens on standard Terminal and on ITerm2.\r\nNote that the styles show up in `python -m rich.default_styles`, so it is not that the styles\r\nare unable to display.\r\n\r\nI may ask you to copy and paste the output of the following commands. It may save some time if you do it now.\r\n\r\nIf you're using Rich in a terminal:\r\n\r\n```\r\npython -m rich.diagnose\r\npip freeze | grep rich\r\n```\r\n\r\nThe output of the second one is 'rich==13.5.2'\r\n\r\nThe output of the first is\r\n\r\n╭───────────────────────── <class 'rich.console.Console'> ─────────────────────────╮\r\n│ A high level console interface.                                                  │\r\n│                                                                                  │\r\n│ ╭──────────────────────────────────────────────────────────────────────────────╮ │\r\n│ │ <console width=100 ColorSystem.TRUECOLOR>                                    │ │\r\n│ ╰──────────────────────────────────────────────────────────────────────────────╯ │\r\n│                                                                                  │\r\n│     color_system = 'truecolor'                                                   │\r\n│         encoding = 'utf-8'                                                       │\r\n│             file = <_io.TextIOWrapper name='<stdout>' mode='w' encoding='utf-8'> │\r\n│           height = 32                                                            │\r\n│    is_alt_screen = False                                                         │\r\n│ is_dumb_terminal = False                                                         │\r\n│   is_interactive = True                                                          │\r\n│       is_jupyter = False                                                         │\r\n│      is_terminal = True                                                          │\r\n│   legacy_windows = False                                                         │\r\n│         no_color = False                                                         │\r\n│          options = ConsoleOptions(                                               │\r\n│                        size=ConsoleDimensions(width=100, height=32),             │\r\n│                        legacy_windows=False,                                     │\r\n│                        min_width=1,                                              │\r\n│                        max_width=100,                                            │\r\n│                        is_terminal=True,                                         │\r\n│                        encoding='utf-8',                                         │\r\n│                        max_height=32,                                            │\r\n│                        justify=None,                                             │\r\n│                        overflow=None,                                            │\r\n│                        no_wrap=False,                                            │\r\n│                        highlight=None,                                           │\r\n│                        markup=None,                                              │\r\n│                        height=None                                               │\r\n│                    )                                                             │\r\n│            quiet = False                                                         │\r\n│           record = False                                                         │\r\n│         safe_box = True                                                          │\r\n│             size = ConsoleDimensions(width=100, height=32)                       │\r\n│        soft_wrap = False                                                         │\r\n│           stderr = False                                                         │\r\n│            style = None                                                          │\r\n│         tab_size = 8                                                             │\r\n│            width = 100                                                           │\r\n╰──────────────────────────────────────────────────────────────────────────────────╯\r\n╭─── <class 'rich._windows.WindowsConsoleFeatures'> ────╮\r\n│ Windows features available.                           │\r\n│                                                       │\r\n│ ╭───────────────────────────────────────────────────╮ │\r\n│ │ WindowsConsoleFeatures(vt=False, truecolor=False) │ │\r\n│ ╰───────────────────────────────────────────────────╯ │\r\n│                                                       │\r\n│ truecolor = False                                     │\r\n│        vt = False                                     │\r\n╰───────────────────────────────────────────────────────╯\r\n╭────── Environment Variables ───────╮\r\n│ {                                  │\r\n│     'TERM': 'xterm-256color',      │\r\n│     'COLORTERM': 'truecolor',      │\r\n│     'CLICOLOR': None,              │\r\n│     'NO_COLOR': None,     \r\n\r\n         │\r\n│     'TERM_PROGRAM': 'iTerm.app',   │\r\n│     'COLUMNS': None,               │\r\n│     'LINES': None,                 │\r\n│     'JUPYTER_COLUMNS': None,       │\r\n│     'JUPYTER_LINES': None,         │\r\n│     'JPY_PARENT_PID': None,        │\r\n│     'VSCODE_VERBOSE_LOGGING': None │\r\n│ }                                  │\r\n╰────────────────────────────────────╯\r\nplatform=\"Darwin\"\r\n\r\n<img width=\"1574\" alt=\"Screen Shot 2023-09-04 at 11 07 08\" src=\"https://github.com/Textualize/rich/assets/198177/bdb3acae-d8a2-400d-a0ac-1e377ae44b95\">\r\n\r\n</details>\r\n",
          "type": "issue"
        },
        {
          "author": "github-actions",
          "body": "Thank you for your issue. Give us a little time to review it.\n\nPS. You might want to check the [FAQ](https://github.com/textualize/rich/blob/master/FAQ.md) if you haven't done so already.\n\nThis is an automated reply, generated by [FAQtory](https://github.com/willmcgugan/faqtory)",
          "created_at": "2023-09-04T15:15:11Z",
          "type": "comment"
        },
        {
          "author": "willmcgugan",
          "body": "https://label.dev/articles/minimal-reproducible-example/",
          "created_at": "2023-09-04T15:18:48Z",
          "type": "comment"
        },
        {
          "author": "genovese",
          "body": "This is as minimal as I can get it.  Should have mentioned that this happens directly.  It produces output just like what I showed.\r\n\r\n```\r\n22241% python\r\nPython 3.11.4 (main, Jun 20 2023, 16:51:49) [Clang 14.0.0 (clang-1400.0.29.202)] on darwin\r\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\r\n>>> from rich.markdown import Markdown\r\n>>> from rich.console import Console\r\n>>> console = Console()\r\n>>> console.print(Markdown(\"\"\"\r\n... ```\r\n... foo = bar + zap\r\n... ```\r\n... \"\"\"))\r\n\r\n```",
          "created_at": "2023-09-04T19:12:00Z",
          "type": "comment"
        },
        {
          "author": "genovese",
          "body": "Is this sufficient for your needs?\r\n",
          "created_at": "2023-09-06T01:39:07Z",
          "type": "comment"
        },
        {
          "author": "willmcgugan",
          "body": "It's not a minimally reproducable example if I cant cut and paste it. Regardless though, I can reproduce this on a light background.\r\n",
          "created_at": "2023-09-17T14:54:25Z",
          "type": "comment"
        },
        {
          "author": "github-actions",
          "body": "I hope we solved your problem.\n\nIf you like using Rich, you might also enjoy [Textual](https://textual.textualize.io)",
          "created_at": "2023-09-17T15:48:58Z",
          "type": "comment"
        }
      ]
    },
    {
      "repository": "Textualize/rich",
      "issue_number": 3115,
      "issue_title": "[BUG] Rich markdown printed to console only shows a single link in a column/ table cell",
      "issue_url": "https://github.com/Textualize/rich/issues/3115",
      "closed_at": "2023-09-17T14:56:08Z",
      "merged_prs": [
        {
          "pr_number": 3130,
          "pr_title": "Fix markdown table rendering issue with inline styles/links",
          "pr_url": "https://github.com/Textualize/rich/pull/3130",
          "merged_at": "2023-09-17T14:56:07Z",
          "base_commit": {
            "sha": "720800e6930d85ad027b1e9bd0cbb96b5e994ce3",
            "ref": "master"
          }
        }
      ],
      "discussion": [
        {
          "author": "cwerner",
          "body": "- [x] I've checked [docs](https://rich.readthedocs.io/en/latest/introduction.html) and [closed issues](https://github.com/Textualize/rich/issues?q=is%3Aissue+is%3Aclosed) for possible solutions.\r\n- [x] I can't find my issue in the [FAQ](https://github.com/Textualize/rich/blob/master/FAQ.md).\r\n\r\n**Describe the bug**\r\n\r\nI use Rich to format a pandas data frame with multiple links in some column to markdown and show it in the terminal. However, when there are more than a single link in a column rich only shows the last one?\r\n\r\n```python\r\nfrom rich.console import Console\r\nfrom rich.markdown import Markdown\r\n\r\nimport pandas as pd\r\n\r\nmd_table = pd.DataFrame(\r\n    {\r\n        \"links\": [\"[page1](https://www.example.com/page1), [page2](https://www.example.com/page2)\"]\r\n    }\r\n).to_markdown()\r\n\r\nconsole = Console()\r\nconsole.print(Markdown(md_table))\r\n```\r\n\r\nOutput:\r\n```bash\r\n      links  \r\n ━━━━━━━━━━━ \r\n  0   page2  \r\n```\r\n\r\nExpected\r\n```\r\n      links  \r\n ━━━━━━━━━━━ \r\n  0   page1, page2  \r\n```\r\n\r\nIf I write the markdown to a file I get the expected table with multiple links...\r\n\r\n**Platform**\r\n\r\nplatform=\"Darwin\"\r\nrich==13.5.2\r\n\r\n\r\n</details>\r\n",
          "type": "issue"
        },
        {
          "author": "github-actions",
          "body": "Thank you for your issue. Give us a little time to review it.\n\nPS. You might want to check the [FAQ](https://github.com/textualize/rich/blob/master/FAQ.md) if you haven't done so already.\n\nThis is an automated reply, generated by [FAQtory](https://github.com/willmcgugan/faqtory)",
          "created_at": "2023-08-31T09:31:29Z",
          "type": "comment"
        },
        {
          "author": "willmcgugan",
          "body": "Could you post the Markdown it generates?",
          "created_at": "2023-08-31T09:33:27Z",
          "type": "comment"
        },
        {
          "author": "cwerner",
          "body": "```\r\n|    | links                                                                          |\r\n|---:|:-------------------------------------------------------------------------------|\r\n|  0 | [page1](https://www.example.com/page1), [page2](https://www.example.com/page2) |\r\n```",
          "created_at": "2023-08-31T09:35:13Z",
          "type": "comment"
        },
        {
          "author": "cwerner",
          "body": "I actually discovered that the problem is that if there is a link in a table, only the link (and in case of multiple links the last one) is rendered.\r\n\r\nFor instance:\r\n\r\n```python\r\nfrom rich.console import Console\r\nfrom rich.markdown import Markdown\r\n\r\nimport pandas as pd\r\n\r\nmd_table = pd.DataFrame(\r\n    {\r\n        \"links\": [\"some text [page1](https://www.example.com/page1 )\"]\r\n    }\r\n).to_markdown()\r\n\r\nconsole = Console()\r\nconsole.print(Markdown(md_table)) \r\n```\r\n\r\nwill result in:\r\n```bash\r\n      links  \r\n ━━━━━━━━━━━ \r\n  0   page1  \r\n```\r\n\r\nThus, swallowing \"some text\" that was also present in this table cell. Not sure if this gives a clue about what might be wrong?",
          "created_at": "2023-08-31T11:51:39Z",
          "type": "comment"
        },
        {
          "author": "willmcgugan",
          "body": "This may also be present in Textual.",
          "created_at": "2023-08-31T12:02:54Z",
          "type": "comment"
        },
        {
          "author": "davep",
          "body": "> This may also be present in Textual.\r\n\r\nIf I'm reading the issue correctly, it seems to be working fine in Textual (as seen via Frogmouth):\r\n\r\n![Screenshot 2023-08-31 at 13 13 57](https://github.com/Textualize/rich/assets/28237/3a6e2c59-6b87-4816-8a8b-134b7c36c065)\r\n\r\nviewing this Markdown:\r\n\r\n```markdown\r\n| One                                                        | Two       | Three                                 |\r\n|------------------------------------------------------------|-----------|---------------------------------------|\r\n| Some test [and then a link](https://textualize.io/)        | Just Text | [Just a link](https://textualize.io/) |\r\n| Text [then a link](https://blog.davep.org/) then more text | Just Text | Some final text                       |\r\n```\r\n",
          "created_at": "2023-08-31T12:15:14Z",
          "type": "comment"
        },
        {
          "author": "willmcgugan",
          "body": "Good to know. We must be doing something different in Rich.",
          "created_at": "2023-08-31T13:36:36Z",
          "type": "comment"
        },
        {
          "author": "cwerner",
          "body": "Oh nice. Wondering: Can I use `textual` to render my Markdown before I hand it over to `console.print()`until this bug is fixed? I haven't used `textual` before but don't mind this extra dependency for the moment...",
          "created_at": "2023-08-31T13:48:11Z",
          "type": "comment"
        },
        {
          "author": "willmcgugan",
          "body": "You can certainly use Textual, but it works differently from `console.print`. It creates an interactive window inside the terminal.",
          "created_at": "2023-08-31T14:09:39Z",
          "type": "comment"
        },
        {
          "author": "rodrigogiraoserrao",
          "body": "Consider this markdown file:\r\n\r\n```md\r\n[page 1](https://mathspp.com)\r\n\r\n| links |\r\n| - |\r\n| asdfasdf  [page 1](https://mathspp.com) |\r\n```\r\n\r\nRunning `python -m rich.markdown file.md` will show the first link just fine but the one on the table doesn't:\r\n\r\n```\r\npage 1 (https://mathspp.com)\r\n\r\n\r\n  links\r\n ━━━━━━━\r\n  )\r\n```\r\n\r\nPutting text on the right of the table link makes the link go away and only displays that text:\r\n\r\n<details>\r\n<summary <code>file.md</code> with text on the right. </summary>\r\n\r\n```md\r\n[page 1](https://mathspp.com)\r\n\r\n| links |\r\n| - |\r\n| asdfasdf  [page 1](https://mathspp.com) right |\r\n```\r\n</details>\r\n<details>\r\n<summary> Output of <code>python -m rich.markdown file.md</code> </summary>\r\n\r\n```\r\npage 1 (https://mathspp.com)\r\n\r\n\r\n  links\r\n ━━━━━━━━\r\n   right\r\n```\r\n\r\n</details>\r\n\r\n---\r\n\r\nRunning with `--hyperlinks` does a slightly better job, but it still drops things.\r\n\r\n### With text on the right\r\n\r\n<details>\r\n<summary <code>file.md</code> with text on the right. </summary>\r\n\r\n```md\r\n[page 1](https://mathspp.com)\r\n\r\n| links |\r\n| - |\r\n| asdfasdf  [page 1](https://mathspp.com) some text |\r\n```\r\n\r\n</details>\r\n<details>\r\n<summary> Output of <code>python -m rich.markdown file.md -y</code> </summary>\r\n(The “page 1” has the proper link in the terminal)\r\n\r\n```\r\npage 1\r\n\r\n\r\n  links\r\n ━━━━━━━━━━━━\r\n   some text\r\n```\r\n</details>\r\n\r\n---\r\n\r\n### Without text on the right\r\n\r\n<details>\r\n<summary <code>file.md</code> without text on the right. </summary>\r\n\r\n```md\r\n[page 1](https://mathspp.com)\r\n\r\n| links |\r\n| - |\r\n| asdfasdf  [page 1](https://mathspp.com) |\r\n```\r\n</details>\r\n<details>\r\n<summary> Output of <code>python -m rich.markdown file.md -y</code> </summary>\r\n(The output has the proper links in the terminal)\r\n\r\n```\r\npage 1\r\n\r\n\r\n  links\r\n ━━━━━━━━\r\n  page 1\r\n```\r\n</details>",
          "created_at": "2023-09-12T13:26:00Z",
          "type": "comment"
        },
        {
          "author": "rodrigogiraoserrao",
          "body": "Turns out we're seeing this interesting interaction with a bunch of inline styles in markdown.\r\n\r\nThe markdown below gets rendered into the output shown after that:\r\n\r\n```md\r\n| stuff |\r\n| - |\r\n| asdfasdf  [page 1](https://mathspp.com) some text |\r\n| This is `some code` here |\r\n| This is `some code` |\r\n| Can I set this to _italics_? |\r\n```\r\n\r\n```\r\n  stuff\r\n ━━━━━━━━━━━━\r\n   some text\r\n   here\r\n  some code\r\n  ?\r\n```",
          "created_at": "2023-09-12T13:34:12Z",
          "type": "comment"
        },
        {
          "author": "rodrigogiraoserrao",
          "body": "I've tracked the issue down to `rich/markdown.py::TableDataElement.on_text`, which should append to its content instead of setting it directly.",
          "created_at": "2023-09-12T16:26:06Z",
          "type": "comment"
        },
        {
          "author": "github-actions",
          "body": "I hope we solved your problem.\n\nIf you like using Rich, you might also enjoy [Textual](https://textual.textualize.io)",
          "created_at": "2023-09-17T14:56:19Z",
          "type": "comment"
        }
      ]
    },
    {
      "repository": "Textualize/rich",
      "issue_number": 3112,
      "issue_title": "[BUG] pre-commit hook installation is broken on 3.10+",
      "issue_url": "https://github.com/Textualize/rich/issues/3112",
      "closed_at": "2023-11-07T17:07:07Z",
      "merged_prs": [
        {
          "pr_number": 3113,
          "pr_title": "Update pre-commit hooks",
          "pr_url": "https://github.com/Textualize/rich/pull/3113",
          "merged_at": "2023-11-07T17:07:05Z",
          "base_commit": {
            "sha": "720800e6930d85ad027b1e9bd0cbb96b5e994ce3",
            "ref": "master"
          }
        }
      ],
      "discussion": [
        {
          "author": "evilhamsterman",
          "body": "- [x] I've checked [docs](https://rich.readthedocs.io/en/latest/introduction.html) and [closed issues](https://github.com/Textualize/rich/issues?q=is%3Aissue+is%3Aclosed) for possible solutions.\r\n- [x] I can't find my issue in the [FAQ](https://github.com/Textualize/rich/blob/master/FAQ.md).\r\n\r\n**Describe the bug**\r\nPre-commit hook installation on newer versions of Python it appears to be due to the pycln hook\r\n\r\n<details>\r\n<summary>pre-commit.log</summary>\r\n\r\n### version information\r\n\r\n```\r\npre-commit version: 2.21.0\r\ngit --version: git version 2.41.0\r\nsys.version:\r\n    3.11.4 (main, Jul 28 2023, 05:02:22) [GCC 12.2.0]\r\nsys.executable: /home/vscode/.cache/pypoetry/virtualenvs/rich-2QMMeOcc-py3.11/bin/python\r\nos.name: posix\r\nsys.platform: linux\r\n```\r\n\r\n### error information\r\n\r\n```\r\nAn unexpected error has occurred: CalledProcessError: command: ('/home/vscode/.cache/pre-commit/repopym0e_4s/py_env-python3/bin/python', '-mpip', 'install', '.')\r\nreturn code: 1\r\nstdout:\r\n    Processing /home/vscode/.cache/pre-commit/repopym0e_4s\r\n      Installing build dependencies: started\r\n      Installing build dependencies: finished with status 'done'\r\n      Getting requirements to build wheel: started\r\n      Getting requirements to build wheel: finished with status 'done'\r\n      Preparing metadata (pyproject.toml): started\r\n      Preparing metadata (pyproject.toml): finished with status 'done'\r\n    Collecting libcst<0.4.0,>=0.3.10 (from pycln==1.2.5)\r\n      Using cached libcst-0.3.23-py3-none-any.whl (517 kB)\r\n    Collecting pathspec<0.10.0,>=0.9.0 (from pycln==1.2.5)\r\n      Using cached pathspec-0.9.0-py2.py3-none-any.whl (31 kB)\r\n    Collecting pyyaml<6.0.0,>=5.3.1 (from pycln==1.2.5)\r\n      Using cached PyYAML-5.4.1.tar.gz (175 kB)\r\n      Installing build dependencies: started\r\n      Installing build dependencies: finished with status 'done'\r\n      Getting requirements to build wheel: started\r\n      Getting requirements to build wheel: finished with status 'error'\r\n    \r\nstderr:\r\n      error: subprocess-exited-with-error\r\n      \r\n      × Getting requirements to build wheel did not run successfully.\r\n      │ exit code: 1\r\n      ╰─> [68 lines of output]\r\n          /tmp/pip-build-env-a7onesou/overlay/lib/python3.11/site-packages/setuptools/config/setupcfg.py:293: _DeprecatedConfig: Deprecated config in `setup.cfg`\r\n          !!\r\n          \r\n                  ********************************************************************************\r\n                  The license_file parameter is deprecated, use license_files instead.\r\n          \r\n                  By 2023-Oct-30, you need to update your project and remove deprecated calls\r\n                  or your builds will no longer be supported.\r\n          \r\n                  See https://setuptools.pypa.io/en/latest/userguide/declarative_config.html for details.\r\n                  ********************************************************************************\r\n          \r\n          !!\r\n            parsed = self.parsers.get(option_name, lambda x: x)(value)\r\n          running egg_info\r\n          writing lib3/PyYAML.egg-info/PKG-INFO\r\n          writing dependency_links to lib3/PyYAML.egg-info/dependency_links.txt\r\n          writing top-level names to lib3/PyYAML.egg-info/top_level.txt\r\n          Traceback (most recent call last):\r\n            File \"/home/vscode/.cache/pre-commit/repopym0e_4s/py_env-python3/lib/python3.11/site-packages/pip/_vendor/pyproject_hooks/_in_process/_in_process.py\", line 353, in <module>\r\n              main()\r\n            File \"/home/vscode/.cache/pre-commit/repopym0e_4s/py_env-python3/lib/python3.11/site-packages/pip/_vendor/pyproject_hooks/_in_process/_in_process.py\", line 335, in main\r\n              json_out['return_val'] = hook(**hook_input['kwargs'])\r\n                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n            File \"/home/vscode/.cache/pre-commit/repopym0e_4s/py_env-python3/lib/python3.11/site-packages/pip/_vendor/pyproject_hooks/_in_process/_in_process.py\", line 118, in get_requires_for_build_wheel\r\n              return hook(config_settings)\r\n                     ^^^^^^^^^^^^^^^^^^^^^\r\n            File \"/tmp/pip-build-env-a7onesou/overlay/lib/python3.11/site-packages/setuptools/build_meta.py\", line 355, in get_requires_for_build_wheel\r\n              return self._get_build_requires(config_settings, requirements=['wheel'])\r\n                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n            File \"/tmp/pip-build-env-a7onesou/overlay/lib/python3.11/site-packages/setuptools/build_meta.py\", line 325, in _get_build_requires\r\n              self.run_setup()\r\n            File \"/tmp/pip-build-env-a7onesou/overlay/lib/python3.11/site-packages/setuptools/build_meta.py\", line 341, in run_setup\r\n              exec(code, locals())\r\n            File \"<string>\", line 271, in <module>\r\n            File \"/tmp/pip-build-env-a7onesou/overlay/lib/python3.11/site-packages/setuptools/__init__.py\", line 107, in setup\r\n              return distutils.core.setup(**attrs)\r\n                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n            File \"/tmp/pip-build-env-a7onesou/overlay/lib/python3.11/site-packages/setuptools/_distutils/core.py\", line 185, in setup\r\n              return run_commands(dist)\r\n                     ^^^^^^^^^^^^^^^^^^\r\n            File \"/tmp/pip-build-env-a7onesou/overlay/lib/python3.11/site-packages/setuptools/_distutils/core.py\", line 201, in run_commands\r\n              dist.run_commands()\r\n            File \"/tmp/pip-build-env-a7onesou/overlay/lib/python3.11/site-packages/setuptools/_distutils/dist.py\", line 969, in run_commands\r\n              self.run_command(cmd)\r\n            File \"/tmp/pip-build-env-a7onesou/overlay/lib/python3.11/site-packages/setuptools/dist.py\", line 1233, in run_command\r\n              super().run_command(command)\r\n            File \"/tmp/pip-build-env-a7onesou/overlay/lib/python3.11/site-packages/setuptools/_distutils/dist.py\", line 988, in run_command\r\n              cmd_obj.run()\r\n            File \"/tmp/pip-build-env-a7onesou/overlay/lib/python3.11/site-packages/setuptools/command/egg_info.py\", line 319, in run\r\n              self.find_sources()\r\n            File \"/tmp/pip-build-env-a7onesou/overlay/lib/python3.11/site-packages/setuptools/command/egg_info.py\", line 327, in find_sources\r\n              mm.run()\r\n            File \"/tmp/pip-build-env-a7onesou/overlay/lib/python3.11/site-packages/setuptools/command/egg_info.py\", line 549, in run\r\n              self.add_defaults()\r\n            File \"/tmp/pip-build-env-a7onesou/overlay/lib/python3.11/site-packages/setuptools/command/egg_info.py\", line 587, in add_defaults\r\n              sdist.add_defaults(self)\r\n            File \"/tmp/pip-build-env-a7onesou/overlay/lib/python3.11/site-packages/setuptools/command/sdist.py\", line 113, in add_defaults\r\n              super().add_defaults()\r\n            File \"/tmp/pip-build-env-a7onesou/overlay/lib/python3.11/site-packages/setuptools/_distutils/command/sdist.py\", line 251, in add_defaults\r\n              self._add_defaults_ext()\r\n            File \"/tmp/pip-build-env-a7onesou/overlay/lib/python3.11/site-packages/setuptools/_distutils/command/sdist.py\", line 336, in _add_defaults_ext\r\n              self.filelist.extend(build_ext.get_source_files())\r\n                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n            File \"<string>\", line 201, in get_source_files\r\n            File \"/tmp/pip-build-env-a7onesou/overlay/lib/python3.11/site-packages/setuptools/_distutils/cmd.py\", line 107, in __getattr__\r\n              raise AttributeError(attr)\r\n          AttributeError: cython_sources\r\n          [end of output]\r\n      \r\n      note: This error originates from a subprocess, and is likely not a problem with pip.\r\n    error: subprocess-exited-with-error\r\n    \r\n    × Getting requirements to build wheel did not run successfully.\r\n    │ exit code: 1\r\n    ╰─> See above for output.\r\n    \r\n    note: This error originates from a subprocess, and is likely not a problem with pip.\r\n    \r\n```\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"/home/vscode/.cache/pypoetry/virtualenvs/rich-2QMMeOcc-py3.11/lib/python3.11/site-packages/pre_commit/error_handler.py\", line 73, in error_handler\r\n    yield\r\n  File \"/home/vscode/.cache/pypoetry/virtualenvs/rich-2QMMeOcc-py3.11/lib/python3.11/site-packages/pre_commit/main.py\", line 390, in main\r\n    return install_hooks(args.config, store)\r\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/home/vscode/.cache/pypoetry/virtualenvs/rich-2QMMeOcc-py3.11/lib/python3.11/site-packages/pre_commit/commands/install_uninstall.py\", line 146, in install_hooks\r\n    install_hook_envs(all_hooks(load_config(config_file), store), store)\r\n  File \"/home/vscode/.cache/pypoetry/virtualenvs/rich-2QMMeOcc-py3.11/lib/python3.11/site-packages/pre_commit/repository.py\", line 223, in install_hook_envs\r\n    _hook_install(hook)\r\n  File \"/home/vscode/.cache/pypoetry/virtualenvs/rich-2QMMeOcc-py3.11/lib/python3.11/site-packages/pre_commit/repository.py\", line 79, in _hook_install\r\n    lang.install_environment(\r\n  File \"/home/vscode/.cache/pypoetry/virtualenvs/rich-2QMMeOcc-py3.11/lib/python3.11/site-packages/pre_commit/languages/python.py\", line 221, in install_environment\r\n    helpers.run_setup_cmd(prefix, install_cmd)\r\n  File \"/home/vscode/.cache/pypoetry/virtualenvs/rich-2QMMeOcc-py3.11/lib/python3.11/site-packages/pre_commit/languages/helpers.py\", line 48, in run_setup_cmd\r\n    cmd_output_b(*cmd, cwd=prefix.prefix_dir, **kwargs)\r\n  File \"/home/vscode/.cache/pypoetry/virtualenvs/rich-2QMMeOcc-py3.11/lib/python3.11/site-packages/pre_commit/util.py\", line 143, in cmd_output_b\r\n    raise CalledProcessError(returncode, cmd, stdout_b, stderr_b)\r\npre_commit.util.CalledProcessError: command: ('/home/vscode/.cache/pre-commit/repopym0e_4s/py_env-python3/bin/python', '-mpip', 'install', '.')\r\nreturn code: 1\r\nstdout:\r\n    Processing /home/vscode/.cache/pre-commit/repopym0e_4s\r\n      Installing build dependencies: started\r\n      Installing build dependencies: finished with status 'done'\r\n      Getting requirements to build wheel: started\r\n      Getting requirements to build wheel: finished with status 'done'\r\n      Preparing metadata (pyproject.toml): started\r\n      Preparing metadata (pyproject.toml): finished with status 'done'\r\n    Collecting libcst<0.4.0,>=0.3.10 (from pycln==1.2.5)\r\n      Using cached libcst-0.3.23-py3-none-any.whl (517 kB)\r\n    Collecting pathspec<0.10.0,>=0.9.0 (from pycln==1.2.5)\r\n      Using cached pathspec-0.9.0-py2.py3-none-any.whl (31 kB)\r\n    Collecting pyyaml<6.0.0,>=5.3.1 (from pycln==1.2.5)\r\n      Using cached PyYAML-5.4.1.tar.gz (175 kB)\r\n      Installing build dependencies: started\r\n      Installing build dependencies: finished with status 'done'\r\n      Getting requirements to build wheel: started\r\n      Getting requirements to build wheel: finished with status 'error'\r\n    \r\nstderr:\r\n      error: subprocess-exited-with-error\r\n      \r\n      × Getting requirements to build wheel did not run successfully.\r\n      │ exit code: 1\r\n      ╰─> [68 lines of output]\r\n          /tmp/pip-build-env-a7onesou/overlay/lib/python3.11/site-packages/setuptools/config/setupcfg.py:293: _DeprecatedConfig: Deprecated config in `setup.cfg`\r\n          !!\r\n          \r\n                  ********************************************************************************\r\n                  The license_file parameter is deprecated, use license_files instead.\r\n          \r\n                  By 2023-Oct-30, you need to update your project and remove deprecated calls\r\n                  or your builds will no longer be supported.\r\n          \r\n                  See https://setuptools.pypa.io/en/latest/userguide/declarative_config.html for details.\r\n                  ********************************************************************************\r\n          \r\n          !!\r\n            parsed = self.parsers.get(option_name, lambda x: x)(value)\r\n          running egg_info\r\n          writing lib3/PyYAML.egg-info/PKG-INFO\r\n          writing dependency_links to lib3/PyYAML.egg-info/dependency_links.txt\r\n          writing top-level names to lib3/PyYAML.egg-info/top_level.txt\r\n          Traceback (most recent call last):\r\n            File \"/home/vscode/.cache/pre-commit/repopym0e_4s/py_env-python3/lib/python3.11/site-packages/pip/_vendor/pyproject_hooks/_in_process/_in_process.py\", line 353, in <module>\r\n              main()\r\n            File \"/home/vscode/.cache/pre-commit/repopym0e_4s/py_env-python3/lib/python3.11/site-packages/pip/_vendor/pyproject_hooks/_in_process/_in_process.py\", line 335, in main\r\n              json_out['return_val'] = hook(**hook_input['kwargs'])\r\n                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n            File \"/home/vscode/.cache/pre-commit/repopym0e_4s/py_env-python3/lib/python3.11/site-packages/pip/_vendor/pyproject_hooks/_in_process/_in_process.py\", line 118, in get_requires_for_build_wheel\r\n              return hook(config_settings)\r\n                     ^^^^^^^^^^^^^^^^^^^^^\r\n            File \"/tmp/pip-build-env-a7onesou/overlay/lib/python3.11/site-packages/setuptools/build_meta.py\", line 355, in get_requires_for_build_wheel\r\n              return self._get_build_requires(config_settings, requirements=['wheel'])\r\n                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n            File \"/tmp/pip-build-env-a7onesou/overlay/lib/python3.11/site-packages/setuptools/build_meta.py\", line 325, in _get_build_requires\r\n              self.run_setup()\r\n            File \"/tmp/pip-build-env-a7onesou/overlay/lib/python3.11/site-packages/setuptools/build_meta.py\", line 341, in run_setup\r\n              exec(code, locals())\r\n            File \"<string>\", line 271, in <module>\r\n            File \"/tmp/pip-build-env-a7onesou/overlay/lib/python3.11/site-packages/setuptools/__init__.py\", line 107, in setup\r\n              return distutils.core.setup(**attrs)\r\n                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n            File \"/tmp/pip-build-env-a7onesou/overlay/lib/python3.11/site-packages/setuptools/_distutils/core.py\", line 185, in setup\r\n              return run_commands(dist)\r\n                     ^^^^^^^^^^^^^^^^^^\r\n            File \"/tmp/pip-build-env-a7onesou/overlay/lib/python3.11/site-packages/setuptools/_distutils/core.py\", line 201, in run_commands\r\n              dist.run_commands()\r\n            File \"/tmp/pip-build-env-a7onesou/overlay/lib/python3.11/site-packages/setuptools/_distutils/dist.py\", line 969, in run_commands\r\n              self.run_command(cmd)\r\n            File \"/tmp/pip-build-env-a7onesou/overlay/lib/python3.11/site-packages/setuptools/dist.py\", line 1233, in run_command\r\n              super().run_command(command)\r\n            File \"/tmp/pip-build-env-a7onesou/overlay/lib/python3.11/site-packages/setuptools/_distutils/dist.py\", line 988, in run_command\r\n              cmd_obj.run()\r\n            File \"/tmp/pip-build-env-a7onesou/overlay/lib/python3.11/site-packages/setuptools/command/egg_info.py\", line 319, in run\r\n              self.find_sources()\r\n            File \"/tmp/pip-build-env-a7onesou/overlay/lib/python3.11/site-packages/setuptools/command/egg_info.py\", line 327, in find_sources\r\n              mm.run()\r\n            File \"/tmp/pip-build-env-a7onesou/overlay/lib/python3.11/site-packages/setuptools/command/egg_info.py\", line 549, in run\r\n              self.add_defaults()\r\n            File \"/tmp/pip-build-env-a7onesou/overlay/lib/python3.11/site-packages/setuptools/command/egg_info.py\", line 587, in add_defaults\r\n              sdist.add_defaults(self)\r\n            File \"/tmp/pip-build-env-a7onesou/overlay/lib/python3.11/site-packages/setuptools/command/sdist.py\", line 113, in add_defaults\r\n              super().add_defaults()\r\n            File \"/tmp/pip-build-env-a7onesou/overlay/lib/python3.11/site-packages/setuptools/_distutils/command/sdist.py\", line 251, in add_defaults\r\n              self._add_defaults_ext()\r\n            File \"/tmp/pip-build-env-a7onesou/overlay/lib/python3.11/site-packages/setuptools/_distutils/command/sdist.py\", line 336, in _add_defaults_ext\r\n              self.filelist.extend(build_ext.get_source_files())\r\n                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n            File \"<string>\", line 201, in get_source_files\r\n            File \"/tmp/pip-build-env-a7onesou/overlay/lib/python3.11/site-packages/setuptools/_distutils/cmd.py\", line 107, in __getattr__\r\n              raise AttributeError(attr)\r\n          AttributeError: cython_sources\r\n          [end of output]\r\n      \r\n      note: This error originates from a subprocess, and is likely not a problem with pip.\r\n    error: subprocess-exited-with-error\r\n    \r\n    × Getting requirements to build wheel did not run successfully.\r\n    │ exit code: 1\r\n    ╰─> See above for output.\r\n    \r\n    note: This error originates from a subprocess, and is likely not a problem with pip.\r\n</details>\r\n\r\n\r\n\r\n**Platform**\r\nI've tried on Mac and Linux Python 3.9, 3.10, 3.11. The hooks fail to install on 3.10 and 3.11\r\n\r\n",
          "type": "issue"
        },
        {
          "author": "github-actions",
          "body": "Thank you for your issue. Give us a little time to review it.\n\nPS. You might want to check the [FAQ](https://github.com/textualize/rich/blob/master/FAQ.md) if you haven't done so already.\n\nThis is an automated reply, generated by [FAQtory](https://github.com/willmcgugan/faqtory)",
          "created_at": "2023-08-30T23:46:26Z",
          "type": "comment"
        },
        {
          "author": "github-actions",
          "body": "I hope we solved your problem.\n\nIf you like using Rich, you might also enjoy [Textual](https://textual.textualize.io)",
          "created_at": "2023-11-07T17:07:17Z",
          "type": "comment"
        }
      ]
    },
    {
      "repository": "Textualize/rich",
      "issue_number": 3104,
      "issue_title": "[BUG] `font-family` ignored in `html_export` due to user agent stylesheet for `<code>`",
      "issue_url": "https://github.com/Textualize/rich/issues/3104",
      "closed_at": "2023-11-07T17:04:34Z",
      "merged_prs": [
        {
          "pr_number": 3105,
          "pr_title": "Fix #3104",
          "pr_url": "https://github.com/Textualize/rich/pull/3105",
          "merged_at": "2023-11-07T17:04:32Z",
          "base_commit": {
            "sha": "9f620dc50c0008c35e9f8493f198e6e593574a70",
            "ref": "master"
          }
        }
      ],
      "discussion": [
        {
          "author": "AaronBeaudoin",
          "body": "- [X] I've checked [docs](https://rich.readthedocs.io/en/latest/introduction.html) and [closed issues](https://github.com/Textualize/rich/issues?q=is%3Aissue+is%3Aclosed) for possible solutions.\r\n- [X] I can't find my issue in the [FAQ](https://github.com/Textualize/rich/blob/master/FAQ.md).\r\n\r\n**Describe the bug**\r\n\r\nRun this code:\r\n\r\n```py\r\nimport rich.console\r\n\r\ntry:\r\n    test = 1\r\n    raise Exception()\r\nexcept Exception:\r\n    console = rich.console.Console(record=True)\r\n    console.print_exception(show_locals=True)\r\n    html = console.export_html(inline_styles=True)\r\n    with open(\"test.html\", \"w\") as html_file:\r\n        html_file.write(html)\r\n```\r\n\r\nYou will get an `test.html` output file. Open it in Chrome.\r\n\r\nI'm on macOS, and it shows up like this:\r\n\r\n![image](https://github.com/Textualize/rich/assets/26592486/4b124132-b7a9-4156-bfd9-8912c65f2764)\r\n\r\n\r\nNotice the lines are not aligned properly on the right side. Here is why:\r\n\r\n![image](https://github.com/Textualize/rich/assets/26592486/8d6e13e6-2124-46e2-972d-1d4a31256615)\r\n\r\nAs you can see, Chrome's user agent stylesheet causes the `<code>` element to reset the `font-family` on the `<pre>` element back to `monospace`. All we need is to have Rich add a `font-family: inherit;` on the `<code>` element and everything is fine:\r\n\r\n![image](https://github.com/Textualize/rich/assets/26592486/ed1c2e6e-7d89-4d39-8301-cc92679458d9)\r\n\r\n**Platform**\r\n<details>\r\n<summary>Click to expand</summary>\r\n\r\nWhat platform (Win/Linux/Mac) are you running on? What terminal software are you using?\r\nMac with Chrome\r\n\r\n```\r\n❯ python -m rich.diagnose\r\n╭───────────────────────── <class 'rich.console.Console'> ─────────────────────────╮\r\n│ A high level console interface.                                                  │\r\n│                                                                                  │\r\n│ ╭──────────────────────────────────────────────────────────────────────────────╮ │\r\n│ │ <console width=148 ColorSystem.TRUECOLOR>                                    │ │\r\n│ ╰──────────────────────────────────────────────────────────────────────────────╯ │\r\n│                                                                                  │\r\n│     color_system = 'truecolor'                                                   │\r\n│         encoding = 'utf-8'                                                       │\r\n│             file = <_io.TextIOWrapper name='<stdout>' mode='w' encoding='utf-8'> │\r\n│           height = 87                                                            │\r\n│    is_alt_screen = False                                                         │\r\n│ is_dumb_terminal = False                                                         │\r\n│   is_interactive = True                                                          │\r\n│       is_jupyter = False                                                         │\r\n│      is_terminal = True                                                          │\r\n│   legacy_windows = False                                                         │\r\n│         no_color = False                                                         │\r\n│          options = ConsoleOptions(                                               │\r\n│                        size=ConsoleDimensions(width=148, height=87),             │\r\n│                        legacy_windows=False,                                     │\r\n│                        min_width=1,                                              │\r\n│                        max_width=148,                                            │\r\n│                        is_terminal=True,                                         │\r\n│                        encoding='utf-8',                                         │\r\n│                        max_height=87,                                            │\r\n│                        justify=None,                                             │\r\n│                        overflow=None,                                            │\r\n│                        no_wrap=False,                                            │\r\n│                        highlight=None,                                           │\r\n│                        markup=None,                                              │\r\n│                        height=None                                               │\r\n│                    )                                                             │\r\n│            quiet = False                                                         │\r\n│           record = False                                                         │\r\n│         safe_box = True                                                          │\r\n│             size = ConsoleDimensions(width=148, height=87)                       │\r\n│        soft_wrap = False                                                         │\r\n│           stderr = False                                                         │\r\n│            style = None                                                          │\r\n│         tab_size = 8                                                             │\r\n│            width = 148                                                           │\r\n╰──────────────────────────────────────────────────────────────────────────────────╯\r\n╭─── <class 'rich._windows.WindowsConsoleFeatures'> ────╮\r\n│ Windows features available.                           │\r\n│                                                       │\r\n│ ╭───────────────────────────────────────────────────╮ │\r\n│ │ WindowsConsoleFeatures(vt=False, truecolor=False) │ │\r\n│ ╰───────────────────────────────────────────────────╯ │\r\n│                                                       │\r\n│ truecolor = False                                     │\r\n│        vt = False                                     │\r\n╰───────────────────────────────────────────────────────╯\r\n╭────── Environment Variables ───────╮\r\n│ {                                  │\r\n│     'TERM': 'xterm-256color',      │\r\n│     'COLORTERM': 'truecolor',      │\r\n│     'CLICOLOR': None,              │\r\n│     'NO_COLOR': None,              │\r\n│     'TERM_PROGRAM': 'vscode',      │\r\n│     'COLUMNS': None,               │\r\n│     'LINES': None,                 │\r\n│     'JUPYTER_COLUMNS': None,       │\r\n│     'JUPYTER_LINES': None,         │\r\n│     'JPY_PARENT_PID': None,        │\r\n│     'VSCODE_VERBOSE_LOGGING': None │\r\n│ }                                  │\r\n╰────────────────────────────────────╯\r\nplatform=\"Darwin\"\r\n\r\n❯ python -m pip freeze | grep rich\r\nrich==13.4.2\r\n```\r\n\r\n</details>\r\n",
          "type": "issue"
        },
        {
          "author": "github-actions",
          "body": "Thank you for your issue. Give us a little time to review it.\n\nPS. You might want to check the [FAQ](https://github.com/textualize/rich/blob/master/FAQ.md) if you haven't done so already.\n\nThis is an automated reply, generated by [FAQtory](https://github.com/willmcgugan/faqtory)",
          "created_at": "2023-08-25T15:16:03Z",
          "type": "comment"
        },
        {
          "author": "github-actions",
          "body": "I hope we solved your problem.\n\nIf you like using Rich, you might also enjoy [Textual](https://textual.textualize.io)",
          "created_at": "2023-11-07T17:04:44Z",
          "type": "comment"
        }
      ]
    },
    {
      "repository": "Textualize/rich",
      "issue_number": 3057,
      "issue_title": "[BUG] Tilde not included in link regex",
      "issue_url": "https://github.com/Textualize/rich/issues/3057",
      "closed_at": "2023-07-31T09:53:04Z",
      "merged_prs": [
        {
          "pr_number": 3067,
          "pr_title": "Allow tilde in URL (fixes #3057)",
          "pr_url": "https://github.com/Textualize/rich/pull/3067",
          "merged_at": "2023-07-31T09:53:03Z",
          "base_commit": {
            "sha": "1ad6f73a4d1d3b40ac3f879feccfaad66412bd1d",
            "ref": "master"
          }
        }
      ],
      "discussion": [
        {
          "author": "willmcgugan",
          "body": "The following doesn't highlight pas the `~`\r\n```\r\n>>> from rich import print\r\n>>> print(\"http://127.0.0.1/~foo\")\r\nhttp://127.0.0.1/~foo\r\n```\r\n\r\n",
          "type": "issue"
        },
        {
          "author": "github-actions",
          "body": "Thank you for your issue. Give us a little time to review it.\n\nPS. You might want to check the [FAQ](https://github.com/textualize/rich/blob/master/FAQ.md) if you haven't done so already.\n\nThis is an automated reply, generated by [FAQtory](https://github.com/willmcgugan/faqtory)",
          "created_at": "2023-07-27T12:18:32Z",
          "type": "comment"
        },
        {
          "author": "github-actions",
          "body": "I hope we solved your problem.\n\nIf you like using Rich, you might also enjoy [Textual](https://textual.textualize.io)",
          "created_at": "2023-07-31T09:53:15Z",
          "type": "comment"
        }
      ]
    },
    {
      "repository": "Textualize/rich",
      "issue_number": 3053,
      "issue_title": "rich.markdown generates AssertionError rendering certain strings",
      "issue_url": "https://github.com/Textualize/rich/issues/3053",
      "closed_at": "2023-07-29T09:13:38Z",
      "merged_prs": [
        {
          "pr_number": 3064,
          "pr_title": "fix for markdown table",
          "pr_url": "https://github.com/Textualize/rich/pull/3064",
          "merged_at": "2023-07-29T09:13:37Z",
          "base_commit": {
            "sha": "01b85ac116c4635b6ddb8b488be8254be6df2a84",
            "ref": "master"
          }
        }
      ],
      "discussion": [
        {
          "author": "jspv",
          "body": "- [x] I've checked [docs](https://rich.readthedocs.io/en/latest/introduction.html) and [closed issues](https://github.com/Textualize/rich/issues?q=is%3Aissue+is%3Aclosed) for possible solutions.\r\n- [x] I can't find my issue in the [FAQ](https://github.com/Textualize/rich/blob/master/FAQ.md).\r\n\r\nMoved from [here](https://github.com/Textualize/textual/issues/3006)\r\n\r\nThe following string `\"| Simple | Table |\\n| ------ | -----\"` or similar ones that are incomplete tables will generate AssertionError rather than printing the string.\r\n\r\n```python\r\nfrom rich.console import Console\r\nfrom rich.markdown import Markdown\r\n\r\n# This will work\r\nresponses = \"| Simple | Table |\\n| ------ | ----- |\\n| cell1  | cell2 |\"\r\n\r\n# This will not work\r\nresponses = \"| Simple | Table |\\n| ------ | ----- \"\r\n\r\nconsole = Console()\r\nmd = Markdown(responses)\r\nconsole.print(md)\r\n```\r\n\r\nResults:\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"/Users/justin/src/mchat/rtest.py\", line 12, in <module>\r\n    console.print(md)\r\n  File \"/Users/justin/Library/Caches/pypoetry/virtualenvs/mchat-mvZqEniY-py3.11/lib/python3.11/site-packages/rich/console.py\", line 1699, in print\r\n    extend(render(renderable, render_options))\r\n  File \"/Users/justin/Library/Caches/pypoetry/virtualenvs/mchat-mvZqEniY-py3.11/lib/python3.11/site-packages/rich/console.py\", line 1331, in render\r\n    for render_output in iter_render:\r\n  File \"/Users/justin/Library/Caches/pypoetry/virtualenvs/mchat-mvZqEniY-py3.11/lib/python3.11/site-packages/rich/markdown.py\", line 686, in __rich_console__\r\n    yield from console.render(element, context.options)\r\n  File \"/Users/justin/Library/Caches/pypoetry/virtualenvs/mchat-mvZqEniY-py3.11/lib/python3.11/site-packages/rich/console.py\", line 1331, in render\r\n    for render_output in iter_render:\r\n  File \"/Users/justin/Library/Caches/pypoetry/virtualenvs/mchat-mvZqEniY-py3.11/lib/python3.11/site-packages/rich/markdown.py\", line 262, in __rich_console__\r\n    assert self.body is not None\r\n           ^^^^^^^^^^^^^^^^^^^^^\r\nAssertionError\r\n```\r\n**Platform**\r\n<details>\r\n<summary>Click to expand</summary>\r\n\r\nMacOS 13.4.1\r\n\r\n```\r\n╭───────────────────────── <class 'rich.console.Console'> ─────────────────────────╮\r\n│ A high level console interface.                                                  │\r\n│                                                                                  │\r\n│ ╭──────────────────────────────────────────────────────────────────────────────╮ │\r\n│ │ <console width=187 ColorSystem.TRUECOLOR>                                    │ │\r\n│ ╰──────────────────────────────────────────────────────────────────────────────╯ │\r\n│                                                                                  │\r\n│     color_system = 'truecolor'                                                   │\r\n│         encoding = 'utf-8'                                                       │\r\n│             file = <_io.TextIOWrapper name='<stdout>' mode='w' encoding='utf-8'> │\r\n│           height = 50                                                            │\r\n│    is_alt_screen = False                                                         │\r\n│ is_dumb_terminal = False                                                         │\r\n│   is_interactive = True                                                          │\r\n│       is_jupyter = False                                                         │\r\n│      is_terminal = True                                                          │\r\n│   legacy_windows = False                                                         │\r\n│         no_color = False                                                         │\r\n│          options = ConsoleOptions(                                               │\r\n│                        size=ConsoleDimensions(width=187, height=50),             │\r\n│                        legacy_windows=False,                                     │\r\n│                        min_width=1,                                              │\r\n│                        max_width=187,                                            │\r\n│                        is_terminal=True,                                         │\r\n│                        encoding='utf-8',                                         │\r\n│                        max_height=50,                                            │\r\n│                        justify=None,                                             │\r\n│                        overflow=None,                                            │\r\n│                        no_wrap=False,                                            │\r\n│                        highlight=None,                                           │\r\n│                        markup=None,                                              │\r\n│                        height=None                                               │\r\n│                    )                                                             │\r\n│            quiet = False                                                         │\r\n│           record = False                                                         │\r\n│         safe_box = True                                                          │\r\n│             size = ConsoleDimensions(width=187, height=50)                       │\r\n│        soft_wrap = False                                                         │\r\n│           stderr = False                                                         │\r\n│            style = None                                                          │\r\n│         tab_size = 8                                                             │\r\n│            width = 187                                                           │\r\n╰──────────────────────────────────────────────────────────────────────────────────╯\r\n╭─── <class 'rich._windows.WindowsConsoleFeatures'> ────╮\r\n│ Windows features available.                           │\r\n│                                                       │\r\n│ ╭───────────────────────────────────────────────────╮ │\r\n│ │ WindowsConsoleFeatures(vt=False, truecolor=False) │ │\r\n│ ╰───────────────────────────────────────────────────╯ │\r\n│                                                       │\r\n│ truecolor = False                                     │\r\n│        vt = False                                     │\r\n╰───────────────────────────────────────────────────────╯\r\n╭────── Environment Variables ───────╮\r\n│ {                                  │\r\n│     'TERM': 'xterm-256color',      │\r\n│     'COLORTERM': 'truecolor',      │\r\n│     'CLICOLOR': None,              │\r\n│     'NO_COLOR': None,              │\r\n│     'TERM_PROGRAM': 'iTerm.app',   │\r\n│     'COLUMNS': None,               │\r\n│     'LINES': None,                 │\r\n│     'JUPYTER_COLUMNS': None,       │\r\n│     'JUPYTER_LINES': None,         │\r\n│     'JPY_PARENT_PID': None,        │\r\n│     'VSCODE_VERBOSE_LOGGING': None │\r\n│ }                                  │\r\n╰────────────────────────────────────╯\r\nplatform=\"Darwin\"\r\nrich==13.4.2\r\n```\r\n\r\n</details>\r\n",
          "type": "issue"
        },
        {
          "author": "github-actions",
          "body": "We found the following entry in the [FAQ](https://github.com/textualize/rich/blob/master/FAQ.md) which you may find helpful:\n\n\n- [Why does content in square brackets disappear?](https://github.com/textualize/rich/blob/master/FAQ.md#why-does-content-in-square-brackets-disappear)\n\nFeel free to close this issue if you found an answer in the FAQ. Otherwise, please give us a little time to review.\n\nThis is an automated reply, generated by [FAQtory](https://github.com/willmcgugan/faqtory)",
          "created_at": "2023-07-25T10:31:05Z",
          "type": "comment"
        },
        {
          "author": "github-actions",
          "body": "I hope we solved your problem.\n\nIf you like using Rich, you might also enjoy [Textual](https://textual.textualize.io)",
          "created_at": "2023-07-29T09:13:48Z",
          "type": "comment"
        }
      ]
    },
    {
      "repository": "Textualize/rich",
      "issue_number": 3027,
      "issue_title": "[BUG] Extra Space above Certain Markdown Tables",
      "issue_url": "https://github.com/Textualize/rich/issues/3027",
      "closed_at": "2024-08-26T14:22:20Z",
      "merged_prs": [
        {
          "pr_number": 3469,
          "pr_title": "fix superfluous space",
          "pr_url": "https://github.com/Textualize/rich/pull/3469",
          "merged_at": "2024-08-26T14:22:19Z",
          "base_commit": {
            "sha": "c478588f3c228a4e86741a057c42b452d7bc6bce",
            "ref": "master"
          }
        }
      ],
      "discussion": [
        {
          "author": "dgrahn",
          "body": "- [x] I've checked [docs](https://rich.readthedocs.io/en/latest/introduction.html) and [closed issues](https://github.com/Textualize/rich/issues?q=is%3Aissue+is%3Aclosed) for possible solutions.\r\n- [x] I can't find my issue in the [FAQ](https://github.com/Textualize/rich/blob/master/FAQ.md).\r\n\r\n**Describe the bug**\r\nCertain markdown tables contain extra newlines above them in Rich 13.4.2.\r\n\r\n```python\r\nfrom rich.console import Console\r\nfrom rich.markdown import Markdown\r\n\r\nMD = \"\"\"\r\n|   Temperature |        |        |        |        |           |\r\n|--------------:|:-------|:-------|:-------|:-------|:----------|\r\n|          0.01 | sam    | sam    | sam    | sam    | sam       |\r\n|          0.1  | sam    | sam    | sam    | sam    | sam       |\r\n|          0.25 | sam    | sam    | sam    | sammy  | sammy     |\r\n|          0.5  | lilly  | sam    | sammy  | sammy  | taffy     |\r\n|          0.75 | bambi  | lola   | snoopy | taffy  | taz       |\r\n|          0.9  | bella  | harper | millie | molly  | sweetie   |\r\n|          1    | Anna   | molly  | shaker | sydney | wheessie  |\r\n|          1.25 | Finley | funny  | gertie | gladi  | road kill |\r\n\"\"\".strip()\r\n\r\nconsole = Console()\r\nmarkdown = Markdown(MD)\r\n\r\nprint('--')\r\nconsole.print(markdown)\r\nprint('--')\r\n```\r\n![image](https://github.com/Textualize/rich/assets/394709/e4d49cad-109e-4ff5-9af6-065b3a91f70c)\r\n\r\n**Platform**\r\n<details>\r\n<summary>Click to expand</summary>\r\n\r\nWindows 10.\r\n\r\n\r\n```\r\n┌───────────────────────── <class 'rich.console.Console'> ─────────────────────────┐\r\n│ A high level console interface.                                                  │\r\n│                                                                                  │\r\n│ ┌──────────────────────────────────────────────────────────────────────────────┐ │\r\n│ │ <console width=148 ColorSystem.WINDOWS>                                      │ │\r\n│ └──────────────────────────────────────────────────────────────────────────────┘ │\r\n│                                                                                  │\r\n│     color_system = 'windows'                                                     │\r\n│         encoding = 'utf-8'                                                       │\r\n│             file = <_io.TextIOWrapper name='<stdout>' mode='w' encoding='utf-8'> │\r\n│           height = 56                                                            │\r\n│    is_alt_screen = False                                                         │\r\n│ is_dumb_terminal = False                                                         │\r\n│   is_interactive = True                                                          │\r\n│       is_jupyter = False                                                         │\r\n│      is_terminal = True                                                          │\r\n│   legacy_windows = True                                                          │\r\n│         no_color = False                                                         │\r\n│          options = ConsoleOptions(                                               │\r\n│                        size=ConsoleDimensions(width=148, height=56),             │\r\n│                        legacy_windows=True,                                      │\r\n│                        min_width=1,                                              │\r\n│                        max_width=148,                                            │\r\n│                        is_terminal=True,                                         │\r\n│                        encoding='utf-8',                                         │\r\n│                        max_height=56,                                            │\r\n│                        justify=None,                                             │\r\n│                        overflow=None,                                            │\r\n│                        no_wrap=False,                                            │\r\n│                        highlight=None,                                           │\r\n│                        markup=None,                                              │\r\n│                        height=None                                               │\r\n│                    )                                                             │\r\n│            quiet = False                                                         │\r\n│           record = False                                                         │\r\n│         safe_box = True                                                          │\r\n│             size = ConsoleDimensions(width=148, height=56)                       │\r\n│        soft_wrap = False                                                         │\r\n│           stderr = False                                                         │\r\n│            style = None                                                          │\r\n│         tab_size = 8                                                             │\r\n│            width = 148                                                           │\r\n└──────────────────────────────────────────────────────────────────────────────────┘\r\n┌─── <class 'rich._windows.WindowsConsoleFeatures'> ────┐\r\n│ Windows features available.                           │\r\n│                                                       │\r\n│ ┌───────────────────────────────────────────────────┐ │\r\n│ │ WindowsConsoleFeatures(vt=False, truecolor=False) │ │\r\n│ └───────────────────────────────────────────────────┘ │\r\n│                                                       │\r\n│ truecolor = False                                     │\r\n│        vt = False                                     │\r\n└───────────────────────────────────────────────────────┘\r\n┌────── Environment Variables ───────┐\r\n│ {                                  │\r\n│     'TERM': None,                  │\r\n│     'COLORTERM': None,             │\r\n│     'CLICOLOR': None,              │\r\n│     'NO_COLOR': None,              │\r\n│     'TERM_PROGRAM': None,          │\r\n│     'COLUMNS': None,               │\r\n│     'LINES': None,                 │\r\n│     'JUPYTER_COLUMNS': None,       │\r\n│     'JUPYTER_LINES': None,         │\r\n│     'JPY_PARENT_PID': None,        │\r\n│     'VSCODE_VERBOSE_LOGGING': None │\r\n│ }                                  │\r\n└────────────────────────────────────┘\r\nplatform=\"Windows\"\r\n```\r\n\r\n\r\n</details>\r\n",
          "type": "issue"
        },
        {
          "author": "github-actions",
          "body": "Thank you for your issue. Give us a little time to review it.\n\nPS. You might want to check the [FAQ](https://github.com/textualize/rich/blob/master/FAQ.md) if you haven't done so already.\n\nThis is an automated reply, generated by [FAQtory](https://github.com/willmcgugan/faqtory)",
          "created_at": "2023-07-06T14:43:45Z",
          "type": "comment"
        },
        {
          "author": "TomJGooding",
          "body": "It looks like an extra new line is rendered for every blank cell in the table.\r\n\r\nI'm still getting to grips with the codebase, but I think I've narrowed it down to here\r\n\r\nhttps://github.com/Textualize/rich/blob/720800e6930d85ad027b1e9bd0cbb96b5e994ce3/rich/markdown.py#L692-L699",
          "created_at": "2023-08-09T19:53:16Z",
          "type": "comment"
        },
        {
          "author": "martinpk",
          "body": "@TomJGooding Thanks for contributing a PR for this. Do you know if there's a workaround in the meantime until your PR is merged?",
          "created_at": "2024-02-24T22:00:36Z",
          "type": "comment"
        },
        {
          "author": "TomJGooding",
          "body": "A simple workaround would be to replace the empty cells in the table. Here's a quick example where I found using an invisible space character seems to trick Rich!\r\n\r\n```python\r\nimport re\r\n\r\nfrom rich.console import Console\r\nfrom rich.markdown import Markdown\r\nfrom rich.rule import Rule\r\n\r\ntable_with_empty_cells = \"\"\"\\\r\n| First Header  |               |\r\n| ------------- | ------------- |\r\n| Content Cell  | Content Cell  |\r\n|               | Content Cell  |\\\r\n\"\"\"\r\n\r\nempty_cell_pat = re.compile(r\"(?<=\\|) +(?=\\|)\")\r\nnew_empty_cell = \"\\u200B\"  # invisible space\r\nnew_table = empty_cell_pat.sub(new_empty_cell, table_with_empty_cells)\r\n\r\nconsole = Console()\r\nconsole.print(Rule(\"table_with_empty_cells\"))\r\nconsole.print(Markdown(table_with_empty_cells))\r\n\r\nconsole.print(Rule(\"new_table\"))\r\nconsole.print(Markdown(new_table))\r\n```",
          "created_at": "2024-02-25T11:23:51Z",
          "type": "comment"
        },
        {
          "author": "martinpk",
          "body": "@TomJGooding Ah, good idea. Thanks for the example code.",
          "created_at": "2024-02-26T15:48:37Z",
          "type": "comment"
        },
        {
          "author": "github-actions",
          "body": "I hope we solved your problem.\n\nIf you like using Rich, you might also enjoy [Textual](https://textual.textualize.io)",
          "created_at": "2024-08-26T14:22:30Z",
          "type": "comment"
        }
      ]
    },
    {
      "repository": "Textualize/rich",
      "issue_number": 3014,
      "issue_title": "[BUG] `Text.append_tokens` does not strip control codes",
      "issue_url": "https://github.com/Textualize/rich/issues/3014",
      "closed_at": "2024-08-26T15:14:24Z",
      "merged_prs": [
        {
          "pr_number": 3471,
          "pr_title": "Fixed exception in append_tokens",
          "pr_url": "https://github.com/Textualize/rich/pull/3471",
          "merged_at": "2024-08-26T15:14:23Z",
          "base_commit": {
            "sha": "e2a982d5ea747f0deb7f78e8eaa5b4be7d9194cf",
            "ref": "master"
          }
        }
      ],
      "discussion": [
        {
          "author": "hamdanal",
          "body": "- [x] I've checked [docs](https://rich.readthedocs.io/en/latest/introduction.html) and [closed issues](https://github.com/Textualize/rich/issues?q=is%3Aissue+is%3Aclosed) for possible solutions.\r\n- [x] I can't find my issue in the [FAQ](https://github.com/Textualize/rich/blob/master/FAQ.md).\r\n\r\n**Describe the bug**\r\n\r\nA string containing control codepoints passed to `Text.append_tokens` sometimes crashes with `IndexError` when printed\r\n\r\nRelated issues: #2284 and #2963\r\n\r\nMinimal code example that demonstrates the issue:\r\n```pycon\r\n>>> from rich import get_console\r\n>>> from rich.text import Text\r\n>>> t = Text().append_tokens([(\"long text that will be wrapped with a control code \\r\\n.\", \"red\")])\r\n>>> get_console().print(t, width=40)\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/tmp/.venv/lib/python3.10/site-packages/rich/console.py\", line 1699, in print\r\n    extend(render(renderable, render_options))\r\n  File \"/tmp/.venv/lib/python3.10/site-packages/rich/console.py\", line 1331, in render\r\n    for render_output in iter_render:\r\n  File \"/tmp/.venv/lib/python3.10/site-packages/rich/text.py\", line 654, in __rich_console__\r\n    lines = self.wrap(\r\n  File \"/tmp/.venv/lib/python3.10/site-packages/rich/text.py\", line 1184, in wrap\r\n    new_lines = line.divide(offsets)\r\n  File \"/tmp/.venv/lib/python3.10/site-packages/rich/text.py\", line 1113, in divide\r\n    line_start, line_end = line_ranges[end_line_no]\r\nIndexError: list index out of range\r\n```\r\n\r\n**Platform**\r\n<details>\r\n<summary>Click to expand</summary>\r\n\r\n```shell\r\n$ python -m rich.diagnose\r\n╭───────────────────────── <class 'rich.console.Console'> ─────────────────────────╮\r\n│ A high level console interface.                                                  │\r\n│                                                                                  │\r\n│ ╭──────────────────────────────────────────────────────────────────────────────╮ │\r\n│ │ <console width=102 ColorSystem.EIGHT_BIT>                                    │ │\r\n│ ╰──────────────────────────────────────────────────────────────────────────────╯ │\r\n│                                                                                  │\r\n│     color_system = '256'                                                         │\r\n│         encoding = 'utf-8'                                                       │\r\n│             file = <_io.TextIOWrapper name='<stdout>' mode='w' encoding='utf-8'> │\r\n│           height = 51                                                            │\r\n│    is_alt_screen = False                                                         │\r\n│ is_dumb_terminal = False                                                         │\r\n│   is_interactive = True                                                          │\r\n│       is_jupyter = False                                                         │\r\n│      is_terminal = True                                                          │\r\n│   legacy_windows = False                                                         │\r\n│         no_color = False                                                         │\r\n│          options = ConsoleOptions(                                               │\r\n│                        size=ConsoleDimensions(width=102, height=51),             │\r\n│                        legacy_windows=False,                                     │\r\n│                        min_width=1,                                              │\r\n│                        max_width=102,                                            │\r\n│                        is_terminal=True,                                         │\r\n│                        encoding='utf-8',                                         │\r\n│                        max_height=51,                                            │\r\n│                        justify=None,                                             │\r\n│                        overflow=None,                                            │\r\n│                        no_wrap=False,                                            │\r\n│                        highlight=None,                                           │\r\n│                        markup=None,                                              │\r\n│                        height=None                                               │\r\n│                    )                                                             │\r\n│            quiet = False                                                         │\r\n│           record = False                                                         │\r\n│         safe_box = True                                                          │\r\n│             size = ConsoleDimensions(width=102, height=51)                       │\r\n│        soft_wrap = False                                                         │\r\n│           stderr = False                                                         │\r\n│            style = None                                                          │\r\n│         tab_size = 8                                                             │\r\n│            width = 102                                                           │\r\n╰──────────────────────────────────────────────────────────────────────────────────╯\r\n╭─── <class 'rich._windows.WindowsConsoleFeatures'> ────╮\r\n│ Windows features available.                           │\r\n│                                                       │\r\n│ ╭───────────────────────────────────────────────────╮ │\r\n│ │ WindowsConsoleFeatures(vt=False, truecolor=False) │ │\r\n│ ╰───────────────────────────────────────────────────╯ │\r\n│                                                       │\r\n│ truecolor = False                                     │\r\n│        vt = False                                     │\r\n╰───────────────────────────────────────────────────────╯\r\n╭────── Environment Variables ───────╮\r\n│ {                                  │\r\n│     'TERM': 'xterm-256color',      │\r\n│     'COLORTERM': None,             │\r\n│     'CLICOLOR': None,              │\r\n│     'NO_COLOR': None,              │\r\n│     'TERM_PROGRAM': None,          │\r\n│     'COLUMNS': None,               │\r\n│     'LINES': None,                 │\r\n│     'JUPYTER_COLUMNS': None,       │\r\n│     'JUPYTER_LINES': None,         │\r\n│     'JPY_PARENT_PID': None,        │\r\n│     'VSCODE_VERBOSE_LOGGING': None │\r\n│ }                                  │\r\n╰────────────────────────────────────╯\r\nplatform=\"Linux\"\r\n```\r\n\r\n```shell\r\n$ pip freeze | grep rich\r\nrich==13.4.2\r\n```\r\n\r\n</details>\r\n",
          "type": "issue"
        },
        {
          "author": "github-actions",
          "body": "Thank you for your issue. Give us a little time to review it.\n\nPS. You might want to check the [FAQ](https://github.com/textualize/rich/blob/master/FAQ.md) if you haven't done so already.\n\nThis is an automated reply, generated by [FAQtory](https://github.com/willmcgugan/faqtory)",
          "created_at": "2023-07-02T10:46:49Z",
          "type": "comment"
        },
        {
          "author": "github-actions",
          "body": "I hope we solved your problem.\n\nIf you like using Rich, you might also enjoy [Textual](https://textual.textualize.io)",
          "created_at": "2024-08-26T15:14:34Z",
          "type": "comment"
        }
      ]
    },
    {
      "repository": "Textualize/rich",
      "issue_number": 3021,
      "issue_title": "<html> tag is in wrong spot in template used by export_html()",
      "issue_url": "https://github.com/Textualize/rich/issues/3021",
      "closed_at": "2023-08-17T10:26:31Z",
      "merged_prs": [
        {
          "pr_number": 3043,
          "pr_title": "Fix the HTML export template",
          "pr_url": "https://github.com/Textualize/rich/pull/3043",
          "merged_at": "2023-07-29T15:47:32Z",
          "base_commit": {
            "sha": "8a616de8e25db3c93abaaa220c493d80878de69d",
            "ref": "master"
          }
        }
      ],
      "discussion": [
        {
          "author": "1j01",
          "body": "The `CONSOLE_HTML_FORMAT` template has `<html>` after `<head>`.\r\n`<html>` should surround `<head>` to be valid.",
          "type": "issue"
        },
        {
          "author": "github-actions",
          "body": "We found the following entry in the [FAQ](https://github.com/textualize/textual/blob/main/FAQ.md) which you may find helpful:\n\n\n- [Why do some key combinations never make it to my app?](https://github.com/textualize/textual/blob/main/FAQ.md#why-do-some-key-combinations-never-make-it-to-my-app)\n\nFeel free to close this issue if you found an answer in the FAQ. Otherwise, please give us a little time to review.\n\nThis is an automated reply, generated by [FAQtory](https://github.com/willmcgugan/faqtory)",
          "created_at": "2023-07-01T02:09:06Z",
          "type": "comment"
        },
        {
          "author": "davep",
          "body": "Did you perhaps intend this to be a Rich issue? `export_html` and `CONSOLE_HTML_FORMAT` are part of [Rich](https://github.com/Textualize/rich).",
          "created_at": "2023-07-01T07:04:34Z",
          "type": "comment"
        },
        {
          "author": "github-actions",
          "body": "Thank you for your issue. Give us a little time to review it.\n\nPS. You might want to check the [FAQ](https://github.com/textualize/rich/blob/master/FAQ.md) if you haven't done so already.\n\nThis is an automated reply, generated by [FAQtory](https://github.com/willmcgugan/faqtory)",
          "created_at": "2023-07-03T15:56:43Z",
          "type": "comment"
        },
        {
          "author": "rodrigogiraoserrao",
          "body": "@davep did you forget to close this after the PR above was merged?",
          "created_at": "2023-08-17T10:22:25Z",
          "type": "comment"
        },
        {
          "author": "davep",
          "body": "I didn't merge the PR; I wasn't even aware it had been merged.",
          "created_at": "2023-08-17T10:24:07Z",
          "type": "comment"
        },
        {
          "author": "github-actions",
          "body": "I hope we solved your problem.\n\nIf you like using Rich, you might also enjoy [Textual](https://textual.textualize.io)",
          "created_at": "2023-08-17T10:26:43Z",
          "type": "comment"
        }
      ]
    },
    {
      "repository": "Textualize/rich",
      "issue_number": 3013,
      "issue_title": "rich.pretty.install does not work for IPython",
      "issue_url": "https://github.com/Textualize/rich/issues/3013",
      "closed_at": "2023-07-29T16:05:40Z",
      "merged_prs": [
        {
          "pr_number": 3065,
          "pr_title": "Fix iPython breakage",
          "pr_url": "https://github.com/Textualize/rich/pull/3065",
          "merged_at": "2023-07-29T16:05:39Z",
          "base_commit": {
            "sha": "236e8e8dc3d82a7c7dd286675b59e111af8136ba",
            "ref": "master"
          }
        }
      ],
      "discussion": [
        {
          "author": "zhengyu-yang",
          "body": "Version:\r\n```\r\nPython 3.8.13\r\nIPython 8.12.2\r\n```\r\n\r\nIt seems that `get_ipython` is not in globals when executed in `pretty.py`, causing the rich text formatter not being installed. It is actually in `globals()['__builtins__']`.  I suggest just use `try` to replace this check. The problem happens here: https://github.com/Textualize/rich/blob/8c7449f987a5c423a162aacdf969d647e6085918/rich/pretty.py#L214\r\n\r\nThe fix is:\r\n```python\r\n  try:\r\n      ip = get_ipython()  # type: ignore[name-defined]\r\n      from IPython.core.formatters import BaseFormatter\r\n\r\n      class RichFormatter(BaseFormatter):  # type: ignore[misc]\r\n          pprint: bool = True\r\n\r\n          def __call__(self, value: Any) -> Any:\r\n              if self.pprint:\r\n                  return _ipy_display_hook(\r\n                      value,\r\n                      console=get_console(),\r\n                      overflow=overflow,\r\n                      indent_guides=indent_guides,\r\n                      max_length=max_length,\r\n                      max_string=max_string,\r\n                      max_depth=max_depth,\r\n                      expand_all=expand_all,\r\n                  )\r\n              else:\r\n                  return repr(value)\r\n\r\n      # replace plain text formatter with rich formatter\r\n      rich_formatter = RichFormatter()\r\n      ip.display_formatter.formatters[\"text/plain\"] = rich_formatter\r\n  except NameError:\r\n      sys.displayhook = display_hook\r\n\r\n```",
          "type": "issue"
        },
        {
          "author": "github-actions",
          "body": "Thank you for your issue. Give us a little time to review it.\n\nPS. You might want to check the [FAQ](https://github.com/textualize/rich/blob/master/FAQ.md) if you haven't done so already.\n\nThis is an automated reply, generated by [FAQtory](https://github.com/willmcgugan/faqtory)",
          "created_at": "2023-07-01T01:54:43Z",
          "type": "comment"
        },
        {
          "author": "github-actions",
          "body": "I hope we solved your problem.\n\nIf you like using Rich, you might also enjoy [Textual](https://textual.textualize.io)",
          "created_at": "2023-07-29T16:05:50Z",
          "type": "comment"
        }
      ]
    },
    {
      "repository": "Textualize/rich",
      "issue_number": 2987,
      "issue_title": "[BUG] Escape vs trailing backslash",
      "issue_url": "https://github.com/Textualize/rich/issues/2987",
      "closed_at": "2023-07-29T08:50:16Z",
      "merged_prs": [
        {
          "pr_number": 3063,
          "pr_title": "Fix escaping trailing backslash",
          "pr_url": "https://github.com/Textualize/rich/pull/3063",
          "merged_at": "2023-07-29T08:50:15Z",
          "base_commit": {
            "sha": "368e8ad77c95a6bef8f9d332039091d1417296bc",
            "ref": "master"
          }
        }
      ],
      "discussion": [
        {
          "author": "kfsone",
          "body": "- [☑️ ] I've checked [docs](https://rich.readthedocs.io/en/latest/introduction.html) and [closed issues](https://github.com/Textualize/rich/issues?q=is%3Aissue+is%3Aclosed) for possible solutions.\r\n- [☑️ ] I can't find my issue in the [FAQ](https://github.com/Textualize/rich/blob/master/FAQ.md).\r\n\r\n**Description**\r\nUsing escape to print something with a trailing slash does not escape the trailing slash:\r\n\r\n```\r\nfrom rich import print; from rich.markup import escape\r\nvalue = \"C:\\\\\"; print(value)\r\nrich.print(f\"[red]{value}[/red]\")  # <-- [ gets escaped\r\nrich.print(f\"[red]{escape(value)}[/red]\")  # <-- [ still gets escaped\r\n```\r\noutputs\r\n```\r\nC:\\\r\nC:[/red]\r\nC:[/red]\r\n```\r\n\r\n**Possible solution**\r\n\r\n```\r\n# Previous character is NOT a slash: (?<![\\\\])\r\n# some number of escaped slashes: (?:[\\\\][\\\\])*\r\n# followed by a lone slash at end-of-string: [\\\\]$\r\nIn [40]: _odd_trailing_escape_re = r'(?<![\\\\])(?:[\\\\][\\\\])*[\\\\]$'\r\n    ...: def escape(text: str, trailing_slash_check = re.compile(_odd_trailing_escape_re, flags=re.S).search) -> str:\r\n    ...:\r\n    ...:   if text.endswith('\\\\') and trailing_slash_check(text):\r\n    ...:     text += '\\\\'\r\n    ...:   return text\r\n    ...:\r\n\r\nIn [41]: escape(\"C:\\\\\")\r\nOut[41]: 'C:\\\\\\\\'\r\n\r\nIn [42]: escape(\"C:\\\\\\\\\")\r\nOut[42]: 'C:\\\\\\\\'\r\n\r\nIn [43]: escape(\"C:\\\\\\\\\\\\\")\r\nOut[43]: 'C:\\\\\\\\\\\\\\\\'```\r\n\r\n**Platform**\r\nUsing Rich in a terminal:\r\n\r\n```\r\nWin|PS> python -m rich.diagnose ; pip freeze | sls rich\r\n╭───────────────────────── <class 'rich.console.Console'> ─────────────────────────╮\r\n│ A high level console interface.                                                  │\r\n│                                                                                  │\r\n│ ╭──────────────────────────────────────────────────────────────────────────────╮ │\r\n│ │ <console width=118 ColorSystem.TRUECOLOR>                                    │ │\r\n│ ╰──────────────────────────────────────────────────────────────────────────────╯ │\r\n│                                                                                  │\r\n│     color_system = 'truecolor'                                                   │\r\n│         encoding = 'utf-8'                                                       │\r\n│             file = <_io.TextIOWrapper name='<stdout>' mode='w' encoding='utf-8'> │\r\n│           height = 30                                                            │\r\n│    is_alt_screen = False                                                         │\r\n│ is_dumb_terminal = False                                                         │\r\n│   is_interactive = True                                                          │\r\n│       is_jupyter = False                                                         │\r\n│      is_terminal = True                                                          │\r\n│   legacy_windows = False                                                         │\r\n│         no_color = False                                                         │\r\n│          options = ConsoleOptions(                                               │\r\n│                        size=ConsoleDimensions(width=118, height=30),             │\r\n│                        legacy_windows=False,                                     │\r\n│                        min_width=1,                                              │\r\n│                        max_width=118,                                            │\r\n│                        is_terminal=True,                                         │\r\n│                        encoding='utf-8',                                         │\r\n│                        max_height=30,                                            │\r\n│                        justify=None,                                             │\r\n│                        overflow=None,                                            │\r\n│                        no_wrap=False,                                            │\r\n│                        highlight=None,                                           │\r\n│                        markup=None,                                              │\r\n│                        height=None                                               │\r\n│                    )                                                             │\r\n│            quiet = False                                                         │\r\n│           record = False                                                         │\r\n│         safe_box = True                                                          │\r\n│             size = ConsoleDimensions(width=118, height=30)                       │\r\n│        soft_wrap = False                                                         │\r\n│           stderr = False                                                         │\r\n│            style = None                                                          │\r\n│         tab_size = 8                                                             │\r\n│            width = 118                                                           │\r\n╰──────────────────────────────────────────────────────────────────────────────────╯\r\n╭── <class 'rich._windows.WindowsConsoleFeatures'> ───╮\r\n│ Windows features available.                         │\r\n│                                                     │\r\n│ ╭─────────────────────────────────────────────────╮ │\r\n│ │ WindowsConsoleFeatures(vt=True, truecolor=True) │ │\r\n│ ╰─────────────────────────────────────────────────╯ │\r\n│                                                     │\r\n│ truecolor = True                                    │\r\n│        vt = True                                    │\r\n╰─────────────────────────────────────────────────────╯\r\n╭────── Environment Variables ───────╮\r\n│ {                                  │\r\n│     'TERM': None,                  │\r\n│     'COLORTERM': None,             │\r\n│     'CLICOLOR': None,              │\r\n│     'NO_COLOR': None,              │\r\n│     'TERM_PROGRAM': None,          │\r\n│     'COLUMNS': None,               │\r\n│     'LINES': None,                 │\r\n│     'JUPYTER_COLUMNS': None,       │\r\n│     'JUPYTER_LINES': None,         │\r\n│     'JPY_PARENT_PID': None,        │\r\n│     'VSCODE_VERBOSE_LOGGING': None │\r\n│ }                                  │\r\n╰────────────────────────────────────╯\r\nplatform=\"Windows\"\r\n\r\nrich @ file:///home/conda/feedstock_root/build_artifacts/rich-split_1685565049610/work/dist\r\n```\r\n</details>\r\n",
          "type": "issue"
        },
        {
          "author": "github-actions",
          "body": "Thank you for your issue. Give us a little time to review it.\n\nPS. You might want to check the [FAQ](https://github.com/textualize/rich/blob/master/FAQ.md) if you haven't done so already.\n\nThis is an automated reply, generated by [FAQtory](https://github.com/willmcgugan/faqtory)",
          "created_at": "2023-06-02T19:24:42Z",
          "type": "comment"
        },
        {
          "author": "github-actions",
          "body": "I hope we solved your problem.\n\nIf you like using Rich, you might also enjoy [Textual](https://textual.textualize.io)",
          "created_at": "2023-07-29T08:50:26Z",
          "type": "comment"
        }
      ]
    },
    {
      "repository": "Textualize/rich",
      "issue_number": 2942,
      "issue_title": "[BUG] Style.clear_meta_and_links should reset hash",
      "issue_url": "https://github.com/Textualize/rich/issues/2942",
      "closed_at": "2024-07-01T12:43:03Z",
      "merged_prs": [
        {
          "pr_number": 2943,
          "pr_title": "Clear hashed cache when clearing meta.",
          "pr_url": "https://github.com/Textualize/rich/pull/2943",
          "merged_at": "2024-07-01T12:43:02Z",
          "base_commit": {
            "sha": "610fd75c433c3dfcd9c296e8b91363979127b9fa",
            "ref": "master"
          }
        }
      ],
      "discussion": [
        {
          "author": "rodrigogiraoserrao",
          "body": "The hash of a `Style` instance depends on `_meta` and `_link`:\r\n\r\nhttps://github.com/Textualize/rich/blob/6d30ad0f30028210124c149811cbbe2b183711f9/rich/style.py#L432-L445\r\n\r\nSo, when the link and meta are cleared with the method `Style.clear_meta_and_links`, the cached hash should be cleared:\r\n\r\nhttps://github.com/Textualize/rich/blob/6d30ad0f30028210124c149811cbbe2b183711f9/rich/style.py#L664-L668",
          "type": "issue"
        },
        {
          "author": "github-actions",
          "body": "Thank you for your issue. Give us a little time to review it.\n\nPS. You might want to check the [FAQ](https://github.com/textualize/rich/blob/master/FAQ.md) if you haven't done so already.\n\nThis is an automated reply, generated by [FAQtory](https://github.com/willmcgugan/faqtory)",
          "created_at": "2023-04-28T10:43:06Z",
          "type": "comment"
        },
        {
          "author": "github-actions",
          "body": "I hope we solved your problem.\n\nIf you like using Rich, you might also enjoy [Textual](https://textual.textualize.io)",
          "created_at": "2024-07-01T12:43:13Z",
          "type": "comment"
        }
      ]
    },
    {
      "repository": "Textualize/rich",
      "issue_number": 2875,
      "issue_title": "[BUG] Class of default value may change behavior of repr auto generation",
      "issue_url": "https://github.com/Textualize/rich/issues/2875",
      "closed_at": "2023-07-29T15:50:02Z",
      "merged_prs": [
        {
          "pr_number": 3006,
          "pr_title": "Fixed issue with custom classes (fixes #2875)",
          "pr_url": "https://github.com/Textualize/rich/pull/3006",
          "merged_at": "2023-07-29T15:50:01Z",
          "base_commit": {
            "sha": "0c8bb032ad3b54a32fdb8a43f5ab457c8cd6dcb1",
            "ref": "master"
          }
        }
      ],
      "discussion": [
        {
          "author": "FlxB2",
          "body": "- [x] I've checked [docs](https://rich.readthedocs.io/en/latest/introduction.html) and [closed issues](https://github.com/Textualize/rich/issues?q=is%3Aissue+is%3Aclosed) for possible solutions.\r\n- [x] I can't find my issue in the [FAQ](https://github.com/Textualize/rich/blob/master/FAQ.md).\r\n\r\n**Describe the bug**\r\n\r\nThanks for developing rich! I noticed that when automatically generating `__rich_repr__`, parameters are compared to inspects `Parameter.empty` via `==`. For various reasons I use a class which overwrites equality when comparing to `Parameter.empty` and therefore breaks the automatically generated representation.\r\n\r\nHere is a minimal working example based on the examples provided in the docs:\r\n```python\r\nimport rich\r\nfrom rich.pretty import pprint\r\nfrom inspect import Parameter\r\n\r\nclass StupidClass:\r\n    def __init__(self, a):\r\n        self.a = a\r\n\r\n    def __eq__(self, other) -> bool:\r\n        if other is Parameter.empty:\r\n            return True\r\n        try:\r\n            return self.a == other.a\r\n        except Exception:\r\n            return False\r\n    \r\n    def __ne__(self, other: object) -> bool:\r\n        return not self.__eq__(other)\r\n\r\nclass NotStupid:\r\n    pass\r\n\r\n@rich.repr.auto\r\nclass Bird:\r\n    def __init__(self, name, eats, fly=True, another=StupidClass(2), extinct=NotStupid()):\r\n        self.name = name\r\n        self.eats = eats\r\n        self.fly = fly\r\n        self.another = another\r\n        self.extinct = extinct\r\n\r\npprint(Bird(\"penguin\", [\"fish\"], another=StupidClass(9), extinct=NotStupid()))\r\n```\r\nOutput:\r\n```\r\nBird('penguin', ['fish'], <__main__.StupidClass object at 0x7f8201c35610>, extinct=<__main__.NotStupid object at 0x7f82005ae4f0>)\r\n```\r\n\r\nExpected Output:\r\n```\r\nBird('penguin', ['fish'], another=<__main__.StupidClass object at 0x7fbcc1e44610>, extinct=<__main__.NotStupid object at 0x7fbcc07bd4f0>)\r\n```\r\n\r\n**Possible Fix**\r\n\r\nrepr.py\r\n```diff\r\ndef auto_rich_repr(self: Type[T]) -> Result:\r\n            \"\"\"Auto generate __rich_rep__ from signature of __init__\"\"\"\r\n            try:\r\n                signature = inspect.signature(self.__init__)\r\n                for name, param in signature.parameters.items():\r\n                    if param.kind == param.POSITIONAL_ONLY:\r\n                        yield getattr(self, name)\r\n                    elif param.kind in (\r\n                        param.POSITIONAL_OR_KEYWORD,\r\n                        param.KEYWORD_ONLY,\r\n                    ):\r\n-                        if param.default == param.empty:\r\n+                        if param.default is param.empty:\r\n                            yield getattr(self, param.name)\r\n                        else:\r\n                            yield param.name, getattr(self, param.name), param.default\r\n            except Exception as error:\r\n                raise ReprError(\r\n                    f\"Failed to auto generate __rich_repr__; {error}\"\r\n                ) from None\r\n```\r\n\r\n**Platform**\r\n<details>\r\n<summary>Click to expand</summary>\r\n\r\nWhat platform (Win/Linux/Mac) are you running on? Ubuntu\r\n What terminal software are you using? Xfce Terminal Emulator\r\n\r\nI may ask you to copy and paste the output of the following commands. It may save some time if you do it now.\r\n\r\nIf you're using Rich in a terminal:\r\n\r\n```\r\npython -m rich diagnose\r\n                                                                                   Rich features                                                                                    \r\n                                                                                                                                                                                    \r\n    Colors    ✓ 4-bit color                 ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄ \r\n              ✓ 8-bit color                 ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄ \r\n              ✓ Truecolor (16.7 million)    ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄ \r\n              ✓ Dumb terminals              ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄ \r\n              ✓ Automatic color conversion  ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄ \r\n                                                                                                                                                                                    \r\n    Styles    All ansi styles: bold, dim, italic, underline, strikethrough, reverse, and even blink.                                                                                \r\n                                                                                                                                                                                    \r\n     Text     Word wrap text. Justify left, center, right or full.                                                                                                                  \r\n                                                                                                                                                                                    \r\n              Lorem ipsum dolor sit amet, consectetur  Lorem ipsum dolor sit amet, consectetur   Lorem ipsum dolor sit amet, consectetur Lorem ipsum dolor  sit  amet,  consectetur \r\n              adipiscing elit. Quisque in metus sed     adipiscing elit. Quisque in metus sed      adipiscing elit. Quisque in metus sed adipiscing  elit.  Quisque  in  metus  sed \r\n              sapien ultricies pretium a at justo.       sapien ultricies pretium a at justo.       sapien ultricies pretium a at justo. sapien  ultricies  pretium  a  at   justo. \r\n              Maecenas luctus velit et auctor maximus. Maecenas luctus velit et auctor maximus. Maecenas luctus velit et auctor maximus. Maecenas luctus velit et auctor maximus.   \r\n                                                                                                                                                                                    \r\n    Asian     🇨🇳  该库支持中文，日文和韩文文本！                                                                                                                                    \r\n   language   🇯🇵  ライブラリは中国語、日本語、韓国語のテキストをサポートしています                                                                                                  \r\n   support    🇰🇷  이 라이브러리는 중국어, 일본어 및 한국어 텍스트를 지원합니다                                                                                                      \r\n                                                                                                                                                                                    \r\n    Markup    Rich supports a simple bbcode-like markup for color, style, and emoji! 👍 🍎 🐜 🐻 🥖 🚌                                                                              \r\n                                                                                                                                                                                    \r\n    Tables     Date           Title                                 Production Budget       Box Office                                                                              \r\n              ─────────────────────────────────────────────────────────────────────────────────────────                                                                             \r\n               Dec 20, 2019   Star Wars: The Rise of Skywalker           $275,000,000     $375,126,118                                                                              \r\n               May 25, 2018   Solo: A Star Wars Story                    $275,000,000     $393,151,347                                                                              \r\n               Dec 15, 2017   Star Wars Ep. VIII: The Last Jedi          $262,000,000   $1,332,539,889                                                                              \r\n               May 19, 1999   Star Wars Ep. I: The phantom Menace        $115,000,000   $1,027,044,677                                                                              \r\n                                                                                                                                                                                    \r\n    Syntax       1 def iter_last(values: Iterable[T]) -> Iterable[Tuple[bool, T]]:                {                                                                                 \r\n highlighting    2 │   \"\"\"Iterate and generate a tuple with a flag for last value.\"\"\"             │   'foo': [3.1427, ('Paul Atreides', 'Vladimir Harkonnen', 'Thufir Hawat')],     \r\n      &          3 │   iter_values = iter(values)                                                 │   'atomic': (False, True, None)                                                 \r\n    pretty       4 │   try:                                                                       }                                                                                 \r\n   printing      5 │   │   previous_value = next(iter_values)                                                                                                                       \r\n                 6 │   except StopIteration:                                                                                                                                        \r\n                 7 │   │   return                                                                                                                                                   \r\n                 8 │   for value in iter_values:                                                                                                                                    \r\n                 9 │   │   yield False, previous_value                                                                                                                              \r\n                10 │   │   previous_value = value                                                                                                                                   \r\n                11 │   yield True, previous_value                                                                                                                                   \r\n                                                                                                                                                                                    \r\n   Markdown   # Markdown                                                                          ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓ \r\n                                                                                                  ┃                                   Markdown                                    ┃ \r\n              Supports much of the *markdown* __syntax__!                                         ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛ \r\n                                                                                                                                                                                    \r\n              - Headers                                                                           Supports much of the markdown syntax!                                             \r\n              - Basic formatting: **bold**, *italic*, `code`                                                                                                                        \r\n              - Block quotes                                                                       • Headers                                                                        \r\n              - Lists, and more...                                                                 • Basic formatting: bold, italic, code                                           \r\n                                                                                                   • Block quotes                                                                   \r\n                                                                                                   • Lists, and more...                                                             \r\n                                                                                                                                                                                    \r\n    +more!    Progress bars, columns, styled logging handler, tracebacks, etc...                                                                                                    \r\n                                                                                                                                                                                    \r\nrendered in 123.0ms (cold cache)\r\nrendered in 50.0ms (warm cache)\r\n                                            ╭────────────────────────────── Thanks for trying out Rich! ───────────────────────────────╮                                            \r\n                                            │                                                                                          │                                            \r\n                                            │  We hope you enjoy using Rich!               Textualize https://github.com/textualize    │                                            \r\n                                            │                                                                                          │                                            \r\n                                            │  Rich is maintained with ❤ by Textualize.io     Twitter https://twitter.com/willmcgugan  │                                            \r\n                                            │                                                                                          │                                            \r\n                                            │  - Will McGugan                                                                          │                                            \r\n                                            │                                                                                          │                                            \r\n                                            ╰──────────────────────────────────────────────────────────────────────────────────────────╯ \r\n\r\n\r\npip freeze | grep rich\r\nrich==13.3.2\r\n```\r\n</details>\r\n",
          "type": "issue"
        },
        {
          "author": "github-actions",
          "body": "Thank you for your issue. Give us a little time to review it.\n\nPS. You might want to check the [FAQ](https://github.com/textualize/rich/blob/master/FAQ.md) if you haven't done so already.\n\nThis is an automated reply, generated by [FAQtory](https://github.com/willmcgugan/faqtory)",
          "created_at": "2023-03-12T15:00:53Z",
          "type": "comment"
        },
        {
          "author": "github-actions",
          "body": "I hope we solved your problem.\n\nIf you like using Rich, you might also enjoy [Textual](https://textual.textualize.io)",
          "created_at": "2023-07-29T15:50:12Z",
          "type": "comment"
        }
      ]
    },
    {
      "repository": "Textualize/rich",
      "issue_number": 2863,
      "issue_title": "[BUG] `rich.pretty` is not showing `maxlen` for `collections.deque`",
      "issue_url": "https://github.com/Textualize/rich/issues/2863",
      "closed_at": "2024-07-01T10:52:22Z",
      "merged_prs": [
        {
          "pr_number": 2864,
          "pr_title": "fix: fix `pretty_repr` for `deque`",
          "pr_url": "https://github.com/Textualize/rich/pull/2864",
          "merged_at": "2024-07-01T10:52:21Z",
          "base_commit": {
            "sha": "2eb5cbfd46b41617a4b3a906955bcda17d88fb75",
            "ref": "master"
          }
        }
      ],
      "discussion": [
        {
          "author": "XuehaiPan",
          "body": "- [X] I've checked [docs](https://rich.readthedocs.io/en/latest/introduction.html) and [closed issues](https://github.com/Textualize/rich/issues?q=is%3Aissue+is%3Aclosed) for possible solutions.\r\n- [X] I can't find my issue in the [FAQ](https://github.com/Textualize/rich/blob/master/FAQ.md).\r\n\r\n**Describe the bug**\r\n\r\nEdit this with a clear and concise description of what the bug.\r\n\r\nProvide a minimal code example that demonstrates the issue if you can. If the issue is visual in nature, consider posting a screenshot.\r\n\r\nI add `rich.pretty` in my `ipython` startup script and overwrite `builtins.print` with `rich.print`. It work as expected when I print a large collection object. However, it not works well with `collections.deque`. `rich.print` and `builtins.print` are showing non-whitespace differences.\r\n\r\n```python\r\nIn [1]: import rich\r\n   ...: import rich.pretty\r\n   ...: from rich import print\r\n   ...: \r\n   ...: rich.pretty.install(indent_guides=True)\r\n\r\nIn [2]: print\r\nOut[2]: <function rich.print(*objects: Any, sep: str = ' ', end: str = '\\n', file: Optional[IO[str]] = None, flush: bool = False) -> None>\r\n\r\nIn [3]: from collections import deque\r\n\r\nIn [4]: import builtins\r\n\r\nIn [5]: d = deque([1, 2, 3])\r\n\r\nIn [6]: print(d)\r\ndeque([1, 2, 3])\r\n\r\nIn [7]: builtins.print(d)\r\ndeque([1, 2, 3])\r\n\r\nIn [8]: d\r\nOut[8]: deque([1, 2, 3])\r\n\r\nIn [9]: repr(d)\r\nOut[9]: 'deque([1, 2, 3])'\r\n\r\nIn [10]: d = deque([1, 2, 3], maxlen=5)\r\n\r\nIn [11]: print(d)\r\ndeque([1, 2, 3])\r\n\r\nIn [12]: builtins.print(d)\r\ndeque([1, 2, 3], maxlen=5)\r\n\r\nIn [13]: d\r\nOut[13]: deque([1, 2, 3])\r\n\r\nIn [14]: repr(d)\r\nOut[14]: 'deque([1, 2, 3], maxlen=5)'\r\n```\r\n\r\n**Platform**\r\n<details>\r\n<summary>Click to expand</summary>\r\n\r\nWhat platform (Win/Linux/Mac) are you running on? What terminal software are you using?\r\n\r\nI may ask you to copy and paste the output of the following commands. It may save some time if you do it now.\r\n\r\nIf you're using Rich in a terminal:\r\n\r\n```\r\npython -m rich.diagnose\r\npip freeze | grep rich\r\n```\r\n\r\n```text\r\n╭───────────────────────── <class 'rich.console.Console'> ─────────────────────────╮\r\n│ A high level console interface.                                                  │\r\n│                                                                                  │\r\n│ ╭──────────────────────────────────────────────────────────────────────────────╮ │\r\n│ │ <console width=221 ColorSystem.TRUECOLOR>                                    │ │\r\n│ ╰──────────────────────────────────────────────────────────────────────────────╯ │\r\n│                                                                                  │\r\n│     color_system = 'truecolor'                                                   │\r\n│         encoding = 'utf-8'                                                       │\r\n│             file = <_io.TextIOWrapper name='<stdout>' mode='w' encoding='utf-8'> │\r\n│           height = 67                                                            │\r\n│    is_alt_screen = False                                                         │\r\n│ is_dumb_terminal = False                                                         │\r\n│   is_interactive = True                                                          │\r\n│       is_jupyter = False                                                         │\r\n│      is_terminal = True                                                          │\r\n│   legacy_windows = False                                                         │\r\n│         no_color = False                                                         │\r\n│          options = ConsoleOptions(                                               │\r\n│                        size=ConsoleDimensions(width=221, height=67),             │\r\n│                        legacy_windows=False,                                     │\r\n│                        min_width=1,                                              │\r\n│                        max_width=221,                                            │\r\n│                        is_terminal=True,                                         │\r\n│                        encoding='utf-8',                                         │\r\n│                        max_height=67,                                            │\r\n│                        justify=None,                                             │\r\n│                        overflow=None,                                            │\r\n│                        no_wrap=False,                                            │\r\n│                        highlight=None,                                           │\r\n│                        markup=None,                                              │\r\n│                        height=None                                               │\r\n│                    )                                                             │\r\n│            quiet = False                                                         │\r\n│           record = False                                                         │\r\n│         safe_box = True                                                          │\r\n│             size = ConsoleDimensions(width=221, height=67)                       │\r\n│        soft_wrap = False                                                         │\r\n│           stderr = False                                                         │\r\n│            style = None                                                          │\r\n│         tab_size = 8                                                             │\r\n│            width = 221                                                           │\r\n╰──────────────────────────────────────────────────────────────────────────────────╯\r\n╭─── <class 'rich._windows.WindowsConsoleFeatures'> ────╮\r\n│ Windows features available.                           │\r\n│                                                       │\r\n│ ╭───────────────────────────────────────────────────╮ │\r\n│ │ WindowsConsoleFeatures(vt=False, truecolor=False) │ │\r\n│ ╰───────────────────────────────────────────────────╯ │\r\n│                                                       │\r\n│ truecolor = False                                     │\r\n│        vt = False                                     │\r\n╰───────────────────────────────────────────────────────╯\r\n╭────── Environment Variables ───────╮\r\n│ {                                  │\r\n│     'TERM': 'xterm-256color',      │\r\n│     'COLORTERM': 'truecolor',      │\r\n│     'CLICOLOR': None,              │\r\n│     'NO_COLOR': None,              │\r\n│     'TERM_PROGRAM': 'vscode',      │\r\n│     'COLUMNS': None,               │\r\n│     'LINES': None,                 │\r\n│     'JUPYTER_COLUMNS': None,       │\r\n│     'JUPYTER_LINES': None,         │\r\n│     'JPY_PARENT_PID': None,        │\r\n│     'VSCODE_VERBOSE_LOGGING': None │\r\n│ }                                  │\r\n╰────────────────────────────────────╯\r\nplatform=\"Linux\"\r\n\r\nrich==13.3.1\r\n```\r\n\r\n</details>\r\n",
          "type": "issue"
        },
        {
          "author": "github-actions",
          "body": "Thank you for your issue. Give us a little time to review it.\n\nPS. You might want to check the [FAQ](https://github.com/textualize/rich/blob/master/FAQ.md) if you haven't done so already.\n\nThis is an automated reply, generated by [FAQtory](https://github.com/willmcgugan/faqtory)",
          "created_at": "2023-03-07T09:43:40Z",
          "type": "comment"
        },
        {
          "author": "github-actions",
          "body": "I hope we solved your problem.\n\nIf you like using Rich, you might also enjoy [Textual](https://textual.textualize.io)",
          "created_at": "2024-07-01T10:52:31Z",
          "type": "comment"
        }
      ]
    },
    {
      "repository": "Textualize/rich",
      "issue_number": 2859,
      "issue_title": "[BUG] COLORTERM in combination with FORCE_COLOR does not work anymore",
      "issue_url": "https://github.com/Textualize/rich/issues/2859",
      "closed_at": "2023-04-12T16:48:20Z",
      "merged_prs": [
        {
          "pr_number": 2923,
          "pr_title": "fix for is_terminal",
          "pr_url": "https://github.com/Textualize/rich/pull/2923",
          "merged_at": "2023-04-12T16:48:19Z",
          "base_commit": {
            "sha": "076e0d208eb0b4e74cd8639e11a558b9319bd799",
            "ref": "master"
          }
        }
      ],
      "discussion": [
        {
          "author": "ThunderKey",
          "body": "- [x] I've checked [docs](https://rich.readthedocs.io/en/latest/introduction.html) and [closed issues](https://github.com/Textualize/rich/issues?q=is%3Aissue+is%3Aclosed) for possible solutions.\r\n- [x] I can't find my issue in the [FAQ](https://github.com/Textualize/rich/blob/master/FAQ.md).\r\n\r\n**Describe the bug**\r\n\r\nCommit 1ebf82300fdf4960fd9a04afc60fdecee7ab50da broke the combination of \"FORCE_COLOR\" and \"COLORTERM\" taken from the environment variables.\r\n\r\nI've created a simple test:\r\n\r\n```python\r\nimport io\r\n\r\nfrom rich.console import Console\r\n\r\n\r\ndef test_force_color():\r\n    console = Console(file=io.StringIO(), _environ={\r\n        \"FORCE_COLOR\": \"1\",\r\n        \"COLORTERM\": \"truecolor\",\r\n    })\r\n    assert console.is_terminal\r\n    assert console.color_system == \"truecolor\"\r\n```\r\n\r\nIf `master` or 1ebf82300fdf4960fd9a04afc60fdecee7ab50da is checked out it fails, because the `color_system` is `None`. If the commit before (b89d0362e8ebcb18902f0f0a206879f1829b5c0b) is checked out the test succeeds.\r\n\r\nI guess that the order of when `FORCE_COLOR` and `COLORTERM` are interpreted got changed.\r\n\r\n**Platform**\r\n<details>\r\n<summary>Click to expand</summary>\r\n\r\n* What platform (Win/Linux/Mac) are you running on? Linux (Manjaro)\r\n* What terminal software are you using? kitty\r\n\r\n</details>\r\n",
          "type": "issue"
        },
        {
          "author": "github-actions",
          "body": "Thank you for your issue. Give us a little time to review it.\n\nPS. You might want to check the [FAQ](https://github.com/textualize/rich/blob/master/FAQ.md) if you haven't done so already.\n\nThis is an automated reply, generated by [FAQtory](https://github.com/willmcgugan/faqtory)",
          "created_at": "2023-03-06T10:13:00Z",
          "type": "comment"
        },
        {
          "author": "github-actions",
          "body": "I hope we solved your problem.\n\nIf you like using Rich, you might also enjoy [Textual](https://textual.textualize.io)",
          "created_at": "2023-04-12T16:48:33Z",
          "type": "comment"
        },
        {
          "author": "ThunderKey",
          "body": "Perfect, thanks! it works like a charm now :)",
          "created_at": "2023-04-14T06:37:40Z",
          "type": "comment"
        }
      ]
    },
    {
      "repository": "Textualize/rich",
      "issue_number": 2832,
      "issue_title": "[BUG] HTML Report Indention",
      "issue_url": "https://github.com/Textualize/rich/issues/2832",
      "closed_at": "2023-03-04T10:13:44Z",
      "merged_prs": [
        {
          "pr_number": 2844,
          "pr_title": "fix pre output",
          "pr_url": "https://github.com/Textualize/rich/pull/2844",
          "merged_at": "2023-03-04T10:13:43Z",
          "base_commit": {
            "sha": "0b845b39d9815c3219bf3b855a45b01e0b7c29f6",
            "ref": "master"
          }
        }
      ],
      "discussion": [
        {
          "author": "mgnisia",
          "body": "- [x] I've checked [docs](https://rich.readthedocs.io/en/latest/introduction.html) and [closed issues](https://github.com/Textualize/rich/issues?q=is%3Aissue+is%3Aclosed) for possible solutions.\r\n- [x] I can't find my issue in the [FAQ](https://github.com/Textualize/rich/blob/master/FAQ.md).\r\n\r\n**Describe the bug**\r\n\r\nWith this code\r\n\r\n```\r\nfrom rich.console import Console\r\nconsole = Console(record=True, highlight=False)\r\nconsole.rule(\"test\")\r\nconsole.save_html('test.html', clear=False)\r\n```\r\n\r\nyou get the following HTML Report:\r\n![image](https://user-images.githubusercontent.com/30232445/221411051-42e19f6d-c3b0-4ba1-b597-02ac4c07c2c7.png)\r\n\r\n\r\nwhat I would expect:\r\n\r\n![image](https://user-images.githubusercontent.com/30232445/221411082-30cbb44a-cf12-481e-84d9-d8fd732623fa.png)\r\n\r\n\r\nGit Diff:\r\n\r\n```\r\ndiff --git a/test.html b/test.html\r\nindex 97b6275..4e9e795 100644\r\n--- a/test.html\r\n+++ b/test.html\r\n@@ -12,7 +12,7 @@ body {\r\n <html>\r\n <body>\r\n     <pre style=\"font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\r\n-        <code><span class=\"r1\">─────────────────────────────────────────────────────────────────── </span>test<span class=\"r1\"> ────────────────────────────────────────────────────────────────────</span>\r\n+<code><span class=\"r1\">─────────────────────────────────────────────────────────────────── </span>test<span class=\"r1\"> ────────────────────────────────────────────────────────────────────</span>\r\n </code>\r\n     </pre>\r\n </body>\r\n```\r\n\r\n**Platform**\r\n<details>\r\n<summary>Click to expand</summary>\r\n\r\nWhat platform (Win/Linux/Mac) are you running on? \r\n\r\nMac with 13.0 (22A380)\r\n\r\nWhat terminal software are you using?\r\n\r\nIf you're using Rich in a terminal:\r\n\r\n```\r\npython -m rich.diagnose\r\npip freeze | grep rich\r\n```\r\n\r\n```Output\r\n❯ poetry run python3 -m rich.diagnose\r\npip freeze | grep rich\r\n╭───────────────────────── <class 'rich.console.Console'> ─────────────────────────╮\r\n│ A high level console interface.                                                  │\r\n│                                                                                  │\r\n│ ╭──────────────────────────────────────────────────────────────────────────────╮ │\r\n│ │ <console width=141 ColorSystem.TRUECOLOR>                                    │ │\r\n│ ╰──────────────────────────────────────────────────────────────────────────────╯ │\r\n│                                                                                  │\r\n│     color_system = 'truecolor'                                                   │\r\n│         encoding = 'utf-8'                                                       │\r\n│             file = <_io.TextIOWrapper name='<stdout>' mode='w' encoding='utf-8'> │\r\n│           height = 18                                                            │\r\n│    is_alt_screen = False                                                         │\r\n│ is_dumb_terminal = False                                                         │\r\n│   is_interactive = True                                                          │\r\n│       is_jupyter = False                                                         │\r\n│      is_terminal = True                                                          │\r\n│   legacy_windows = False                                                         │\r\n│         no_color = False                                                         │\r\n│          options = ConsoleOptions(                                               │\r\n│                        size=ConsoleDimensions(width=141, height=18),             │\r\n│                        legacy_windows=False,                                     │\r\n│                        min_width=1,                                              │\r\n│                        max_width=141,                                            │\r\n│                        is_terminal=True,                                         │\r\n│                        encoding='utf-8',                                         │\r\n│                        max_height=18,                                            │\r\n│                        justify=None,                                             │\r\n│                        overflow=None,                                            │\r\n│                        no_wrap=False,                                            │\r\n│                        highlight=None,                                           │\r\n│                        markup=None,                                              │\r\n│                        height=None                                               │\r\n│                    )                                                             │\r\n│            quiet = False                                                         │\r\n│           record = False                                                         │\r\n│         safe_box = True                                                          │\r\n│             size = ConsoleDimensions(width=141, height=18)                       │\r\n│        soft_wrap = False                                                         │\r\n│           stderr = False                                                         │\r\n│            style = None                                                          │\r\n│         tab_size = 8                                                             │\r\n│            width = 141                                                           │\r\n╰──────────────────────────────────────────────────────────────────────────────────╯\r\n╭─── <class 'rich._windows.WindowsConsoleFeatures'> ────╮\r\n│ Windows features available.                           │\r\n│                                                       │\r\n│ ╭───────────────────────────────────────────────────╮ │\r\n│ │ WindowsConsoleFeatures(vt=False, truecolor=False) │ │\r\n│ ╰───────────────────────────────────────────────────╯ │\r\n│                                                       │\r\n│ truecolor = False                                     │\r\n│        vt = False                                     │\r\n╰───────────────────────────────────────────────────────╯\r\n╭────── Environment Variables ───────╮\r\n│ {                                  │\r\n│     'TERM': 'xterm-256color',      │\r\n│     'COLORTERM': 'truecolor',      │\r\n│     'CLICOLOR': None,              │\r\n│     'NO_COLOR': None,              │\r\n│     'TERM_PROGRAM': 'vscode',      │\r\n│     'COLUMNS': None,               │\r\n│     'LINES': None,                 │\r\n│     'JUPYTER_COLUMNS': None,       │\r\n│     'JUPYTER_LINES': None,         │\r\n│     'JPY_PARENT_PID': None,        │\r\n│     'VSCODE_VERBOSE_LOGGING': None │\r\n│ }                                  │\r\n╰────────────────────────────────────╯\r\nplatform=\"Darwin\"\r\nrich==13.3.1\r\n```\r\n\r\n</details>\r\n",
          "type": "issue"
        },
        {
          "author": "github-actions",
          "body": "Thank you for your issue. Give us a little time to review it.\n\nPS. You might want to check the [FAQ](https://github.com/textualize/rich/blob/master/FAQ.md) if you haven't done so already.\n\nThis is an automated reply, generated by [FAQtory](https://github.com/willmcgugan/faqtory)",
          "created_at": "2023-02-26T12:39:30Z",
          "type": "comment"
        },
        {
          "author": "github-actions",
          "body": "I hope we solved your problem.\n\nIf you like using Rich, you might also enjoy [Textual](https://textual.textualize.io)",
          "created_at": "2023-03-04T10:13:54Z",
          "type": "comment"
        }
      ]
    },
    {
      "repository": "Textualize/rich",
      "issue_number": 2825,
      "issue_title": "[REQUEST] Tweak default colors for RichHandler",
      "issue_url": "https://github.com/Textualize/rich/issues/2825",
      "closed_at": "2024-07-01T10:43:33Z",
      "merged_prs": [
        {
          "pr_number": 2858,
          "pr_title": "Update \"logging.level.warning\" to yellow\"",
          "pr_url": "https://github.com/Textualize/rich/pull/2858",
          "merged_at": "2024-07-01T10:43:32Z",
          "base_commit": {
            "sha": "2eb5cbfd46b41617a4b3a906955bcda17d88fb75",
            "ref": "master"
          }
        }
      ],
      "discussion": [
        {
          "author": "alexprengere",
          "body": "Hello, first of all, thank you for rich! I use it in pretty much all my projects.\r\n\r\nI have a _very minor_ suggestion regarding the _default_ colors for logging levels.\r\nI know we can customize them using [themes](https://rich.readthedocs.io/en/latest/style.html#style-themes) (and I already do!).\r\nI use mostly info/warning/error levels for logging, and depending on the terminal used, _warnings and errors_ render almost identically.\r\n\r\nWhen googling \"Python colored logs\", the top solutions (in my case) use yellow-ish for warnings and red for errors.\r\nGranted, many of the top results use `coloredlogs`, but in any case I see:\r\n\r\n* [stack overflow top answer](https://stackoverflow.com/questions/384076/how-can-i-color-python-logging-output)\r\n* [PyPI coloredlogs](https://pypi.org/project/coloredlogs/)\r\n* [a blog post](https://alexandra-zaharia.github.io/posts/make-your-own-custom-color-formatter-with-python-logging/)\r\n* [another blog post](https://betterstack.com/community/questions/how-to-color-python-logging-output/)\r\n* [PyPI colorlog](https://pypi.org/project/colorlog/)\r\n\r\nSo I was wondering if you would be willing to tweak the default `'logging.level.warning'` to something closer to yellow, to be more in line with this, and give a bit more distinction to warnings and errors.\r\nAnyway, I am perfectly happy with customization through themes!\r\n",
          "type": "issue"
        },
        {
          "author": "github-actions",
          "body": "We found the following entry in the [FAQ](https://github.com/textualize/rich/blob/master/FAQ.md) which you may find helpful:\n\n\n- [How do I log a renderable?](https://github.com/textualize/rich/blob/master/FAQ.md#how-do-i-log-a-renderable)\n\nFeel free to close this issue if you found an answer in the FAQ. Otherwise, please give us a little time to review.\n\nThis is an automated reply, generated by [FAQtory](https://github.com/willmcgugan/faqtory)",
          "created_at": "2023-02-22T14:39:45Z",
          "type": "comment"
        },
        {
          "author": "willmcgugan",
          "body": "Sure. I would accept a PR for that...",
          "created_at": "2023-03-04T10:58:34Z",
          "type": "comment"
        },
        {
          "author": "github-actions",
          "body": "I hope we solved your problem.\n\nIf you like using Rich, you might also enjoy [Textual](https://textual.textualize.io)",
          "created_at": "2024-07-01T10:43:42Z",
          "type": "comment"
        }
      ]
    },
    {
      "repository": "Textualize/rich",
      "issue_number": 2821,
      "issue_title": "[BUG] rich crashes ipython when printing a traceback after due to `StopIteration` error",
      "issue_url": "https://github.com/Textualize/rich/issues/2821",
      "closed_at": "2023-03-04T14:35:33Z",
      "merged_prs": [
        {
          "pr_number": 2850,
          "pr_title": "Empty traceback frames",
          "pr_url": "https://github.com/Textualize/rich/pull/2850",
          "merged_at": "2023-03-04T14:35:31Z",
          "base_commit": {
            "sha": "89cd92f4d5f190092ddd634ecec16f13a4a3ee91",
            "ref": "master"
          }
        }
      ],
      "discussion": [
        {
          "author": "scottstanie",
          "body": "- [x] I've checked [docs](https://rich.readthedocs.io/en/latest/introduction.html) and [closed issues](https://github.com/Textualize/rich/issues?q=is%3Aissue+is%3Aclosed) for possible solutions.\r\n- [x] I can't find my issue in the [FAQ](https://github.com/Textualize/rich/blob/master/FAQ.md).\r\n\r\n**Describe the bug**\r\n\r\nUsing `%load_ext rich` in python, printing a traceback will sometimes cause ipython to crash with an error `RuntimeError: generator raised StopIteration`\r\n\r\nIt's possible this is related to #2781, and maybe others with strange crashes/hanging?\r\n\r\n\r\n**Example code**\r\n(sorry i couldn't find one without pydantic, this was just the quickest/smallest thing related to what I was really doing)\r\n\r\nsaved into `testrich.py`\r\n```python\r\nfrom pydantic import BaseModel\r\n\r\n\r\nclass Dummy(BaseModel):\r\n    def __init__(self, **data):\r\n        super().__init__(**data)\r\n        self.new_attribute = \"this should error due to pydantic\"\r\n```\r\n\r\nthen in ipython\r\n\r\n```python-console\r\n(mapping) staniewi:data$ ipython\r\nPython 3.10.9 | packaged by conda-forge | (main, Feb  2 2023, 20:26:08) [Clang 14.0.6 ]\r\nType 'copyright', 'credits' or 'license' for more information\r\nIPython 8.4.0 -- An enhanced Interactive Python. Type '?' for help.\r\n\r\nIn [1]: import testrich\r\n\r\nIn [2]: testrich.Dummy()\r\n---------------------------------------------------------------------------\r\nValueError                                Traceback (most recent call last)\r\nInput In [2], in <cell line: 1>()\r\n----> 1 testrich.Dummy()\r\n\r\nFile ~/repos/sweets/testrich.py:7, in Dummy.__init__(self, **data)\r\n      5 def __init__(self, **data):\r\n      6     super().__init__(**data)\r\n----> 7     self.new_attribute = \"this should error due to pydantic\"\r\n\r\nFile ~/miniconda3/envs/mapping/lib/python3.10/site-packages/pydantic/main.py:358, in pydantic.main.BaseModel.__setattr__()\r\n\r\nValueError: \"Dummy\" object has no field \"new_attribute\"\r\n```\r\nthat's whats supposed to be printed. Here's with rich:\r\n\r\n```python-console\r\nIn [3]: %load_ext rich\r\n\r\nIn [4]: testrich.Dummy()\r\nTraceback (most recent call last):\r\n  File \"/Users/staniewi/miniconda3/envs/mapping/lib/python3.10/site-packages/IPython/core/interactiveshell.py\", line 3398, in run_code\r\n    exec(code_obj, self.user_global_ns, self.user_ns)\r\n  File \"<ipython-input-4-ecd4ba56830a>\", line 1, in <cell line: 1>\r\n    testrich.Dummy()\r\n  File \"/Users/staniewi/repos/sweets/testrich.py\", line 7, in __init__\r\n    self.new_attribute = \"this should error due to pydantic\"\r\n  File \"pydantic/main.py\", line 358, in pydantic.main.BaseModel.__setattr__\r\nValueError: \"Dummy\" object has no field \"new_attribute\"\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"/Users/staniewi/miniconda3/envs/mapping/lib/python3.10/site-packages/rich/syntax.py\", line 497, in tokens_to_spans\r\n    _token_type, token = next(tokens)\r\nStopIteration\r\n\r\nThe above exception was the direct cause of the following exception:\r\n\r\nTraceback (most recent call last):\r\n  File \"/Users/staniewi/miniconda3/envs/mapping/lib/python3.10/site-packages/IPython/core/interactiveshell.py\", line 3338, in run_ast_nodes\r\n    if await self.run_code(code, result, async_=asy):\r\n  File \"/Users/staniewi/miniconda3/envs/mapping/lib/python3.10/site-packages/IPython/core/interactiveshell.py\", line 3420, in run_code\r\n    self.showtraceback(running_compiled_code=True)\r\n  File \"/Users/staniewi/miniconda3/envs/mapping/lib/python3.10/site-packages/rich/traceback.py\", line 130, in ipy_show_traceback\r\n    default_showtraceback(*args, **kwargs)\r\n  File \"/Users/staniewi/miniconda3/envs/mapping/lib/python3.10/site-packages/IPython/core/interactiveshell.py\", line 2004, in showtraceback\r\n    self._showtraceback(etype, value, stb)\r\n  File \"/Users/staniewi/miniconda3/envs/mapping/lib/python3.10/site-packages/rich/traceback.py\", line 151, in ipy_display_traceback\r\n    excepthook(exc_tuple[0], exc_tuple[1], tb)\r\n  File \"/Users/staniewi/miniconda3/envs/mapping/lib/python3.10/site-packages/rich/traceback.py\", line 102, in excepthook\r\n    traceback_console.print(\r\n  File \"/Users/staniewi/miniconda3/envs/mapping/lib/python3.10/site-packages/rich/console.py\", line 1694, in print\r\n    extend(render(renderable, render_options))\r\n  File \"/Users/staniewi/miniconda3/envs/mapping/lib/python3.10/site-packages/rich/console.py\", line 1330, in render\r\n    yield from self.render(render_output, _options)\r\n  File \"/Users/staniewi/miniconda3/envs/mapping/lib/python3.10/site-packages/rich/console.py\", line 1326, in render\r\n    for render_output in iter_render:\r\n  File \"/Users/staniewi/miniconda3/envs/mapping/lib/python3.10/site-packages/rich/constrain.py\", line 29, in __rich_console__\r\n    yield from console.render(self.renderable, child_options)\r\n  File \"/Users/staniewi/miniconda3/envs/mapping/lib/python3.10/site-packages/rich/console.py\", line 1326, in render\r\n    for render_output in iter_render:\r\n  File \"/Users/staniewi/miniconda3/envs/mapping/lib/python3.10/site-packages/rich/panel.py\", line 220, in __rich_console__\r\n    lines = console.render_lines(renderable, child_options, style=style)\r\n  File \"/Users/staniewi/miniconda3/envs/mapping/lib/python3.10/site-packages/rich/console.py\", line 1366, in render_lines\r\n    lines = list(\r\n  File \"/Users/staniewi/miniconda3/envs/mapping/lib/python3.10/site-packages/rich/segment.py\", line 292, in split_and_crop_lines\r\n    for segment in segments:\r\n  File \"/Users/staniewi/miniconda3/envs/mapping/lib/python3.10/site-packages/rich/console.py\", line 1326, in render\r\n    for render_output in iter_render:\r\n  File \"/Users/staniewi/miniconda3/envs/mapping/lib/python3.10/site-packages/rich/padding.py\", line 97, in __rich_console__\r\n    lines = console.render_lines(\r\n  File \"/Users/staniewi/miniconda3/envs/mapping/lib/python3.10/site-packages/rich/console.py\", line 1366, in render_lines\r\n    lines = list(\r\n  File \"/Users/staniewi/miniconda3/envs/mapping/lib/python3.10/site-packages/rich/segment.py\", line 292, in split_and_crop_lines\r\n    for segment in segments:\r\n  File \"/Users/staniewi/miniconda3/envs/mapping/lib/python3.10/site-packages/rich/console.py\", line 1330, in render\r\n    yield from self.render(render_output, _options)\r\n  File \"/Users/staniewi/miniconda3/envs/mapping/lib/python3.10/site-packages/rich/console.py\", line 1326, in render\r\n    for render_output in iter_render:\r\n  File \"/Users/staniewi/miniconda3/envs/mapping/lib/python3.10/site-packages/rich/syntax.py\", line 609, in __rich_console__\r\n    segments = Segments(self._get_syntax(console, options))\r\n  File \"/Users/staniewi/miniconda3/envs/mapping/lib/python3.10/site-packages/rich/segment.py\", line 668, in __init__\r\n    self.segments = list(segments)\r\n  File \"/Users/staniewi/miniconda3/envs/mapping/lib/python3.10/site-packages/rich/syntax.py\", line 637, in _get_syntax\r\n    text = self.highlight(processed_code, self.line_range)\r\n  File \"/Users/staniewi/miniconda3/envs/mapping/lib/python3.10/site-packages/rich/syntax.py\", line 509, in highlight\r\n    text.append_tokens(tokens_to_spans())\r\n  File \"/Users/staniewi/miniconda3/envs/mapping/lib/python3.10/site-packages/rich/text.py\", line 995, in append_tokens\r\n    for content, style in tokens:\r\nRuntimeError: generator raised StopIteration\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"/Users/staniewi/miniconda3/envs/mapping/lib/python3.10/site-packages/rich/syntax.py\", line 497, in tokens_to_spans\r\n    _token_type, token = next(tokens)\r\nStopIteration\r\n\r\nThe above exception was the direct cause of the following exception:\r\n\r\nTraceback (most recent call last):\r\n  File \"/Users/staniewi/miniconda3/envs/mapping/lib/python3.10/site-packages/IPython/core/interactiveshell.py\", line 2936, in _run_cell\r\n    return runner(coro)\r\n  File \"/Users/staniewi/miniconda3/envs/mapping/lib/python3.10/site-packages/IPython/core/async_helpers.py\", line 129, in _pseudo_sync_runner\r\n    coro.send(None)\r\n  File \"/Users/staniewi/miniconda3/envs/mapping/lib/python3.10/site-packages/IPython/core/interactiveshell.py\", line 3135, in run_cell_async\r\n    has_raised = await self.run_ast_nodes(code_ast.body, cell_name,\r\n  File \"/Users/staniewi/miniconda3/envs/mapping/lib/python3.10/site-packages/IPython/core/interactiveshell.py\", line 3357, in run_ast_nodes\r\n    self.showtraceback()\r\n  File \"/Users/staniewi/miniconda3/envs/mapping/lib/python3.10/site-packages/rich/traceback.py\", line 130, in ipy_show_traceback\r\n    default_showtraceback(*args, **kwargs)\r\n  File \"/Users/staniewi/miniconda3/envs/mapping/lib/python3.10/site-packages/IPython/core/interactiveshell.py\", line 2004, in showtraceback\r\n    self._showtraceback(etype, value, stb)\r\n  File \"/Users/staniewi/miniconda3/envs/mapping/lib/python3.10/site-packages/rich/traceback.py\", line 151, in ipy_display_traceback\r\n    excepthook(exc_tuple[0], exc_tuple[1], tb)\r\n  File \"/Users/staniewi/miniconda3/envs/mapping/lib/python3.10/site-packages/rich/traceback.py\", line 102, in excepthook\r\n    traceback_console.print(\r\n  File \"/Users/staniewi/miniconda3/envs/mapping/lib/python3.10/site-packages/rich/console.py\", line 1694, in print\r\n    extend(render(renderable, render_options))\r\n  File \"/Users/staniewi/miniconda3/envs/mapping/lib/python3.10/site-packages/rich/console.py\", line 1330, in render\r\n    yield from self.render(render_output, _options)\r\n  File \"/Users/staniewi/miniconda3/envs/mapping/lib/python3.10/site-packages/rich/console.py\", line 1326, in render\r\n    for render_output in iter_render:\r\n  File \"/Users/staniewi/miniconda3/envs/mapping/lib/python3.10/site-packages/rich/constrain.py\", line 29, in __rich_console__\r\n    yield from console.render(self.renderable, child_options)\r\n  File \"/Users/staniewi/miniconda3/envs/mapping/lib/python3.10/site-packages/rich/console.py\", line 1326, in render\r\n    for render_output in iter_render:\r\n  File \"/Users/staniewi/miniconda3/envs/mapping/lib/python3.10/site-packages/rich/panel.py\", line 220, in __rich_console__\r\n    lines = console.render_lines(renderable, child_options, style=style)\r\n  File \"/Users/staniewi/miniconda3/envs/mapping/lib/python3.10/site-packages/rich/console.py\", line 1366, in render_lines\r\n    lines = list(\r\n  File \"/Users/staniewi/miniconda3/envs/mapping/lib/python3.10/site-packages/rich/segment.py\", line 292, in split_and_crop_lines\r\n    for segment in segments:\r\n  File \"/Users/staniewi/miniconda3/envs/mapping/lib/python3.10/site-packages/rich/console.py\", line 1326, in render\r\n    for render_output in iter_render:\r\n  File \"/Users/staniewi/miniconda3/envs/mapping/lib/python3.10/site-packages/rich/padding.py\", line 97, in __rich_console__\r\n    lines = console.render_lines(\r\n  File \"/Users/staniewi/miniconda3/envs/mapping/lib/python3.10/site-packages/rich/console.py\", line 1366, in render_lines\r\n    lines = list(\r\n  File \"/Users/staniewi/miniconda3/envs/mapping/lib/python3.10/site-packages/rich/segment.py\", line 292, in split_and_crop_lines\r\n    for segment in segments:\r\n  File \"/Users/staniewi/miniconda3/envs/mapping/lib/python3.10/site-packages/rich/console.py\", line 1330, in render\r\n    yield from self.render(render_output, _options)\r\n  File \"/Users/staniewi/miniconda3/envs/mapping/lib/python3.10/site-packages/rich/console.py\", line 1326, in render\r\n    for render_output in iter_render:\r\n  File \"/Users/staniewi/miniconda3/envs/mapping/lib/python3.10/site-packages/rich/syntax.py\", line 609, in __rich_console__\r\n    segments = Segments(self._get_syntax(console, options))\r\n  File \"/Users/staniewi/miniconda3/envs/mapping/lib/python3.10/site-packages/rich/segment.py\", line 668, in __init__\r\n    self.segments = list(segments)\r\n  File \"/Users/staniewi/miniconda3/envs/mapping/lib/python3.10/site-packages/rich/syntax.py\", line 637, in _get_syntax\r\n    text = self.highlight(processed_code, self.line_range)\r\n  File \"/Users/staniewi/miniconda3/envs/mapping/lib/python3.10/site-packages/rich/syntax.py\", line 509, in highlight\r\n    text.append_tokens(tokens_to_spans())\r\n  File \"/Users/staniewi/miniconda3/envs/mapping/lib/python3.10/site-packages/rich/text.py\", line 995, in append_tokens\r\n    for content, style in tokens:\r\nRuntimeError: generator raised StopIteration\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"/Users/staniewi/miniconda3/envs/mapping/lib/python3.10/site-packages/rich/syntax.py\", line 497, in tokens_to_spans\r\n    _token_type, token = next(tokens)\r\nStopIteration\r\n\r\nThe above exception was the direct cause of the following exception:\r\n\r\nTraceback (most recent call last):\r\n  File \"/Users/staniewi/miniconda3/envs/mapping/bin/ipython\", line 11, in <module>\r\n    sys.exit(start_ipython())\r\n  File \"/Users/staniewi/miniconda3/envs/mapping/lib/python3.10/site-packages/IPython/__init__.py\", line 124, in start_ipython\r\n    return launch_new_instance(argv=argv, **kwargs)\r\n  File \"/Users/staniewi/miniconda3/envs/mapping/lib/python3.10/site-packages/traitlets/config/application.py\", line 976, in launch_instance\r\n    app.start()\r\n  File \"/Users/staniewi/miniconda3/envs/mapping/lib/python3.10/site-packages/IPython/terminal/ipapp.py\", line 318, in start\r\n    self.shell.mainloop()\r\n  File \"/Users/staniewi/miniconda3/envs/mapping/lib/python3.10/site-packages/IPython/terminal/interactiveshell.py\", line 680, in mainloop\r\n    self.interact()\r\n  File \"/Users/staniewi/miniconda3/envs/mapping/lib/python3.10/site-packages/IPython/terminal/interactiveshell.py\", line 673, in interact\r\n    self.run_cell(code, store_history=True)\r\n  File \"/Users/staniewi/miniconda3/envs/mapping/lib/python3.10/site-packages/IPython/core/interactiveshell.py\", line 2881, in run_cell\r\n    result = self._run_cell(\r\n  File \"/Users/staniewi/miniconda3/envs/mapping/lib/python3.10/site-packages/IPython/core/interactiveshell.py\", line 2943, in _run_cell\r\n    self.showtraceback(running_compiled_code=True)\r\n  File \"/Users/staniewi/miniconda3/envs/mapping/lib/python3.10/site-packages/rich/traceback.py\", line 130, in ipy_show_traceback\r\n    default_showtraceback(*args, **kwargs)\r\n  File \"/Users/staniewi/miniconda3/envs/mapping/lib/python3.10/site-packages/IPython/core/interactiveshell.py\", line 2004, in showtraceback\r\n    self._showtraceback(etype, value, stb)\r\n  File \"/Users/staniewi/miniconda3/envs/mapping/lib/python3.10/site-packages/rich/traceback.py\", line 151, in ipy_display_traceback\r\n    excepthook(exc_tuple[0], exc_tuple[1], tb)\r\n  File \"/Users/staniewi/miniconda3/envs/mapping/lib/python3.10/site-packages/rich/traceback.py\", line 102, in excepthook\r\n    traceback_console.print(\r\n  File \"/Users/staniewi/miniconda3/envs/mapping/lib/python3.10/site-packages/rich/console.py\", line 1694, in print\r\n    extend(render(renderable, render_options))\r\n  File \"/Users/staniewi/miniconda3/envs/mapping/lib/python3.10/site-packages/rich/console.py\", line 1330, in render\r\n    yield from self.render(render_output, _options)\r\n  File \"/Users/staniewi/miniconda3/envs/mapping/lib/python3.10/site-packages/rich/console.py\", line 1326, in render\r\n    for render_output in iter_render:\r\n  File \"/Users/staniewi/miniconda3/envs/mapping/lib/python3.10/site-packages/rich/constrain.py\", line 29, in __rich_console__\r\n    yield from console.render(self.renderable, child_options)\r\n  File \"/Users/staniewi/miniconda3/envs/mapping/lib/python3.10/site-packages/rich/console.py\", line 1326, in render\r\n    for render_output in iter_render:\r\n  File \"/Users/staniewi/miniconda3/envs/mapping/lib/python3.10/site-packages/rich/panel.py\", line 220, in __rich_console__\r\n    lines = console.render_lines(renderable, child_options, style=style)\r\n  File \"/Users/staniewi/miniconda3/envs/mapping/lib/python3.10/site-packages/rich/console.py\", line 1366, in render_lines\r\n    lines = list(\r\n  File \"/Users/staniewi/miniconda3/envs/mapping/lib/python3.10/site-packages/rich/segment.py\", line 292, in split_and_crop_lines\r\n    for segment in segments:\r\n  File \"/Users/staniewi/miniconda3/envs/mapping/lib/python3.10/site-packages/rich/console.py\", line 1326, in render\r\n    for render_output in iter_render:\r\n  File \"/Users/staniewi/miniconda3/envs/mapping/lib/python3.10/site-packages/rich/padding.py\", line 97, in __rich_console__\r\n    lines = console.render_lines(\r\n  File \"/Users/staniewi/miniconda3/envs/mapping/lib/python3.10/site-packages/rich/console.py\", line 1366, in render_lines\r\n    lines = list(\r\n  File \"/Users/staniewi/miniconda3/envs/mapping/lib/python3.10/site-packages/rich/segment.py\", line 292, in split_and_crop_lines\r\n    for segment in segments:\r\n  File \"/Users/staniewi/miniconda3/envs/mapping/lib/python3.10/site-packages/rich/console.py\", line 1330, in render\r\n    yield from self.render(render_output, _options)\r\n  File \"/Users/staniewi/miniconda3/envs/mapping/lib/python3.10/site-packages/rich/console.py\", line 1326, in render\r\n    for render_output in iter_render:\r\n  File \"/Users/staniewi/miniconda3/envs/mapping/lib/python3.10/site-packages/rich/syntax.py\", line 609, in __rich_console__\r\n    segments = Segments(self._get_syntax(console, options))\r\n  File \"/Users/staniewi/miniconda3/envs/mapping/lib/python3.10/site-packages/rich/segment.py\", line 668, in __init__\r\n    self.segments = list(segments)\r\n  File \"/Users/staniewi/miniconda3/envs/mapping/lib/python3.10/site-packages/rich/syntax.py\", line 637, in _get_syntax\r\n    text = self.highlight(processed_code, self.line_range)\r\n  File \"/Users/staniewi/miniconda3/envs/mapping/lib/python3.10/site-packages/rich/syntax.py\", line 509, in highlight\r\n    text.append_tokens(tokens_to_spans())\r\n  File \"/Users/staniewi/miniconda3/envs/mapping/lib/python3.10/site-packages/rich/text.py\", line 995, in append_tokens\r\n    for content, style in tokens:\r\nRuntimeError: generator raised StopIteration\r\n\r\nIf you suspect this is an IPython 8.4.0 bug, please report it at:\r\n    https://github.com/ipython/ipython/issues\r\nor send an email to the mailing list at ipython-dev@python.org\r\n\r\nYou can print a more detailed traceback right now with \"%tb\", or use \"%debug\"\r\nto interactively debug it.\r\n\r\nExtra-detailed tracebacks for bug-reporting purposes can be enabled via:\r\n    %config Application.verbose_crash=True\r\n\r\n(mapping) staniewi:data$\r\n```\r\n\r\n**Platform**\r\n<details>\r\n<summary>Click to expand</summary>\r\n\r\nWhat platform (Win/Linux/Mac) are you running on? What terminal software are you using?\r\nMac arm M1\r\n\r\n```python\r\n\r\n(mapping) staniewi:data$ ipython\r\nPython 3.10.9 | packaged by conda-forge | (main, Feb  2 2023, 20:26:08) [Clang 14.0.6 ]\r\nType 'copyright', 'credits' or 'license' for more information\r\nIPython 8.4.0 -- An enhanced Interactive Python. Type '?' for help.\r\n\r\nIn [1]: from rich.diagnose import report\r\n   ...: report()\r\n╭───────────────────────── <class 'rich.console.Console'> ─────────────────────────╮\r\n│ A high level console interface.                                                  │\r\n│                                                                                  │\r\n│ ╭──────────────────────────────────────────────────────────────────────────────╮ │\r\n│ │ <console width=242 ColorSystem.TRUECOLOR>                                    │ │\r\n│ ╰──────────────────────────────────────────────────────────────────────────────╯ │\r\n│                                                                                  │\r\n│     color_system = 'truecolor'                                                   │\r\n│         encoding = 'utf-8'                                                       │\r\n│             file = <_io.TextIOWrapper name='<stdout>' mode='w' encoding='utf-8'> │\r\n│           height = 59                                                            │\r\n│    is_alt_screen = False                                                         │\r\n│ is_dumb_terminal = False                                                         │\r\n│   is_interactive = True                                                          │\r\n│       is_jupyter = False                                                         │\r\n│      is_terminal = True                                                          │\r\n│   legacy_windows = False                                                         │\r\n│         no_color = False                                                         │\r\n│          options = ConsoleOptions(                                               │\r\n│                        size=ConsoleDimensions(width=242, height=59),             │\r\n│                        legacy_windows=False,                                     │\r\n│                        min_width=1,                                              │\r\n│                        max_width=242,                                            │\r\n│                        is_terminal=True,                                         │\r\n│                        encoding='utf-8',                                         │\r\n│                        max_height=59,                                            │\r\n│                        justify=None,                                             │\r\n│                        overflow=None,                                            │\r\n│                        no_wrap=False,                                            │\r\n│                        highlight=None,                                           │\r\n│                        markup=None,                                              │\r\n│                        height=None                                               │\r\n│                    )                                                             │\r\n│            quiet = False                                                         │\r\n│           record = False                                                         │\r\n│         safe_box = True                                                          │\r\n│             size = ConsoleDimensions(width=242, height=59)                       │\r\n│        soft_wrap = False                                                         │\r\n│           stderr = False                                                         │\r\n│            style = None                                                          │\r\n│         tab_size = 8                                                             │\r\n│            width = 242                                                           │\r\n╰──────────────────────────────────────────────────────────────────────────────────╯\r\n╭─── <class 'rich._windows.WindowsConsoleFeatures'> ────╮\r\n│ Windows features available.                           │\r\n│                                                       │\r\n│ ╭───────────────────────────────────────────────────╮ │\r\n│ │ WindowsConsoleFeatures(vt=False, truecolor=False) │ │\r\n│ ╰───────────────────────────────────────────────────╯ │\r\n│                                                       │\r\n│ truecolor = False                                     │\r\n│        vt = False                                     │\r\n╰───────────────────────────────────────────────────────╯\r\n╭────── Environment Variables ───────╮\r\n│ {                                  │\r\n│     'TERM': 'xterm-256color',      │\r\n│     'COLORTERM': 'truecolor',      │\r\n│     'CLICOLOR': '1',               │\r\n│     'NO_COLOR': None,              │\r\n│     'TERM_PROGRAM': 'iTerm.app',   │\r\n│     'COLUMNS': None,               │\r\n│     'LINES': None,                 │\r\n│     'JUPYTER_COLUMNS': None,       │\r\n│     'JUPYTER_LINES': None,         │\r\n│     'JPY_PARENT_PID': None,        │\r\n│     'VSCODE_VERBOSE_LOGGING': None │\r\n│ }                                  │\r\n╰────────────────────────────────────╯\r\nplatform=\"Darwin\"\r\n\r\n```\r\n\r\n</details>\r\n",
          "type": "issue"
        },
        {
          "author": "github-actions",
          "body": "We found the following entry in the [FAQ](https://github.com/textualize/rich/blob/master/FAQ.md) which you may find helpful:\n\n\n- [Why does content in square brackets disappear?](https://github.com/textualize/rich/blob/master/FAQ.md#why-does-content-in-square-brackets-disappear)\n\nFeel free to close this issue if you found an answer in the FAQ. Otherwise, please give us a little time to review.\n\nThis is an automated reply, generated by [FAQtory](https://github.com/willmcgugan/faqtory)",
          "created_at": "2023-02-20T00:56:58Z",
          "type": "comment"
        },
        {
          "author": "gerrymanoim",
          "body": "I think this is the same underlying issue as https://github.com/Textualize/rich/issues/2800",
          "created_at": "2023-02-24T16:21:31Z",
          "type": "comment"
        },
        {
          "author": "opqpop",
          "body": "exact same thing is happening to me, what is the suggested fix for this?\r\n\r\nthis is breaking our prod build and we need an urgent fix, please let us know or we'll have to move off rich, thanks\r\n\r\nim using django-rich and here's a stack trace\r\n\r\n```\r\nmark@dev22 ~/d/m/s/d/django (wafewaef)> poetry run ./manage.py test                         19:51:33\r\nFound 10 test(s).\r\nCreating test database for alias 'default'...\r\nSystem check identified no issues (0 silenced).\r\nEEEEEEE..Destroying test database for alias 'default'...\r\nTraceback (most recent call last):\r\n  File \"/home/mark/.cache/pypoetry/virtualenvs/src-flPiXF7G-py3.10/lib/python3.10/site-packages/rich/syntax.py\", line 497, in tokens_to_spans\r\n    _token_type, token = next(tokens)\r\nStopIteration\r\n\r\nThe above exception was the direct cause of the following exception:\r\n\r\nTraceback (most recent call last):\r\n  File \"/home/mark/dev/main/src/dracula/django/./manage.py\", line 22, in <module>\r\n    main()\r\n  File \"/home/mark/dev/main/src/dracula/django/./manage.py\", line 18, in main\r\n    execute_from_command_line(sys.argv)\r\n  File \"/home/mark/.cache/pypoetry/virtualenvs/src-flPiXF7G-py3.10/lib/python3.10/site-packages/django/core/management/__init__.py\", line 446, in execute_from_command_line\r\n    utility.execute()\r\n  File \"/home/mark/.cache/pypoetry/virtualenvs/src-flPiXF7G-py3.10/lib/python3.10/site-packages/django/core/management/__init__.py\", line 440, in execute\r\n    self.fetch_command(subcommand).run_from_argv(self.argv)\r\n  File \"/home/mark/.cache/pypoetry/virtualenvs/src-flPiXF7G-py3.10/lib/python3.10/site-packages/django/core/management/commands/test.py\", line 24, in run_from_argv\r\n    super().run_from_argv(argv)\r\n  File \"/home/mark/.cache/pypoetry/virtualenvs/src-flPiXF7G-py3.10/lib/python3.10/site-packages/django/core/management/base.py\", line 402, in run_from_argv\r\n    self.execute(*args, **cmd_options)\r\n  File \"/home/mark/.cache/pypoetry/virtualenvs/src-flPiXF7G-py3.10/lib/python3.10/site-packages/django/core/management/base.py\", line 448, in execute\r\n    output = self.handle(*args, **options)\r\n  File \"/home/mark/.cache/pypoetry/virtualenvs/src-flPiXF7G-py3.10/lib/python3.10/site-packages/django/core/management/commands/test.py\", line 68, in handle\r\n    failures = test_runner.run_tests(test_labels)\r\n  File \"/home/mark/.cache/pypoetry/virtualenvs/src-flPiXF7G-py3.10/lib/python3.10/site-packages/django/test/runner.py\", line 1057, in run_tests\r\n    result = self.run_suite(suite)\r\n  File \"/home/mark/.cache/pypoetry/virtualenvs/src-flPiXF7G-py3.10/lib/python3.10/site-packages/django/test/runner.py\", line 979, in run_suite\r\n    return runner.run(suite)\r\n  File \"/home/mark/.pyenv/versions/3.10.8/lib/python3.10/unittest/runner.py\", line 184, in run\r\n    test(result)\r\n  File \"/home/mark/.pyenv/versions/3.10.8/lib/python3.10/unittest/suite.py\", line 84, in __call__\r\n    return self.run(*args, **kwds)\r\n  File \"/home/mark/.pyenv/versions/3.10.8/lib/python3.10/unittest/suite.py\", line 122, in run\r\n    test(result)\r\n  File \"/home/mark/.pyenv/versions/3.10.8/lib/python3.10/unittest/case.py\", line 650, in __call__\r\n    return self.run(*args, **kwds)\r\n  File \"/home/mark/.pyenv/versions/3.10.8/lib/python3.10/unittest/case.py\", line 599, in run\r\n    self._feedErrorsToResult(result, outcome.errors)\r\n  File \"/home/mark/.pyenv/versions/3.10.8/lib/python3.10/unittest/case.py\", line 518, in _feedErrorsToResult\r\n    result.addError(test, exc_info)\r\n  File \"/home/mark/.pyenv/versions/3.10.8/lib/python3.10/unittest/result.py\", line 17, in inner\r\n    return method(self, *args, **kw)\r\n  File \"/home/mark/.cache/pypoetry/virtualenvs/src-flPiXF7G-py3.10/lib/python3.10/site-packages/django_rich/test.py\", line 64, in addError\r\n    self.errors.append((test, self._exc_info_to_string(err, test)))\r\n  File \"/home/mark/.cache/pypoetry/virtualenvs/src-flPiXF7G-py3.10/lib/python3.10/site-packages/django_rich/test.py\", line 125, in _exc_info_to_string\r\n    self.console.print(tb_e)\r\n  File \"/home/mark/.cache/pypoetry/virtualenvs/src-flPiXF7G-py3.10/lib/python3.10/site-packages/rich/console.py\", line 1694, in print\r\n    extend(render(renderable, render_options))\r\n  File \"/home/mark/.cache/pypoetry/virtualenvs/src-flPiXF7G-py3.10/lib/python3.10/site-packages/rich/console.py\", line 1330, in render\r\n    yield from self.render(render_output, _options)\r\n  File \"/home/mark/.cache/pypoetry/virtualenvs/src-flPiXF7G-py3.10/lib/python3.10/site-packages/rich/console.py\", line 1326, in render\r\n    for render_output in iter_render:\r\n  File \"/home/mark/.cache/pypoetry/virtualenvs/src-flPiXF7G-py3.10/lib/python3.10/site-packages/rich/constrain.py\", line 29, in __rich_console__\r\n    yield from console.render(self.renderable, child_options)\r\n  File \"/home/mark/.cache/pypoetry/virtualenvs/src-flPiXF7G-py3.10/lib/python3.10/site-packages/rich/console.py\", line 1326, in render\r\n    for render_output in iter_render:\r\n  File \"/home/mark/.cache/pypoetry/virtualenvs/src-flPiXF7G-py3.10/lib/python3.10/site-packages/rich/panel.py\", line 220, in __rich_console__\r\n    lines = console.render_lines(renderable, child_options, style=style)\r\n  File \"/home/mark/.cache/pypoetry/virtualenvs/src-flPiXF7G-py3.10/lib/python3.10/site-packages/rich/console.py\", line 1366, in render_lines\r\n    lines = list(\r\n  File \"/home/mark/.cache/pypoetry/virtualenvs/src-flPiXF7G-py3.10/lib/python3.10/site-packages/rich/segment.py\", line 292, in split_and_crop_lines\r\n    for segment in segments:\r\n  File \"/home/mark/.cache/pypoetry/virtualenvs/src-flPiXF7G-py3.10/lib/python3.10/site-packages/rich/console.py\", line 1326, in render\r\n    for render_output in iter_render:\r\n  File \"/home/mark/.cache/pypoetry/virtualenvs/src-flPiXF7G-py3.10/lib/python3.10/site-packages/rich/padding.py\", line 97, in __rich_console__\r\n    lines = console.render_lines(\r\n  File \"/home/mark/.cache/pypoetry/virtualenvs/src-flPiXF7G-py3.10/lib/python3.10/site-packages/rich/console.py\", line 1366, in render_lines\r\n    lines = list(\r\n  File \"/home/mark/.cache/pypoetry/virtualenvs/src-flPiXF7G-py3.10/lib/python3.10/site-packages/rich/segment.py\", line 292, in split_and_crop_lines\r\n    for segment in segments:\r\n  File \"/home/mark/.cache/pypoetry/virtualenvs/src-flPiXF7G-py3.10/lib/python3.10/site-packages/rich/console.py\", line 1330, in render\r\n    yield from self.render(render_output, _options)\r\n  File \"/home/mark/.cache/pypoetry/virtualenvs/src-flPiXF7G-py3.10/lib/python3.10/site-packages/rich/console.py\", line 1326, in render\r\n    for render_output in iter_render:\r\n  File \"/home/mark/.cache/pypoetry/virtualenvs/src-flPiXF7G-py3.10/lib/python3.10/site-packages/rich/syntax.py\", line 609, in __rich_console__\r\n    segments = Segments(self._get_syntax(console, options))\r\n  File \"/home/mark/.cache/pypoetry/virtualenvs/src-flPiXF7G-py3.10/lib/python3.10/site-packages/rich/segment.py\", line 668, in __init__\r\n    self.segments = list(segments)\r\n  File \"/home/mark/.cache/pypoetry/virtualenvs/src-flPiXF7G-py3.10/lib/python3.10/site-packages/rich/syntax.py\", line 637, in _get_syntax\r\n    text = self.highlight(processed_code, self.line_range)\r\n  File \"/home/mark/.cache/pypoetry/virtualenvs/src-flPiXF7G-py3.10/lib/python3.10/site-packages/rich/syntax.py\", line 509, in highlight\r\n    text.append_tokens(tokens_to_spans())\r\n  File \"/home/mark/.cache/pypoetry/virtualenvs/src-flPiXF7G-py3.10/lib/python3.10/site-packages/rich/text.py\", line 995, in append_tokens\r\n    for content, style in tokens:\r\nRuntimeError: generator raised StopIteration\r\n```",
          "created_at": "2023-02-28T19:53:52Z",
          "type": "comment"
        },
        {
          "author": "github-actions",
          "body": "I hope we solved your problem.\n\nIf you like using Rich, you might also enjoy [Textual](https://textual.textualize.io)",
          "created_at": "2023-03-04T14:35:45Z",
          "type": "comment"
        },
        {
          "author": "opqpop",
          "body": "thanks, confirming it works again on latest version!!",
          "created_at": "2023-03-08T10:17:57Z",
          "type": "comment"
        }
      ]
    },
    {
      "repository": "Textualize/rich",
      "issue_number": 2819,
      "issue_title": "[BUG] List of dataclasses without fields printed as empty list",
      "issue_url": "https://github.com/Textualize/rich/issues/2819",
      "closed_at": "2023-02-19T22:59:40Z",
      "merged_prs": [
        {
          "pr_number": 2820,
          "pr_title": "fix for empty dataclass",
          "pr_url": "https://github.com/Textualize/rich/pull/2820",
          "merged_at": "2023-02-19T22:59:39Z",
          "base_commit": {
            "sha": "b89d0362e8ebcb18902f0f0a206879f1829b5c0b",
            "ref": "master"
          }
        }
      ],
      "discussion": [
        {
          "author": "michprev",
          "body": "- [x] I've checked [docs](https://rich.readthedocs.io/en/latest/introduction.html) and [closed issues](https://github.com/Textualize/rich/issues?q=is%3Aissue+is%3Aclosed) for possible solutions.\r\n- [x] I can't find my issue in the [FAQ](https://github.com/Textualize/rich/blob/master/FAQ.md).\r\n\r\n**Describe the bug**\r\n\r\nWhen printing a list of dataclasses that do not have any field, empty list appears which can be very confusing.\r\n\r\nMinimal example:\r\n\r\n```python\r\nfrom dataclasses import dataclass\r\n\r\nfrom rich.console import Console\r\n\r\n\r\n@dataclass\r\nclass Person:\r\n    name = \"John Doe\"\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    console = Console()\r\n    console.print([Person()])\r\n\r\n```\r\n\r\nWhat I see:\r\n```\r\n[]\r\n```\r\n\r\nMy expectation:\r\n```\r\n[Person()]\r\n```\r\n\r\n**Platform**\r\n<details>\r\n<summary>Click to expand</summary>\r\n\r\nI don't think this is a platform-specific issue.\r\n\r\n```\r\n╭───────────────────────── <class 'rich.console.Console'> ─────────────────────────╮\r\n│ A high level console interface.                                                  │\r\n│                                                                                  │\r\n│ ╭──────────────────────────────────────────────────────────────────────────────╮ │\r\n│ │ <console width=149 None>                                                     │ │\r\n│ ╰──────────────────────────────────────────────────────────────────────────────╯ │\r\n│                                                                                  │\r\n│     color_system = None                                                          │\r\n│         encoding = 'utf-8'                                                       │\r\n│             file = <_io.TextIOWrapper name='<stdout>' mode='w' encoding='utf-8'> │\r\n│           height = 24                                                            │\r\n│    is_alt_screen = False                                                         │\r\n│ is_dumb_terminal = False                                                         │\r\n│   is_interactive = False                                                         │\r\n│       is_jupyter = False                                                         │\r\n│      is_terminal = False                                                         │\r\n│   legacy_windows = False                                                         │\r\n│         no_color = False                                                         │\r\n│          options = ConsoleOptions(                                               │\r\n│                        size=ConsoleDimensions(width=149, height=24),             │\r\n│                        legacy_windows=False,                                     │\r\n│                        min_width=1,                                              │\r\n│                        max_width=149,                                            │\r\n│                        is_terminal=False,                                        │\r\n│                        encoding='utf-8',                                         │\r\n│                        max_height=24,                                            │\r\n│                        justify=None,                                             │\r\n│                        overflow=None,                                            │\r\n│                        no_wrap=False,                                            │\r\n│                        highlight=None,                                           │\r\n│                        markup=None,                                              │\r\n│                        height=None                                               │\r\n│                    )                                                             │\r\n│            quiet = False                                                         │\r\n│           record = False                                                         │\r\n│         safe_box = True                                                          │\r\n│             size = ConsoleDimensions(width=149, height=24)                       │\r\n│        soft_wrap = False                                                         │\r\n│           stderr = False                                                         │\r\n│            style = None                                                          │\r\n│         tab_size = 8                                                             │\r\n│            width = 149                                                           │\r\n╰──────────────────────────────────────────────────────────────────────────────────╯\r\n╭─── <class 'rich._windows.WindowsConsoleFeatures'> ────╮\r\n│ Windows features available.                           │\r\n│                                                       │\r\n│ ╭───────────────────────────────────────────────────╮ │\r\n│ │ WindowsConsoleFeatures(vt=False, truecolor=False) │ │\r\n│ ╰───────────────────────────────────────────────────╯ │\r\n│                                                       │\r\n│ truecolor = False                                     │\r\n│        vt = False                                     │\r\n╰───────────────────────────────────────────────────────╯\r\n╭────── Environment Variables ───────╮\r\n│ {                                  │\r\n│     'TERM': 'xterm-256color',      │\r\n│     'COLORTERM': 'truecolor',      │\r\n│     'CLICOLOR': None,              │\r\n│     'NO_COLOR': None,              │\r\n│     'TERM_PROGRAM': 'vscode',      │\r\n│     'COLUMNS': None,               │\r\n│     'LINES': None,                 │\r\n│     'JUPYTER_COLUMNS': None,       │\r\n│     'JUPYTER_LINES': None,         │\r\n│     'JPY_PARENT_PID': None,        │\r\n│     'VSCODE_VERBOSE_LOGGING': None │\r\n│ }                                  │\r\n╰────────────────────────────────────╯\r\nplatform=\"Linux\"\r\n```\r\n\r\n```\r\nrich==13.3.1\r\nrich-click==1.6.0\r\n```\r\n\r\n</details>\r\n",
          "type": "issue"
        },
        {
          "author": "github-actions",
          "body": "Thank you for your issue. Give us a little time to review it.\n\nPS. You might want to check the [FAQ](https://github.com/textualize/rich/blob/master/FAQ.md) if you haven't done so already.\n\nThis is an automated reply, generated by [FAQtory](https://github.com/willmcgugan/faqtory)",
          "created_at": "2023-02-19T22:41:03Z",
          "type": "comment"
        },
        {
          "author": "github-actions",
          "body": "I hope we solved your problem.\n\nIf you like using Rich, you might also enjoy [Textual](https://textual.textualize.io)",
          "created_at": "2023-02-19T22:59:51Z",
          "type": "comment"
        }
      ]
    },
    {
      "repository": "Textualize/rich",
      "issue_number": 2810,
      "issue_title": "[BUG]: JupyterMixin has different default repr in the console",
      "issue_url": "https://github.com/Textualize/rich/issues/2810",
      "closed_at": "2023-03-04T15:25:30Z",
      "merged_prs": [
        {
          "pr_number": 2851,
          "pr_title": "relax tests for old pygments",
          "pr_url": "https://github.com/Textualize/rich/pull/2851",
          "merged_at": "2023-03-04T15:25:29Z",
          "base_commit": {
            "sha": "e897cd3909b4d501f8f7c8a9bd7ebc69e3d9e5c7",
            "ref": "master"
          }
        }
      ],
      "discussion": [
        {
          "author": "cpcloud",
          "body": "- [x] I've checked [docs](https://rich.readthedocs.io/en/latest/introduction.html) and [closed issues](https://github.com/Textualize/rich/issues?q=is%3Aissue+is%3Aclosed) for possible solutions.\r\n- [x] I can't find my issue in the [FAQ](https://github.com/Textualize/rich/blob/master/FAQ.md).\r\n\r\n**Describe the bug**\r\n\r\nJupyterMixin adds a trailing newline **outside of the notebook**. In this case, the `ipython` console.\r\n\r\nHere's a very small reproducer that illustrates the issue:\r\n\r\n```\r\nIn [42]: import rich.jupyter\r\n    ...: from rich.text import Text\r\n    ...:\r\n    ...:\r\n    ...: class RichJupyterMixinBug(rich.jupyter.JupyterMixin):\r\n    ...:     def __init__(self):\r\n    ...:         self.x = 1\r\n    ...:     def __rich_console__(self, console, options):\r\n    ...:         return [Text(str(self.x))]\r\n    ...:\r\n    ...:\r\n    ...: class RichNoBug:\r\n    ...:     def __init__(self):\r\n    ...:         self.x = 1\r\n    ...:     def __rich_console__(self, console, options):\r\n    ...:         return [Text(str(self.x))]\r\n    ...:     def __repr__(self):\r\n    ...:         return str(self.x)\r\n    ...:\r\n\r\nIn [43]: RichJupyterMixinBug()\r\nOut[43]:\r\n1\r\n\r\n\r\nIn [44]: RichNoBug()\r\nOut[44]: 1\r\n```\r\n\r\nI would expect that these two objects have the same output in the console.\r\n\r\n**Note that this seems to be an interaction between whatever the rich Jupyter mixin is doing and ipython/jupyter**, as you cannot reproduce this using `print`/`repr`/`str`:\r\n\r\n```\r\nIn [45]: print(repr(RichJupyterMixinBug()))\r\n<__main__.RichJupyterMixinBug object at 0x7f9f67075ff0>\r\n\r\nIn [46]: print(str(RichJupyterMixinBug()))\r\n<__main__.RichJupyterMixinBug object at 0x7f9f65f765f0>\r\n\r\nIn [47]: print(RichJupyterMixinBug())\r\n<__main__.RichJupyterMixinBug object at 0x7f9f67124e80>\r\n```\r\n\r\n**Platform**\r\n<details>\r\n<summary>Click to expand</summary>\r\n\r\nPlatform: Linux\r\nTerminal: Alacritty\r\n\r\nI may ask you to copy and paste the output of the following commands. It may save some time if you do it now.\r\n\r\nIf you're using Rich in a terminal:\r\n\r\n```\r\n❯ python -m rich.diagnose\r\n╭───────────────────────── <class 'rich.console.Console'> ─────────────────────────╮\r\n│ A high level console interface.                                                  │\r\n│                                                                                  │\r\n│ ╭──────────────────────────────────────────────────────────────────────────────╮ │\r\n│ │ <console width=86 ColorSystem.TRUECOLOR>                                     │ │\r\n│ ╰──────────────────────────────────────────────────────────────────────────────╯ │\r\n│                                                                                  │\r\n│     color_system = 'truecolor'                                                   │\r\n│         encoding = 'utf-8'                                                       │\r\n│             file = <_io.TextIOWrapper name='<stdout>' mode='w' encoding='utf-8'> │\r\n│           height = 51                                                            │\r\n│    is_alt_screen = False                                                         │\r\n│ is_dumb_terminal = False                                                         │\r\n│   is_interactive = True                                                          │\r\n│       is_jupyter = False                                                         │\r\n│      is_terminal = True                                                          │\r\n│   legacy_windows = False                                                         │\r\n│         no_color = False                                                         │\r\n│          options = ConsoleOptions(                                               │\r\n│                        size=ConsoleDimensions(width=86, height=51),              │\r\n│                        legacy_windows=False,                                     │\r\n│                        min_width=1,                                              │\r\n│                        max_width=86,                                             │\r\n│                        is_terminal=True,                                         │\r\n│                        encoding='utf-8',                                         │\r\n│                        max_height=51,                                            │\r\n│                        justify=None,                                             │\r\n│                        overflow=None,                                            │\r\n│                        no_wrap=False,                                            │\r\n│                        highlight=None,                                           │\r\n│                        markup=None,                                              │\r\n│                        height=None                                               │\r\n│                    )                                                             │\r\n│            quiet = False                                                         │\r\n│           record = False                                                         │\r\n│         safe_box = True                                                          │\r\n│             size = ConsoleDimensions(width=86, height=51)                        │\r\n│        soft_wrap = False                                                         │\r\n│           stderr = False                                                         │\r\n│            style = None                                                          │\r\n│         tab_size = 8                                                             │\r\n│            width = 86                                                            │\r\n╰──────────────────────────────────────────────────────────────────────────────────╯\r\n╭─── <class 'rich._windows.WindowsConsoleFeatures'> ────╮\r\n│ Windows features available.                           │\r\n│                                                       │\r\n│ ╭───────────────────────────────────────────────────╮ │\r\n│ │ WindowsConsoleFeatures(vt=False, truecolor=False) │ │\r\n│ ╰───────────────────────────────────────────────────╯ │\r\n│                                                       │\r\n│ truecolor = False                                     │\r\n│        vt = False                                     │\r\n╰───────────────────────────────────────────────────────╯\r\n╭────── Environment Variables ───────╮\r\n│ {                                  │\r\n│     'TERM': 'screen-256color',     │\r\n│     'COLORTERM': 'truecolor',      │\r\n│     'CLICOLOR': None,              │\r\n│     'NO_COLOR': None,              │\r\n│     'TERM_PROGRAM': 'tmux',        │\r\n│     'COLUMNS': None,               │\r\n│     'LINES': None,                 │\r\n│     'JUPYTER_COLUMNS': None,       │\r\n│     'JUPYTER_LINES': None,         │\r\n│     'JPY_PARENT_PID': None,        │\r\n│     'VSCODE_VERBOSE_LOGGING': None │\r\n│ }                                  │\r\n╰────────────────────────────────────╯\r\n```\r\n\r\n```\r\n❯ poetry show rich\r\n name         : rich                                                                  \r\n version      : 13.3.1                                                                \r\n description  : Render rich text, tables, progress bars, syntax highlighting, markdown and more to the terminal\r\n\r\ndependencies\r\n - markdown-it-py >=2.1.0,<3.0.0\r\n - pygments >=2.14.0,<3.0.0\r\n - typing-extensions >=4.0.0,<5.0\r\n\r\nrequired by\r\n - pytest-clarity >=8.0.0\r\n - streamlit >=10.11.0\r\n```\r\n\r\n</details>\r\n",
          "type": "issue"
        },
        {
          "author": "github-actions",
          "body": "Thank you for your issue. Give us a little time to review it.\n\nPS. You might want to check the [FAQ](https://github.com/textualize/rich/blob/master/FAQ.md) if you haven't done so already.\n\nThis is an automated reply, generated by [FAQtory](https://github.com/willmcgugan/faqtory)",
          "created_at": "2023-02-15T14:32:00Z",
          "type": "comment"
        },
        {
          "author": "github-actions",
          "body": "I hope we solved your problem.\n\nIf you like using Rich, you might also enjoy [Textual](https://textual.textualize.io)",
          "created_at": "2023-03-04T15:25:40Z",
          "type": "comment"
        }
      ]
    },
    {
      "repository": "Textualize/rich",
      "issue_number": 2803,
      "issue_title": "duplicated plots in jupyter",
      "issue_url": "https://github.com/Textualize/rich/issues/2803",
      "closed_at": "2023-03-04T11:10:25Z",
      "merged_prs": [
        {
          "pr_number": 2806,
          "pr_title": "match expected IPython formatter spec in rich.pretty",
          "pr_url": "https://github.com/Textualize/rich/pull/2806",
          "merged_at": "2023-03-04T11:10:23Z",
          "base_commit": {
            "sha": "b89d0362e8ebcb18902f0f0a206879f1829b5c0b",
            "ref": "master"
          }
        }
      ],
      "discussion": [
        {
          "author": "joamatab",
          "body": "How can we avoid having duplicated plots on jupyter?\r\n\r\nWhen I run\r\n\r\n```\r\nimport gdsfactory as gf\r\ngf.components.bend_circular()\r\n```\r\n\r\nI get one plot in jupyter, thanks to  defining `def _repr_html_(self)`\r\n\r\nHowever when I run \r\n```\r\nfrom rich import pretty\r\n\r\npretty.install()\r\ngf.components.bend_circular()\r\n```\r\n\r\nI get two plots of the same component.\r\n",
          "type": "issue"
        },
        {
          "author": "github-actions",
          "body": "Thank you for your issue. Give us a little time to review it.\n\nPS. You might want to check the [FAQ](https://github.com/textualize/rich/blob/master/FAQ.md) if you haven't done so already.\n\nThis is an automated reply, generated by [FAQtory](https://github.com/willmcgugan/faqtory)",
          "created_at": "2023-02-12T16:07:56Z",
          "type": "comment"
        },
        {
          "author": "willmcgugan",
          "body": "What version of Jupyter?",
          "created_at": "2023-02-12T16:08:52Z",
          "type": "comment"
        },
        {
          "author": "joamatab",
          "body": "I have seen it on 3.5.2  and also on  3.6.1\r\n\r\nAlso I can see it on the docs of the package where we modify the `_repr_html_(self)`\r\nhttps://gdsfactory.github.io/gdsfactory/notebooks/03_cells_autoname_and_cache.html#\r\n\r\n```\r\nA high level console interface.                                            │\r\n│                                                                            │\r\n│ ╭────────────────────────────────────────────────────────────────────────╮ │\r\n│ │ <console width=115 ColorSystem.TRUECOLOR>                              │ │\r\n│ ╰────────────────────────────────────────────────────────────────────────╯ │\r\n│                                                                            │\r\n│     color_system = 'truecolor'                                             │\r\n│         encoding = 'utf-8'                                                 │\r\n│             file = <ipykernel.iostream.OutStream object at 0x7efcfe5e6050> │\r\n│           height = 100                                                     │\r\n│    is_alt_screen = False                                                   │\r\n│ is_dumb_terminal = False                                                   │\r\n│   is_interactive = False                                                   │\r\n│       is_jupyter = True                                                    │\r\n│      is_terminal = False                                                   │\r\n│   legacy_windows = False                                                   │\r\n│         no_color = False                                                   │\r\n│          options = ConsoleOptions(                                         │\r\n│                        size=ConsoleDimensions(width=115, height=100),      │\r\n│                        legacy_windows=False,                               │\r\n│                        min_width=1,                                        │\r\n│                        max_width=115,                                      │\r\n│                        is_terminal=False,                                  │\r\n│                        encoding='utf-8',                                   │\r\n│                        max_height=100,                                     │\r\n│                        justify=None,                                       │\r\n│                        overflow=None,                                      │\r\n│                        no_wrap=False,                                      │\r\n│                        highlight=None,                                     │\r\n│                        markup=None,                                        │\r\n│                        height=None                                         │\r\n│                    )                                                       │\r\n│            quiet = False                                                   │\r\n│           record = False                                                   │\r\n│         safe_box = True                                                    │\r\n│             size = ConsoleDimensions(width=115, height=100)                │\r\n│        soft_wrap = False                                                   │\r\n│           stderr = False                                                   │\r\n│            style = None                                                    │\r\n│         tab_size = 8                                                       │\r\n│            width = 115                                                     │\r\n╰────────────────────────────────────────────────────────────────────────────╯\r\n╭─── <class 'rich._windows.WindowsConsoleFeatures'> ────╮\r\n│ Windows features available.                           │\r\n│                                                       │\r\n│ ╭───────────────────────────────────────────────────╮ │\r\n│ │ WindowsConsoleFeatures(vt=False, truecolor=False) │ │\r\n│ ╰───────────────────────────────────────────────────╯ │\r\n│                                                       │\r\n│ truecolor = False                                     │\r\n│        vt = False                                     │\r\n╰───────────────────────────────────────────────────────╯\r\n╭────── Environment Variables ───────╮\r\n│ {                                  │\r\n│     'TERM': 'xterm-color',         │\r\n│     'COLORTERM': 'truecolor',      │\r\n│     'CLICOLOR': '1',               │\r\n│     'NO_COLOR': None,              │\r\n│     'TERM_PROGRAM': 'tmux',        │\r\n│     'COLUMNS': None,               │\r\n│     'LINES': None,                 │\r\n│     'JUPYTER_COLUMNS': None,       │\r\n│     'JUPYTER_LINES': None,         │\r\n│     'JPY_PARENT_PID': '715767',    │\r\n│     'VSCODE_VERBOSE_LOGGING': None │\r\n│ }                                  │\r\n╰────────────────────────────────────╯\r\nplatform=\"Linux\"\r\n```\r\n\r\n",
          "created_at": "2023-02-12T16:14:01Z",
          "type": "comment"
        },
        {
          "author": "willmcgugan",
          "body": "Jupyter lab, Jupyter notebook, VScode ?",
          "created_at": "2023-02-12T16:17:10Z",
          "type": "comment"
        },
        {
          "author": "joamatab",
          "body": "jupyter-lab as well as VSCode",
          "created_at": "2023-02-12T16:23:11Z",
          "type": "comment"
        },
        {
          "author": "agoose77",
          "body": "I think this is a bug in the `gdsfactory` library; they use side-effects in `_repr_html_` rather than returning HTML. As such, rich probably invokes subsequent display methods, which leads to double plotting. ",
          "created_at": "2023-02-12T20:14:29Z",
          "type": "comment"
        },
        {
          "author": "blois",
          "body": "Specifically https://github.com/gdsfactory/gdsfactory/blob/b1d857446e1918b6f3db5b1cce3ba4de165652a5/gdsfactory/component.py#L1253 which leads to https://github.com/gdsfactory/gdsfactory/blob/b1d857446e1918b6f3db5b1cce3ba4de165652a5/gdsfactory/component.py#L1271.\r\n\r\nIf multiple reprs are needed then `__repr_mimebundle__` may be a better approach? ",
          "created_at": "2023-02-12T23:45:59Z",
          "type": "comment"
        },
        {
          "author": "minrk",
          "body": "If they want to keep the side-effect pattern, [`_ipython_display_()`](https://ipython.readthedocs.io/en/stable/config/integrating.html#MyObject._ipython_display_) is the method for that. That would be the shortest path to a solution, I think.\r\n\r\nAs @blois mentioned, the direct cause is the side effects in `_repr_html_`. But since the `_ipy_display_hook` _calls_ all possible IPython hooks, IPython's own display formatter also calls the same hook, triggering the side effect a second time.\r\n\r\nIf `_repr_html_` were fixed to follow the spec and _return_ the html representation (note: plotting matplotlib figures does _not_ usually produce HTML, it produces a png or jpeg output), the duplication would be solved, but the whole plot would still be rendered twice. One would just be discarded.\r\n\r\nI think rich's IPython hook as implemented now doesn't _quite_ fit the design of IPython's display formatters as it's implemented today. There are two classes:\r\n\r\n1. the [DisplayFormatter](https://ipython.readthedocs.io/en/stable/api/generated/IPython.core.formatters.html#IPython.core.formatters.DisplayFormatter), which is the object responsible for selecting and dispatching renderers for individual formatters (available as `get_ipython().display_formatter`), and\r\n2. the individual subclasses of [BaseFormatter](https://ipython.readthedocs.io/en/stable/api/generated/IPython.core.formatters.html#IPython.core.formatters.BaseFormatter), which are registered by mime-type as `ip.display_formatter.formatters` and should _return_ representations without side effects.\r\n\r\nCurrently, `_ipy_display_hook` registers itself as `text/plain` but actually relies on side effects to display text. I'm assuming this is why other formats are  considered - if rich and the HTMLFormatter both produce output, you'll see it twice. But this isn't how plain text reprs are expected to behave. Rich is reimplementing logic in DisplayFormatter and the frontend (output format _selection_) at the level of a single formatter (text/plain), which (in IPython's opinion) should not concern itself with what other formats are computed.\r\n\r\nIPython and Jupyter generally expect _multiple_ representations of outputs, and `text/plain` is ~always present as a fallback. I think the right fix is for rich's `_ipy_display_hook` to remove its checks for whether it should run (which don't work in general because formatter functions can also be registered without special method names using `formatter.for_type`) and compute and _return_ its text representation unconditionally, [as is done in IPython's default pretty printer](https://github.com/ipython/ipython/blob/9663a9adc4c87490f1dc59c8b6f32cdfd0c5094a/IPython/core/formatters.py#L694-L708). It's up to the DisplayFormatter to pick which representations to _compute_, and up to the frontend to pick which representation to display, and multiple frontends or nbconvert exports may pick different formats to support or prefer.",
          "created_at": "2023-02-13T12:49:42Z",
          "type": "comment"
        },
        {
          "author": "github-actions",
          "body": "I hope we solved your problem.\n\nIf you like using Rich, you might also enjoy [Textual](https://textual.textualize.io)",
          "created_at": "2023-03-04T11:10:36Z",
          "type": "comment"
        }
      ]
    },
    {
      "repository": "Textualize/rich",
      "issue_number": 2745,
      "issue_title": "[BUG] Panel title/subtitle styles are overriden by border style",
      "issue_url": "https://github.com/Textualize/rich/issues/2745",
      "closed_at": "2024-07-01T10:41:36Z",
      "merged_prs": [
        {
          "pr_number": 3401,
          "pr_title": "fix for panel title",
          "pr_url": "https://github.com/Textualize/rich/pull/3401",
          "merged_at": "2024-07-01T10:41:35Z",
          "base_commit": {
            "sha": "26479c17e9f3e32cab9a913713e0405743665552",
            "ref": "master"
          }
        }
      ],
      "discussion": [
        {
          "author": "noprobelm",
          "body": "I'll echo the others here by first expressing my thanks for making such a great tool. I'm an enthusiast, and `rich` has become an integral part of my daily code. I greatly admire your work.\r\n\r\nTo the problem...\r\n\r\n- [x] I've checked [docs](https://rich.readthedocs.io/en/latest/introduction.html) and [closed issues](https://github.com/Textualize/rich/issues?q=is%3Aissue+is%3Aclosed) for possible solutions.\r\n- [x] I can't find my issue in the [FAQ](https://github.com/Textualize/rich/blob/master/FAQ.md).\r\n\r\n## Problem Description\r\n\r\nI'm having an issue with panels. If a `Panel` instance has stylized `title` and `subtitle` attributes, their styles will invariably be overwritten by whatever the `border_style` is at the time of rendering (if a border style is present). I would expect this kind of behavior if `title` and `subtitle` were without styles, but not when they've been explicitly defined in the `Panel` instance.\r\n\r\n## How to Recreate\r\n\r\nThis code will recreate the problem.\r\n\r\n```\r\nfrom rich.panel import Panel\r\nfrom rich.text import Text\r\nfrom rich import print\r\n\r\ntitle = Text(\"Wake up!\", \"bold #ffb703\")\r\nsubtitle = Text(\"The world says hello!\", \"italic #f64740\")\r\nrenderable = Text(f\"A panel with 'title' and 'subtitle' elements\")\r\n\r\npanel = Panel(\r\n    renderable=renderable,\r\n    title=title,\r\n    subtitle=subtitle,\r\n    border_style=\"#5EAD7A\",\r\n    style='bold #81adc8'\r\n)\r\n\r\nprint(panel)\r\n\r\npanel = Panel(\r\n    renderable=renderable,\r\n    title=title,\r\n    subtitle=subtitle,\r\n)\r\npanel.style='bold #81adc8'\r\nprint(panel)\r\n\r\n```\r\n\r\nWhich produces\r\n\r\n![unexpected](https://user-images.githubusercontent.com/7587293/211927243-10498cc2-aa07-4e77-969b-d3643e16459a.png)\r\n\r\nI would expect the title/subtitles in the resulting panels would be stylized according to what's specified in the `Panel` instance, like this\r\n\r\n![expected](https://user-images.githubusercontent.com/7587293/211927234-f6febe4b-f8c8-453a-9f4d-705ab4272843.png)\r\n\r\n## Root Cause\r\nI think this problem is due to the way the  `__rich_console__` method for `Panel` overwrites the styling for `title_text` and `subtitle_text` with `border_style` (if `Panel.border_style != \"none\"`), irrespective of whether styling for `Panel.title` or `Panel.subtitle` were defined already. The code in question:\r\n\r\n[rich.panel.Panel; 198-199](https://github.com/Textualize/rich/blob/master/rich/panel.py#L198-L199)\r\n[rich.panel.Panel; 247-248](https://github.com/Textualize/rich/blob/master/rich/panel.py#L247-L248)\r\n\r\n## Proposed Solution\r\n\r\nI've forked `rich` and made local modifications with a possible solution. I'll create a pull request in accordance with your guidelines later today so we can review.\r\n\r\n## Platform & Configuration Details\r\n<details>\r\n<summary>Click to expand</summary>\r\n\r\n- Arch Linux\r\n- `xfce4-terminal`\r\n\r\n\r\n\r\n\r\n```\r\n$ python -m rich.diagnose\r\n╭───────────────────────── <class 'rich.console.Console'> ─────────────────────────╮\r\n│ A high level console interface.                                                  │\r\n│                                                                                  │\r\n│ ╭──────────────────────────────────────────────────────────────────────────────╮ │\r\n│ │ <console width=120 ColorSystem.TRUECOLOR>                                    │ │\r\n│ ╰──────────────────────────────────────────────────────────────────────────────╯ │\r\n│                                                                                  │\r\n│     color_system = 'truecolor'                                                   │\r\n│         encoding = 'utf-8'                                                       │\r\n│             file = <_io.TextIOWrapper name='<stdout>' mode='w' encoding='utf-8'> │\r\n│           height = 30                                                            │\r\n│    is_alt_screen = False                                                         │\r\n│ is_dumb_terminal = False                                                         │\r\n│   is_interactive = True                                                          │\r\n│       is_jupyter = False                                                         │\r\n│      is_terminal = True                                                          │\r\n│   legacy_windows = False                                                         │\r\n│         no_color = False                                                         │\r\n│          options = ConsoleOptions(                                               │\r\n│                        size=ConsoleDimensions(width=120, height=30),             │\r\n│                        legacy_windows=False,                                     │\r\n│                        min_width=1,                                              │\r\n│                        max_width=120,                                            │\r\n│                        is_terminal=True,                                         │\r\n│                        encoding='utf-8',                                         │\r\n│                        max_height=30,                                            │\r\n│                        justify=None,                                             │\r\n│                        overflow=None,                                            │\r\n│                        no_wrap=False,                                            │\r\n│                        highlight=None,                                           │\r\n│                        markup=None,                                              │\r\n│                        height=None                                               │\r\n│                    )                                                             │\r\n│            quiet = False                                                         │\r\n│           record = False                                                         │\r\n│         safe_box = True                                                          │\r\n│             size = ConsoleDimensions(width=120, height=30)                       │\r\n│        soft_wrap = False                                                         │\r\n│           stderr = False                                                         │\r\n│            style = None                                                          │\r\n│         tab_size = 8                                                             │\r\n│            width = 120                                                           │\r\n╰──────────────────────────────────────────────────────────────────────────────────╯\r\n╭─── <class 'rich._windows.WindowsConsoleFeatures'> ────╮\r\n│ Windows features available.                           │\r\n│                                                       │\r\n│ ╭───────────────────────────────────────────────────╮ │\r\n│ │ WindowsConsoleFeatures(vt=False, truecolor=False) │ │\r\n│ ╰───────────────────────────────────────────────────╯ │\r\n│                                                       │\r\n│ truecolor = False                                     │\r\n│        vt = False                                     │\r\n╰───────────────────────────────────────────────────────╯\r\n╭────── Environment Variables ───────╮\r\n│ {                                  │\r\n│     'TERM': 'xterm-256color',      │\r\n│     'COLORTERM': 'truecolor',      │\r\n│     'CLICOLOR': None,              │\r\n│     'NO_COLOR': None,              │\r\n│     'TERM_PROGRAM': None,          │\r\n│     'COLUMNS': None,               │\r\n│     'LINES': None,                 │\r\n│     'JUPYTER_COLUMNS': None,       │\r\n│     'JUPYTER_LINES': None,         │\r\n│     'JPY_PARENT_PID': None,        │\r\n│     'VSCODE_VERBOSE_LOGGING': None │\r\n│ }                                  │\r\n╰────────────────────────────────────╯\r\n```\r\n\r\n```\r\n$ pip freeze | grep rich\r\nrich==13.0.1\r\n```\r\n\r\n</details>\r\n",
          "type": "issue"
        },
        {
          "author": "github-actions",
          "body": "Thank you for your issue. Give us a little time to review it.\n\nPS. You might want to check the [FAQ](https://github.com/textualize/rich/blob/master/FAQ.md) if you haven't done so already.\n\nThis is an automated reply, generated by [FAQtory](https://github.com/willmcgugan/faqtory)",
          "created_at": "2023-01-11T22:06:37Z",
          "type": "comment"
        },
        {
          "author": "noprobelm",
          "body": "This problem is tangential to  [issue 2446](https://github.com/Textualize/rich/issues/2466), but not the same. The code introduced by [pull request 2543](https://github.com/Textualize/rich/pull/2543) aimed at resolving the issue is what resulted in the current behavior.",
          "created_at": "2023-01-11T22:11:56Z",
          "type": "comment"
        },
        {
          "author": "github-actions",
          "body": "I hope we solved your problem.\n\nIf you like using Rich, you might also enjoy [Textual](https://textual.textualize.io)",
          "created_at": "2024-07-01T10:41:46Z",
          "type": "comment"
        }
      ]
    },
    {
      "repository": "Delgan/loguru",
      "issue_number": 1296,
      "issue_title": "Python 3.14: test_global_loop_not_used fails due to DeprecationWarning for asyncio.set_event_loop",
      "issue_url": "https://github.com/Delgan/loguru/issues/1296",
      "closed_at": "2025-02-13T18:10:33Z",
      "merged_prs": [
        {
          "pr_number": 1298,
          "pr_title": "Fix deprecation warning raised by tests with Python 3.14",
          "pr_url": "https://github.com/Delgan/loguru/pull/1298",
          "merged_at": "2025-02-13T18:10:32Z",
          "base_commit": {
            "sha": "258326b747761a5c2430161b9f52b04bd7644014",
            "ref": "master"
          }
        }
      ],
      "discussion": [
        {
          "author": "musicinmybrain",
          "body": "In Fedora, we’re already testing packages with Python 3.14, and this revealed a single test failure in `loguru` due to a `DeprecationWarning` targeting Python 3.16.\n\nFedora package: https://src.fedoraproject.org/rpms/python-loguru\nFedora bug report: https://bugzilla.redhat.com/show_bug.cgi?id=2345523\n\nThis can be reproduced in a virtualenv. I opted to install test dependencies manually rather than using the `dev` extra because `pytest-mypy-plugins` (really, its dependency `rpds-py`) is not yet ready for Python 3.14. I also needed a quick temporary hack to disable the missing plugins:\n\n```diff\ndiff --git a/tests/conftest.py b/tests/conftest.py\nindex f3b4cf6..f29d504 100644\n--- a/tests/conftest.py\n+++ b/tests/conftest.py\n@@ -48,7 +48,7 @@ if sys.version_info < (3, 6):\n         return pathlib.Path(str(tmp_path))\n \n \n-if sys.version_info >= (3, 6):\n+if sys.version_info >= (3, 6) and False:\n     from pytest_mypy_plugins.item import YamlTestItem\n \n     def _fix_positional_only_args(item: YamlTestItem):\n```\n\nYou don’t have to use `uv` below; I use it because it is fast and pleasant. Making the virtualenv with `python3.14 -m venv _e` would work just as well.\n\n```\n$ git checkout https://github.com/Delgan/loguru.git\n$ cd loguru\n$ uv venv _e --python 3.14\nUsing CPython 3.14.0a4 interpreter at: /usr/bin/python3.14\nCreating virtual environment at: _e\nActivate with: source _e/bin/activate\n$ . _e/bin/activate\n(_e) $ uv pip install -e .\n(_e) $ uv pip install pytest colorama freezegun mypy\n(_e) $ pytest -vv\n[…]\n============================================== FAILURES ==============================================\n_____________________________________ test_global_loop_not_used ______________________________________\n\ncapsys = <_pytest.capture.CaptureFixture object at 0x7f560a647f50>\n\n>   ???\n\ncapsys     = <_pytest.capture.CaptureFixture object at 0x7f560a647f50>\nloop       = <_UnixSelectorEventLoop running=False closed=True debug=False>\n\ntests/test_coroutine_sink.py:167:\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n/usr/lib64/python3.14/contextlib.py:141: in __enter__\n    return next(self.gen)\n        self       = <contextlib._GeneratorContextManager object at 0x7f560a647af0>\ntests/conftest.py:94: in set_event_loop_context\n    asyncio.set_event_loop(loop)\n        loop       = <_UnixSelectorEventLoop running=False closed=True debug=False>\n/usr/lib64/python3.14/asyncio/events.py:843: in set_event_loop\n    warnings._deprecated('asyncio.set_event_loop', remove=(3,16))\n        loop       = <_UnixSelectorEventLoop running=False closed=True debug=False>\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nname = 'asyncio.set_event_loop'\nmessage = '{name!r} is deprecated and slated for removal in Python {remove}'\n\n    def _deprecated(name, message=_DEPRECATED_MSG, *, remove, _version=sys.version_info):\n        \"\"\"Warn that *name* is deprecated or should be removed.\n\n        RuntimeError is raised if *remove* specifies a major/minor tuple older than\n        the current Python version or the same version but past the alpha.\n\n        The *message* argument is formatted with *name* and *remove* as a Python\n        version tuple (e.g. (3, 11)). \n\n        \"\"\"\n        remove_formatted = f\"{remove[0]}.{remove[1]}\"\n        if (_version[:2] > remove) or (_version[:2] == remove and _version[3] != \"alpha\"):\n            msg = f\"{name!r} was slated for removal after Python {remove_formatted} alpha\"\n            raise RuntimeError(msg)   \n        else:\n            msg = message.format(name=name, remove=remove_formatted)\n>           warn(msg, DeprecationWarning, stacklevel=3)\nE           DeprecationWarning: 'asyncio.set_event_loop' is deprecated and slated for removal in Python 3.16\n\n_version   = sys.version_info(major=3, minor=14, micro=0, releaselevel='alpha', serial=4)\nmessage    = '{name!r} is deprecated and slated for removal in Python {remove}'\nmsg        = \"'asyncio.set_event_loop' is deprecated and slated for removal in Python 3.16\"\nname       = 'asyncio.set_event_loop' \nremove     = (3, 16)\nremove_formatted = '3.16'\n\n/usr/lib64/python3.14/warnings.py:668: DeprecationWarning\n====================================== short test summary info =======================================\nFAILED tests/test_coroutine_sink.py::test_global_loop_not_used - DeprecationWarning: 'asyncio.set_event_loop' is deprecated and slated for removal in Python 3.16\n======================= 1 failed, 1528 passed, 28 skipped in 72.33s (0:01:12) ========================\n```\n\nThis is obviously a harmless warning until Python 3.16 actually arrives on the scene. I’m not sure quite how to make the necessary adaptation in this test, so for now I’m just reporting it here for visibility and telling `pytest` to ignore it (`-W \"ignore:'asyncio.set_event_loop' is deprecated and slated for removal in Python 3.16:DeprecationWarning\"`).",
          "type": "issue"
        },
        {
          "author": "Delgan",
          "body": "I'd hoped we'd be able to catch these problems in advance thanks to [the CI](https://github.com/Delgan/loguru/actions/runs/13265303205/job/37031143614), but as you've noticed the tests can't actually run with Python 3.14 because of dependency incompatibilities. That is frustrating.\r\n\r\nI'll take a look at the deprecation and fix it. Thanks for the report.",
          "created_at": "2025-02-13T13:20:30Z",
          "type": "comment"
        }
      ]
    },
    {
      "repository": "Delgan/loguru",
      "issue_number": 1291,
      "issue_title": "Won't handle future time",
      "issue_url": "https://github.com/Delgan/loguru/issues/1291",
      "closed_at": "2025-02-13T17:34:00Z",
      "merged_prs": [
        {
          "pr_number": 1297,
          "pr_title": "Fix possible error when clock is far in the future on Windows",
          "pr_url": "https://github.com/Delgan/loguru/pull/1297",
          "merged_at": "2025-02-13T17:33:59Z",
          "base_commit": {
            "sha": "e310e2029102b5d63a679a2b64501c045aa86336",
            "ref": "master"
          }
        }
      ],
      "discussion": [
        {
          "author": "mrx23dot",
          "body": "So my system clock was set in the future, year 2040 Feb, because of a battery issue.\n\nAnd I was surprised that loguru refused to be included:\n\n```\n    from loguru import logger as log\n  File \"C:\\py38_64\\lib\\site-packages\\loguru\\__init__.py\", line 10, in <module>\n    from ._logger import Core as _Core\n  File \"C:\\py38_64\\lib\\site-packages\\loguru\\_logger.py\", line 109, in <module>\n    start_time = aware_now()\n  File \"C:\\py38_64\\lib\\site-packages\\loguru\\_datetime.py\", line 94, in aware_now\n    tzinfo = timezone(timedelta(seconds=seconds), zone)\nValueError: offset must be a timedelta strictly between -timedelta(hours=24) and timedelta(hours=24), not datetime.timede\nlta(days=-49711, seconds=63104).\n```\n\nI don't think it should restrict date/time, it's not like SSL/TLS.\nSomeone in the future might want to run old versions, like ppl run Windows 95 now.\n\nAll I want is to print(timestamp)",
          "type": "issue"
        },
        {
          "author": "Delgan",
          "body": "Hi @mrx23dot.\r\nThank you for taking the time to report this bug. I managed to reproduce the issue on my computer as well.\r\n\r\nRest assured, Loguru should still be working in 2040. More likely, the problem here is not the year 2040 itself, but the mismatch between your system's time (2040) and the real time (2025). Somehow, in this specific scenario, this causes the `tm_gmtoff` (relied upon by Loguru) to be invalid.\r\n\r\nIt's not clear yet whether this is a limitation of Windows or CPython. I reported the  problem upstream: https://github.com/python/cpython/issues/130047\r\n\r\nDepending on the answer, I'll implement a workaround in Loguru.",
          "created_at": "2025-02-12T18:53:18Z",
          "type": "comment"
        },
        {
          "author": "Delgan",
          "body": "It's actually a problem with the implementation of C `localtime` on Windows that currently does not handle past the 2038 year. I'll implement a workaround.",
          "created_at": "2025-02-12T22:31:25Z",
          "type": "comment"
        },
        {
          "author": "mrx23dot",
          "body": "Cool, thanks for the support! Using this lib is way nicer than doing prints!",
          "created_at": "2025-02-12T22:59:49Z",
          "type": "comment"
        }
      ]
    },
    {
      "repository": "Delgan/loguru",
      "issue_number": 1282,
      "issue_title": "Bug: Standard Sink blocks exception formatting in python handler",
      "issue_url": "https://github.com/Delgan/loguru/issues/1282",
      "closed_at": "2025-01-23T18:58:39Z",
      "merged_prs": [
        {
          "pr_number": 1283,
          "pr_title": "Clarify why exceptions maybe missing from log messages",
          "pr_url": "https://github.com/Delgan/loguru/pull/1283",
          "merged_at": "2025-01-23T18:58:38Z",
          "base_commit": {
            "sha": "55776bbcfea82ee797ee2189d770cbcaac2ea8b6",
            "ref": "master"
          }
        }
      ],
      "discussion": [
        {
          "author": "tharwan",
          "body": "we have the slightly curious setup that we want to use Loguru to format logs that are emitted during prefect flows. To do this we first inject an intercept logger in the prefect stack and then add two sinks to Loguru. One ist just stdout with our preferred formatting. The other is prefects internal log handler, so that we also have logs visible in prefect. \n\nroughly like this:\n```python\nfrom prefect.logging.handlers import APILogHandler as PrefectLogHandler\n\nlogger.add(PrefectLogHandler(), format=formatter, filter=has_flow_ctx)\nlogger.add( sys.stdout, format=fmt)\n```\n\nHowever we did not see any details of exceptions in prefect. The investigation showed that the loguru standard sink [sets](https://github.com/Delgan/loguru/blob/55776bbcfea82ee797ee2189d770cbcaac2ea8b6/loguru/_simple_sinks.py#L50C13-L50C28) `record.exc_text = \"\\n\"`. But this leads to pythons standard handler not generating a representation of the exception because it [assumes](https://github.com/python/cpython/blob/9012fa741d55419dc77c5c191794eb93e71ae9a4/Lib/logging/__init__.py#L718) this only needs to be done of it is not set. \n\nFrom the source code it is not clear to me why the standard sync does this in the first place. The workaround to wrap the PrefectLogHandler in a custom sink worked just fine:\n\n```python\nclass PrefectSink:\n    # the default sink sets exc_text for some reason, which leads to the standard logger not formatting the exeption,\n    # so it is not visible in prefect\n    def __init__(self):\n        self._handler = PrefectLogHandler()\n\n    def write(self, message):\n        record = message.record\n        message = str(message)\n        exc = record[\"exception\"]\n        record = logging.getLogger().makeRecord(\n            record[\"name\"],\n            record[\"level\"].no,\n            record[\"file\"].path,\n            record[\"line\"],\n            message,\n            (),\n            (exc.type, exc.value, exc.traceback) if exc else None,\n            record[\"function\"],\n            {\"extra\": record[\"extra\"]},\n        )\n        self._handler.handle(record)\n\n    def stop(self):\n        self._handler.close()\n\n    async def complete(self):\n        pass\n```\n\nso maybe it can be removed or set to `None` instead?",
          "type": "issue"
        },
        {
          "author": "Delgan",
          "body": "Hi @tharwan.\r\n\r\nThe `record.exc_text = \"\\n\"` is a kind of weird trick to avoid the exception to be formatted twice (once per Loguru, once per the standard logging).\r\n\r\nI'm only guessing, but seeing `format=formatter` in your code, this might be where the problem comes from. When the `format` is a function and not a string, then Loguru will **not** automatically append the exception to the log messages. Instead, the user is in charge of specifying `\"{exception}\"` somewhere in the returned log format (the user gets complete control over the desired format). See more information [here](https://loguru.readthedocs.io/en/stable/api/logger.html#message). For example:\r\n\r\n```python\r\ndef formatter(record):\r\n    return \"{time} {message}\\n{exception}\"\r\n\r\nlogger.add(\"file.log\", format=formatter)\r\n```\r\n\r\nDoes `\"{exception}\"` appear in the returned format of your `formatter` function? Otherwise, that would certainly explain why the formatted exception isn't accessible by Prefect.",
          "created_at": "2025-01-23T09:56:33Z",
          "type": "comment"
        },
        {
          "author": "tharwan",
          "body": "Thanks, that was indeed the problem. Than my only change request would be a comment on that line, why it is there :-)\n\nI might still go back to my own Sink, because the exception formatting from loguru does not play well with prefects ui.",
          "created_at": "2025-01-23T13:09:56Z",
          "type": "comment"
        },
        {
          "author": "Delgan",
          "body": "> Thanks, that was indeed the problem. Than my only change request would be a comment on that line, why it is there :-)\r\n\r\nHaha, sounds fair. :smile: \r\n\r\nI'll also add a entry about \"Why I can't see any exception formatted in my logs?\" in [the troubleshooting guide](https://loguru.readthedocs.io/en/stable/resources/troubleshooting.html), since it's a common gotcha.\r\n\r\n> I might still go back to my own Sink, because the exception formatting from loguru does not play well with prefects ui.\r\n\r\nYou might also consider disabling the fancy formatting by configuring your Prefect handler with `diagnose=False` and `backtrace=False`.\r\n",
          "created_at": "2025-01-23T13:15:33Z",
          "type": "comment"
        }
      ]
    },
    {
      "repository": "Delgan/loguru",
      "issue_number": 1262,
      "issue_title": "Improve InterceptHandler recipe by copying more properties",
      "issue_url": "https://github.com/Delgan/loguru/issues/1262",
      "closed_at": "2024-12-31T17:37:44Z",
      "merged_prs": [
        {
          "pr_number": 1266,
          "pr_title": "Improve \"InterceptHandler\" recipe for frozen modules",
          "pr_url": "https://github.com/Delgan/loguru/pull/1266",
          "merged_at": "2024-12-31T17:37:43Z",
          "base_commit": {
            "sha": "dfe9607a233fc5d83375e836c8a9c07f7f682d4b",
            "ref": "master"
          }
        }
      ],
      "discussion": [
        {
          "author": "jonashaag",
          "body": "I think we should be able to copy over more `logging.LogRecord` properties to Loguru, like this:\r\n\r\n```py\r\n\r\n\r\nclass InterceptHandler(logging.Handler):\r\n    def emit(self, record: logging.LogRecord) -> None:\r\n        ...\r\n\r\n        logger.patch(\r\n            lambda r: r.update(\r\n                {\r\n                    \"file\": RecordFile(record.filename, record.pathname),\r\n                    \"function\": record.funcName,\r\n                    \"line\": record.lineno,\r\n                    \"module\": record.module,\r\n                    \"name\": record.name,\r\n                    \"process\": RecordProcess(record.process, record.processName),\r\n                    \"thread\": RecordThread(record.thread, record.threadName),\r\n                }  # type: ignore\r\n            )\r\n        ).opt(exception=record.exc_info).log(level, record.getMessage())\r\n```\r\n\r\nWhat do you think about updating the recipe accordingly?",
          "type": "issue"
        },
        {
          "author": "Delgan",
          "body": "Hi @jonashaag.\r\n\r\nDo you mean that some of the properties are not properly fetched with the current `InterceptHandler` recipe? Since Loguru retrieves the original stack frame and create a log record from it, there should be no need to call `logger.patch()`. Do you have an example of the improvement?\r\n\r\nIn any case, the recipe will likely be replaced by a built-in `logger.bridge()` method in the next version.",
          "created_at": "2024-12-30T18:46:34Z",
          "type": "comment"
        },
        {
          "author": "jonashaag",
          "body": "Yes, for example, the `function` and `module` fields are set to the `InterceptHandler`'s function/module",
          "created_at": "2024-12-30T18:56:23Z",
          "type": "comment"
        },
        {
          "author": "Delgan",
          "body": "Hum, that is unexpected. The following script seems to work fine:\r\n\r\n```python\r\nfrom loguru import logger\r\nimport logging\r\nimport inspect\r\n\r\nstandard_logger = logging.getLogger(\"standard_logger\")\r\n\r\n\r\nclass InterceptHandler(logging.Handler):\r\n    def emit(self, record: logging.LogRecord) -> None:\r\n        # Get corresponding Loguru level if it exists.\r\n        level: str | int\r\n        try:\r\n            level = logger.level(record.levelname).name\r\n        except ValueError:\r\n            level = record.levelno\r\n\r\n        # Find caller from where originated the logged message.\r\n        frame, depth = inspect.currentframe(), 0\r\n        while frame and (depth == 0 or frame.f_code.co_filename == logging.__file__):\r\n            frame = frame.f_back\r\n            depth += 1\r\n\r\n        logger.opt(depth=depth, exception=record.exc_info).log(level, record.getMessage())\r\n\r\n\r\nlogging.basicConfig(handlers=[InterceptHandler()], level=0, force=True)\r\n\r\n\r\ndef some_function():\r\n    logger.info(\"Message from Loguru\")\r\n    standard_logger.info(\"Message from standard logger\")\r\n\r\n\r\nsome_function()\r\n```\r\n```\r\n2024-12-30 20:08:58.673 | INFO     | __main__:some_function:30 - Message from Loguru\r\n2024-12-30 20:08:58.673 | INFO     | __main__:some_function:31 - Message from standard logger\r\n```\r\n\r\nMaybe this is a missing `opt(depth=...)` in your code? This can happen when defining function wrappers and decorators.",
          "created_at": "2024-12-30T19:10:22Z",
          "type": "comment"
        },
        {
          "author": "jonashaag",
          "body": "```\r\nIn [1]: import t  # <== your script\r\n2024-12-30 22:46:41.192 | INFO     | t:some_function:30 - Message from Loguru\r\n2024-12-30 22:46:41.192 | INFO     | t:some_function:31 - Message from standard logger\r\n\r\n2024-12-30 22:46:41.192 | DEBUG    | asyncio.selector_events:__init__:64 - Using selector: KqueueSelector\r\n\r\nIn [2]: import pikepdf\r\n2024-12-30 22:46:43.713 | INFO     | importlib._bootstrap:_call_with_frames_removed:488 - pikepdf C++ to Python logger bridge initialized\r\n```\r\n\r\n(Also reproducible outside of IPython)\r\n\r\nWith my script:\r\n\r\n```\r\nIn [2]: import pikepdf\r\n2024-12-30 22:49:22.268 | INFO     | pikepdf._core:<module>:13 - pikepdf C++ to Python logger bridge initialized\r\n```",
          "created_at": "2024-12-30T21:49:41Z",
          "type": "comment"
        },
        {
          "author": "Delgan",
          "body": "Thanks for the additional explanations. \r\n\r\nFor reference, here is a minimal reproducible example:\r\n\r\n```python\r\nimport logging\r\nimport inspect\r\nfrom loguru import logger\r\n\r\n\r\nclass InterceptHandler(logging.Handler):\r\n    def emit(self, record: logging.LogRecord) -> None:\r\n        # Get corresponding Loguru level if it exists.\r\n        level: str | int\r\n        try:\r\n            level = logger.level(record.levelname).name\r\n        except ValueError:\r\n            level = record.levelno\r\n\r\n        # Find caller from where originated the logged message.\r\n        frame, depth = inspect.currentframe(), 0\r\n        while frame and (depth == 0 or frame.f_code.co_filename == logging.__file__):\r\n            frame = frame.f_back\r\n            depth += 1\r\n\r\n        logger.opt(depth=depth, exception=record.exc_info).log(level, record.getMessage())\r\n\r\n\r\nlogging.basicConfig(handlers=[InterceptHandler()], level=0, force=True)\r\n\r\n# Import after setting up logging.\r\nimport pikepdf\r\n```\r\n```\r\n2024-12-31 12:39:45.036 | INFO     | importlib._bootstrap:_load_unlocked:935 - pikepdf C++ to Python logger bridge initialized\r\n```\r\n\r\nI was not aware of such limitation. It appears it happens due to C implementation of `pikepdf` logging: https://github.com/pikepdf/pikepdf/blob/b5134f75647737b8aca17fa15c78b912b7a90b92/src/core/logger.cpp#L51-L67\r\n\r\nThere is no Python stack frame available, so Loguru will retrieve the wrong one. On the other hand, the standard `logging` explicitly skip the bootstrapped frames: https://github.com/python/cpython/blob/b2ac70a62ad1be8e037ce45ccf5f1b753ea5e64b/Lib/logging/__init__.py#L201\r\n\r\nThat means the recipe for the `InterceptHandler` should be updated to do the same thing:\r\n\r\n```python\r\nimport logging\r\nimport inspect\r\nfrom loguru import logger\r\n\r\n\r\nclass InterceptHandler(logging.Handler):\r\n    def emit(self, record: logging.LogRecord) -> None:\r\n        # Get corresponding Loguru level if it exists.\r\n        level: str | int\r\n        try:\r\n            level = logger.level(record.levelname).name\r\n        except ValueError:\r\n            level = record.levelno\r\n\r\n        # Find caller from where originated the logged message.\r\n        frame, depth = inspect.currentframe(), 0\r\n\r\n        def is_internal(filename: str):\r\n            is_logging = filename == logging.__file__\r\n            is_frozen = \"importlib\" in filename and \"_bootstrap\" in filename\r\n            return is_logging or is_frozen\r\n\r\n        while frame and (depth == 0 or is_internal(frame.f_code.co_filename)):\r\n            frame = frame.f_back\r\n            depth += 1\r\n\r\n        logger.opt(depth=depth, exception=record.exc_info).log(level, record.getMessage())\r\n\r\n\r\nlogging.basicConfig(handlers=[InterceptHandler()], level=0, force=True)\r\n\r\n\r\n# Import after setting up logging.\r\nimport pikepdf\r\n```\r\n```\r\n2024-12-31 14:20:59.104 | INFO     | pikepdf:<module>:13 - pikepdf C++ to Python logger bridge initialized\r\n```\r\n\r\nI prefer this approach over calling `logger.patch()` since it does not require importing private Loguru modules. What do you think?",
          "created_at": "2024-12-31T13:26:31Z",
          "type": "comment"
        },
        {
          "author": "jonashaag",
          "body": "Sounds good!",
          "created_at": "2024-12-31T15:24:46Z",
          "type": "comment"
        }
      ]
    },
    {
      "repository": "Delgan/loguru",
      "issue_number": 1257,
      "issue_title": "Multiprocess compatible FileSink using file locks",
      "issue_url": "https://github.com/Delgan/loguru/issues/1257",
      "closed_at": "2025-01-16T15:09:57Z",
      "merged_prs": [
        {
          "pr_number": 1277,
          "pr_title": "Fix recipes in docs regarding inter-process communication",
          "pr_url": "https://github.com/Delgan/loguru/pull/1277",
          "merged_at": "2025-01-16T15:09:56Z",
          "base_commit": {
            "sha": "148da56181a16c21cb37fc8bf5342f5b14ded845",
            "ref": "master"
          }
        }
      ],
      "discussion": [
        {
          "author": "TheForgottened",
          "body": "Hey!\r\n\r\nAs the title says, I have developed a relatively small FileSink that's compatible with multi processing. Unfortunately I doubt that the changes I made are sufficient for a full release, that's why I'm opening an issue instead of a PR.\r\n\r\nThe motivation behind this is to be able to log into a file using gunicorn with multiworkers. As many issues opened in the paste state, what happens when you use a FileSink with multiworkers is that when they rotate, they create a file for each worker, meaning that upon rotation there'll be x files for x workers.\r\n\r\nThe reason why this happens is quite weird actually, so let me explain: although we open a handle to a file called x.log, the handler is not actually bound to that name, meaning that even if the file is renamed to x_2024.log and a new x.log is created, the handle will continue pointing at x_2024.log.  What I did is if the file associated with the handle is supposed to rotate, I refresh the handle using the file name. Then, if it still hasn't been rotated, it will rotate. If it has, it won't no longer try to rotate, stopping x files for x workers from happening.\r\n\r\nTo ensure consistency, I use a file lock. I made use of the library [filelock](https://pypi.org/project/filelock/). It is basically a wrapper around actual OS calls. It is easy to ensure consistency between processes using a file since we won't have to worry about shared memory, etc.\r\n\r\nMy quick implementation was the following:\r\n\r\n```python\r\nimport loguru\r\nfrom filelock import FileLock\r\nfrom loguru._file_sink import FileSink\r\n\r\nLOGFILE_PATH = \"./log_name.log\"\r\nLOG_FILE_SIZE_KB = 1024\r\n\r\n\r\nclass MultiprocessSafeFileSink(FileSink):\r\n    def write(self, message: \"loguru.Message\") -> None:\r\n        if self._file is None:\r\n            path = self._create_path()\r\n            self._create_dirs(path)\r\n            self._create_file(path)\r\n\r\n        if self._watch:\r\n            self._reopen_if_needed()\r\n\r\n        lock_file = Path(LOGFILE_PATH ).parent / \"app_log.lock\"\r\n        with FileLock(lock_file):\r\n            self._update_file_handler(message)\r\n\r\n            if self._rotation_function is not None and self._rotation_function(message, self._file):\r\n                self._terminate_file(is_rotating=True)\r\n\r\n        self._file.write(message)\r\n\r\n    def _update_file_handler(self, message: \"loguru.Message\") -> None:\r\n        \"\"\"\r\n        If the file should rotate, update the file handler so if some other process running loguru already rotated the\r\n        file, the handler will point to the new file and thus this particular process won't try to rotate again, which\r\n        would result in multiple rotated log files, one per process.\r\n        \"\"\"\r\n\r\n        if self._rotation_function is not None and self._rotation_function(message, self._file):\r\n            if self._file is not None:\r\n                old_path = self._file_path\r\n                self._close_file()\r\n                self._file_path = old_path\r\n\r\n            self._create_file(self._file_path)\r\n\r\n\r\ndef configure_loguru(app_version: str) -> None:\r\n    loguru.logger.remove()\r\n    loguru.logger.add(\r\n        MultiprocessSafeFileSink(Path(LOGFILE_PATH), rotation=f\"{LOG_FILE_SIZE_KB} kB\"),\r\n        enqueue=True,\r\n        diagnose=False,\r\n    )\r\n```\r\n\r\nThere's probably a better and smarter way of doing this, specially if integrated within the current constructors, etc. From some quick testing it seems to be working, but I haven't tried it extensively.\r\n\r\nPlease leave any questions necessary, and I will gladly help with anything that may be needed :)",
          "type": "issue"
        },
        {
          "author": "Delgan",
          "body": "Hey @TheForgottened.\r\n\r\nThank you for sharing your thoughts and solutions to this recurring issue. I agree that this is one of Loguru's major unsolved problems. It's discussed a bit in this section of the documentation I added recently: [Why are my log files sometimes duplicated or the content trimmed?](https://loguru.readthedocs.io/en/stable/resources/troubleshooting.html#why-are-my-log-files-sometimes-duplicated-or-the-content-trimmed)\r\n\r\nUsing `filelock` is one possibility, but I was considering a different implementation. When sharing the `logger` among processes is not possible, I was thinking of implementing inter-process communication using a basic TCP `socket`. Loguru would have some kind of `logger.connect()` method to setup such pattern.\r\n\r\nThe advantage is that it would be generic regardless of the type of logging handler. It would also avoid additional dependency, and in my opinion would be cleaner than depending on the filesystem (and thus also reduce risks of conflicts).\r\n\r\nThe disadvantage is that this would require to call `logger.connect()` explicitly instead of working out of the box with Gunicorn.",
          "created_at": "2024-12-27T08:29:07Z",
          "type": "comment"
        },
        {
          "author": "TheForgottened",
          "body": "Hey @Delgan , your proposed solution sounds good and honestly I don't think the logger.connect() call would bother anyone! \r\n\r\nI confess I don't see the problem with depending on the filesystem, since that's exactly what UNIX based OSs do (everything is a file). I do understand the extra dependency since loguru, as of now, basically works by itself.\r\n\r\nAny chance this socket, although local, could be more fragile than we would like? I am not much into networking but I immediately think this could possibly be an issue if for some reason the network adapter gets changed during normal operation?\r\n\r\nIn the meantime, do you think there's some place where this information could be provided, maybe as a recipe? Searching every open issue on this and other repositories always return the same answer: not possible! And although not a perfect solution, I believe it's better than none!\r\n\r\nLet me know your thoughts and thanks for taking the time to reply!",
          "created_at": "2024-12-28T15:27:30Z",
          "type": "comment"
        },
        {
          "author": "Delgan",
          "body": "> I confess I don't see the problem with depending on the filesystem, since that's exactly what UNIX based OSs do (everything is a file).\r\n\r\nBasing the implementation on a file implies considerations regarding its location, name, permissions and deletion. In addition, I'm concerned about stale files and deadlocks if a processus is forcefully terminated while holding the lock. \r\nUnix filelock [are notoriously complex](https://0pointer.net/blog/projects/locking.html), and their compatibility with NFS [has historically been unreliable](https://utcc.utoronto.ca/~cks/space/blog/linux/FlockFcntlAndNFS).\r\n\r\n\r\n\r\n> Any chance this socket, although local, could be more fragile than we would like? I am not much into networking but I immediately think this could possibly be an issue if for some reason the network adapter gets changed during normal operation?\r\n\r\nI assume local sockets to be quite robust and to remain unaffected by network adapter changes. Running a local server is a common practice by popular tools such as `blackd` or `clangd` for example. It has proven to be a reliable solution.\r\nThat being said, I don't rule out the possibility of unexpected edge cases under certain very specific conditions. Still, I _feel_ it'll be more robust that using a filelock.\r\nAdditionally, using sockets also enables cross-machine logging, which is a feature that has been requested in the past.\r\n\r\n\r\n> In the meantime, do you think there's some place where this information could be provided, maybe as a recipe? Searching every open issue on this and other repositories always return the same answer: not possible! And although not a perfect solution, I believe it's better than none!\r\n\r\nYes, such recipe would be very valuable. This is a major problem with Gunicorn, and you're totally right so far I haven't provided a functional workaround even though it's technically possible. We could add a new entry to [the list of recipes](https://loguru.readthedocs.io/en/stable/resources/recipes.html) in the documentation, and link back to it in the section I shared in my previous message.",
          "created_at": "2024-12-31T09:25:31Z",
          "type": "comment"
        },
        {
          "author": "TheForgottened",
          "body": "Thanks for taking the time to explain everything! Do you want me to open a PR when I can, adding the recipe above to the docs, or would you rather do that on your own time?",
          "created_at": "2025-01-06T12:00:54Z",
          "type": "comment"
        },
        {
          "author": "Delgan",
          "body": "Thank you for your offer. Don't worry, I'll just run a few tests and update the documentation. I think it's possible to reuse some components of the standard `logging` library to implement a fully functional solution (before it becomes built-in). In particular, the standard documentation describes two recipes to circumvent the same problem:\r\n* [Sending and receiving logging events across a network](https://docs.python.org/3/howto/logging-cookbook.html#network-logging)\r\n* [Running a logging socket listener in production](https://docs.python.org/3/howto/logging-cookbook.html#running-a-logging-socket-listener-in-production)\r\n\r\nSurely, we can do something similar with Loguru, since it's compatible with standard `Handler`.",
          "created_at": "2025-01-06T13:06:28Z",
          "type": "comment"
        },
        {
          "author": "Delgan",
          "body": "I've improved the recipe in the documentation: [Transmitting log messages across network, processes or Gunicorn workers](https://loguru.readthedocs.io/en/latest/resources/recipes.html#transmitting-log-messages-across-network-processes-or-gunicorn-workers).\r\n\r\nWhen dealing with Guvicorn, the recommended solution is to rely on the `SocketHandler`, just like it's done by the standard `logging`.\r\n\r\nIt's a bit of boilerplate, but hopefully it's better than nothing, and it will eventually be replaced by some built-in helper (as we discussed).\r\n\r\nLet me know if this workaround needs clarification or is not working as expected. :+1: ",
          "created_at": "2025-01-16T15:12:10Z",
          "type": "comment"
        }
      ]
    },
    {
      "repository": "Delgan/loguru",
      "issue_number": 1248,
      "issue_title": "notifiers library seems to be not maintaned, maybe it's time for a replacement?",
      "issue_url": "https://github.com/Delgan/loguru/issues/1248",
      "closed_at": "2024-12-05T22:58:00Z",
      "merged_prs": [
        {
          "pr_number": 1251,
          "pr_title": "Replace \"notifiers\" (seems unmaintained) with \"apprise\" in docs",
          "pr_url": "https://github.com/Delgan/loguru/pull/1251",
          "merged_at": "2024-12-05T22:58:00Z",
          "base_commit": {
            "sha": "a372814bf79d47628e66ca9a91072f53fba032f8",
            "ref": "master"
          }
        }
      ],
      "discussion": [
        {
          "author": "ser",
          "body": "notifiers library does not work on python 3.12 and PR for it is hanging on its github for half of year - maybe it's time to swap for another solutions for loguru? \r\n\r\ni'm opening a discussion here, please comment. thanks!",
          "type": "issue"
        },
        {
          "author": "Delgan",
          "body": "Thanks for the notification.\r\n\r\nI'm open to replacing `notifiers` references in the Readme and in the documentation if you have any suggestions for an alternative modern library.",
          "created_at": "2024-12-02T13:51:02Z",
          "type": "comment"
        },
        {
          "author": "ser",
          "body": "I'm not personally related to any such project, but \r\n\r\nhttps://github.com/caronc/apprise\r\n\r\nlooks pretty promising. I would love to hear any feedback from somone using that library more extensively, though.",
          "created_at": "2024-12-02T14:07:26Z",
          "type": "comment"
        },
        {
          "author": "Delgan",
          "body": "Haha, yes actually I remember discovering the `apprise` library a few years ago: https://github.com/caronc/apprise/issues/44\r\n\r\nIt seems to have matured nicely and feels like a natural successor to `notifiers`. Time to update the docs, I guess. :)",
          "created_at": "2024-12-02T14:32:26Z",
          "type": "comment"
        },
        {
          "author": "caronc",
          "body": "If i recall, one issue with integrating Apprise and Loguru had to do with its (Apprise) internal usage of the Python `logging` library. This causes a bit of an infinite loop problem when introducing `loguru` ... Or no?\n\nMaybe the scoping of `apprise` logging namespace (within loguru) can be masked? Or maybe this isn't an issue anymore?",
          "created_at": "2024-12-04T03:09:25Z",
          "type": "comment"
        },
        {
          "author": "Delgan",
          "body": "Hey @caronc, nice to see you there. :smile: \r\nThanks for your insight. \r\n\r\n\r\n> If i recall, one issue with integrating Apprise and Loguru had to do with its (Apprise) internal usage of the Python `logging` library. This causes a bit of an infinite loop problem when introducing `loguru` ... Or no?\r\n\r\nYes, indeed. However to be fair, this is not something specific to Loguru. This can happen with standard `logging`, as soon as Apprise is used within a handler. Here's an example that causes an infinite loop:\r\n\r\n```python\r\nimport apprise\r\nimport logging\r\n\r\nWEBHOOK_ID = \"123\"\r\nWEBHOOK_TOKEN = \"abc\"\r\n\r\n\r\nclass DiscordHandler(logging.Handler):\r\n    def __init__(self):\r\n        super().__init__()\r\n        self._notifier = apprise.Apprise()\r\n        self._notifier.add(f\"discord://{WEBHOOK_ID}/{WEBHOOK_TOKEN}\")\r\n\r\n    def emit(self, record):\r\n        message = self.format(record)\r\n        self._notifier.notify(message)\r\n\r\n\r\nlogger = logging.getLogger(__name__)\r\n\r\nif __name__ == \"__main__\":\r\n    logging.basicConfig(handlers=[logging.StreamHandler(), DiscordHandler()], level=logging.INFO)\r\n    logger.info(\"Running my app\")\r\n```\r\n\r\nUsing Loguru, a comparable problam can happen, with the difference that:\r\n* It won't cause infinite loop nor deadlock, because in recent versions of `loguru` we detect such recursion and raise a `RuntimeError` if it happens.\r\n* The problem can only arise if the user has installed an [`InterceptHandler`](https://github.com/Delgan/loguru?#entirely-compatible-with-standard-logging) that bridges the gap between `loguru` and standard `logging` (by default Loguru does not receive standard logs, so no recursion is possible).\r\n\r\n> Maybe the scoping of apprise logging namespace (within loguru) can be masked? Or maybe this isn't an issue anymore?\r\n\r\nYes, the solution in this case is to filter out all logs coming from `apprise` library so that they are not processed by the Apprise handler. It's definitely something I need to include in the snippet.\r\n\r\nThe following is working fine:\r\n\r\n```python\r\nimport apprise\r\nfrom loguru import logger\r\n\r\nWEBHOOK_ID = \"123\"\r\nWEBHOOK_TOKEN = \"abc\"\r\n\r\n\r\nclass InterceptHandler(logging.Handler):\r\n    ...\r\n\r\ndef sink(message):\r\n    notifier = apprise.Apprise()\r\n    notifier.add(f\"discord://{WEBHOOK_ID}/{WEBHOOK_TOKEN}\")\r\n    notifier.notify(message)\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    logging.basicConfig(handlers=[InterceptHandler()], level=0, force=True)\r\n\r\n    logger.add(sink, level=\"INFO\", filter={\"apprise\": False})\r\n\r\n    logger.info(\"Running my app\")\r\n```\r\n\r\nWhich makes me realize that I should create a helper to automate this safety filtering regardless of the sink.",
          "created_at": "2024-12-04T12:36:30Z",
          "type": "comment"
        }
      ]
    },
    {
      "repository": "Delgan/loguru",
      "issue_number": 1231,
      "issue_title": "Loguru Log Levels Not Fully Compatible with Python Logging's LogRecord",
      "issue_url": "https://github.com/Delgan/loguru/issues/1231",
      "closed_at": "2024-11-20T15:16:51Z",
      "merged_prs": [
        {
          "pr_number": 1232,
          "pr_title": "add logging.addLevelName to add level mapping to logging, this way lo…",
          "pr_url": "https://github.com/Delgan/loguru/pull/1232",
          "merged_at": "2024-11-20T15:16:50Z",
          "base_commit": {
            "sha": "7ef5b676be31471ca9892713bb28fd9a4d39ddd6",
            "ref": "master"
          }
        }
      ],
      "discussion": [
        {
          "author": "yechielb2000",
          "body": "First of all I want to thank you for this awesome library—it's truly outstanding! You're the best ❤️\r\n\r\n### I've discovered a bug ☹️\r\nWhen using handlers in Loguru, the [`StandardSink`](https://github.com/Delgan/loguru/blob/7ef5b676be31471ca9892713bb28fd9a4d39ddd6/loguru/_simple_sinks.py#L30) allows log records to be written as `LogRecord` objects using `logging.makeRecord`. \r\n\r\nLoguru introduces a unique way to define levels with `logger.level(...)` in the Core object. However, this method of saving levels doesn’t align with how Python's `logging` library handles levels internally. Specifically, the discrepancy causes an issue when Loguru-created log records are processed by `logging`.\r\n\r\n### Steps to Reproduce\r\n1. Define custom log levels in Loguru using `logger.level(...)`.\r\n2. Use a handler to write the log record, leveraging `logging.makeRecord`.\r\n3. Observe that `levelname` is incorrectly labeled in the resulting `LogRecord` object.\r\n\r\n### Root Cause\r\nWhen creating a `LogRecord`, Python's logging library uses two fields: `levelno` and `levelname`. While Loguru's `record['level'].no` can populate `levelno`, the `levelname` field [relies](https://github.com/python/cpython/blob/main/Lib/logging/__init__.py#L328-L329) on logging's `getLevelName` function. Loguru stores level definitions in its Core object, which is incompatible with logging's method that relies on [two dictionaries](https://github.com/python/cpython/blob/a1c57bcfd2bcbc55ff858407e09c1d8d8cee44e6/Lib/logging/__init__.py#L98-L124) to store level names.\r\n\r\nConsequently, when Loguru log levels aren’t added to `logging`'s internal structures, `getLevelName` returns a default string, e.g., \"Level {level_number}\", since it can't find the corresponding name.\r\n\r\n### Suggested Solution\r\nTo improve compatibility, consider calling [`logging.addLevelName`](https://github.com/python/cpython/blob/a1c57bcfd2bcbc55ff858407e09c1d8d8cee44e6/Lib/logging/__init__.py#L156) to register Loguru levels when adding a new level. This way, `getLevelName` will find the custom levels, and `LogRecord` will accurately reflect both `levelno` and `levelname`.     \r\nThis solution isn’t perfect, but it will do the job until a way to pass the core parameter into StandardSink is available.",
          "type": "issue"
        },
        {
          "author": "Delgan",
          "body": "Hey @yechielb2000.\r\n\r\nThank you for this very descriptive ticket and for the time you took to open a pull request.\r\n\r\nIf I'm not mistaken, this problem only appears when using a custom [`logging.Formatter()`](https://docs.python.org/3/library/logging.html#logging.Formatter). That is, this code works as expected:\r\n\r\n```python\r\nfrom loguru import logger\r\nimport logging\r\n\r\nlogger.remove()\r\n\r\nstandard_handler = logging.StreamHandler()\r\n\r\nlogger.add(standard_handler, format=\"{level.name} | {level.no} | {message}\")\r\n\r\nlogger.success(\"This is a success message\")\r\n# => \"SUCCESS | 25 | This is a success message\"\r\n```\r\n\r\nBut not this one:\r\n\r\n```python\r\nfrom loguru import logger\r\nimport logging\r\n\r\nlogger.remove()\r\n\r\nstandard_formatter = logging.Formatter(\"%(levelname)s | %(levelno)d | %(message)s\")\r\nstandard_handler = logging.StreamHandler()\r\nstandard_handler.setFormatter(standard_formatter)\r\n\r\nlogger.add(standard_handler, format=\"{message}\")\r\n\r\nlogger.success(\"This is a success message\")\r\n# => \"Level 25 | 25 | This is a success message\"\r\n```\r\n\r\nI agree that is a surprising behavior. You're right that Loguru doesn't call `logging.addLevelName()`, and that's what's causing the problem demonstrated above. However, this is kind of _by design_.\r\n\r\nBasically, I think Loguru should not directly interfere with the standard `logging` library, and in particular should not mutate any global state such as the level register.\r\n\r\nYou'll also notice that `loguru` and `logging` levels are not handled in the same way and are not fully compatible. More specifically, Loguru does not maintain a \"severity to name\" mapping, contrary to the standard library.\r\n\r\nFor these reasons, I would prefer to encourage the users to call `logging.addLevelName()` explicitly, rather than this call being implicitly made by Loguru. Surely, this should be added to the documentation.\r\n\r\nThat being said, I realize there exists another solution that do not require to call `addLevelName()`. Maybe we could simply update the [`LogRecord`](https://docs.python.org/3/library/logging.html#logging.LogRecord) instance created, and basically change the `levelname` attribute of the standard `record`: https://github.com/Delgan/loguru/blob/7ef5b676be31471ca9892713bb28fd9a4d39ddd6/loguru/_simple_sinks.py#L38-L48\r\n\r\nI have to make sure it wouldn't cause any unwanted side effects, but it sounds like an acceptable workaround.\r\n",
          "created_at": "2024-11-17T21:42:28Z",
          "type": "comment"
        },
        {
          "author": "yechielb2000",
          "body": "Thank you for your feedback! I agree that my solution might not be the most optimal, and I appreciate any alternative suggestions you may have. Your idea sounds better, I will also try to find a way to update it afterwards.",
          "created_at": "2024-11-18T20:07:09Z",
          "type": "comment"
        },
        {
          "author": "yechielb2000",
          "body": "If I’m not mistaken, the root cause of this issue lies in the `write` function used by `_sink` in the handler, specifically when it's called from the `StandardSink` object. I observed that handlers invoking the write function of `StreamSink` correctly log the level name as expected.\r\n\r\nThe issue appears to stem from the use of the original makeRecord method from the logging module (`logging.getLogger().makeRecord()`), which seems to interfere with proper level name logging.",
          "created_at": "2024-11-19T18:03:14Z",
          "type": "comment"
        }
      ]
    },
    {
      "repository": "Delgan/loguru",
      "issue_number": 1208,
      "issue_title": "Use extra keys for TypedDict",
      "issue_url": "https://github.com/Delgan/loguru/issues/1208",
      "closed_at": "2024-11-23T18:57:16Z",
      "merged_prs": [
        {
          "pr_number": 1238,
          "pr_title": "Improve type hints of handlers (in \"add()\" and \"configure()\")",
          "pr_url": "https://github.com/Delgan/loguru/pull/1238",
          "merged_at": "2024-11-23T18:57:15Z",
          "base_commit": {
            "sha": "ed0daf8b6368c810fd53a3862fce05384cd15f6e",
            "ref": "master"
          }
        }
      ],
      "discussion": [
        {
          "author": "reneleonhardt",
          "body": "https://github.com/Delgan/loguru/blob/fa3746fe8ce354e8e32e444b2bc7e4221a88ac86/loguru/__init__.pyi#L215\r\n\r\nIt seems mypy 1.9.0 implemented a fix https://github.com/python/mypy/pull/14225, can `_HandlerConfig` be made actually usable now? 😅",
          "type": "issue"
        },
        {
          "author": "Delgan",
          "body": "I'll try again when I have some time, thanks for the notification. :)",
          "created_at": "2024-09-22T17:14:36Z",
          "type": "comment"
        }
      ]
    },
    {
      "repository": "Delgan/loguru",
      "issue_number": 1178,
      "issue_title": "Support the implementation of https://no-color.org/",
      "issue_url": "https://github.com/Delgan/loguru/issues/1178",
      "closed_at": "2025-02-14T18:42:28Z",
      "merged_prs": [
        {
          "pr_number": 1299,
          "pr_title": "Support the implementation of \"NO_COLOR\" standard",
          "pr_url": "https://github.com/Delgan/loguru/pull/1299",
          "merged_at": "2025-02-14T18:42:27Z",
          "base_commit": {
            "sha": "e17479bd0701e8fc0b26981339540599dc224d11",
            "ref": "master"
          }
        }
      ],
      "discussion": [
        {
          "author": "jensenbox",
          "body": "It would be awesome to support the detection of the NO_COLOR environment variable and act according to the specification.",
          "type": "issue"
        },
        {
          "author": "Delgan",
          "body": "Thanks for the suggestion. I don't see any strong reason not to support this standard. It's implemented now. :+1: \r\n\r\nNote that this only applies when `colorize=None`, i.e. the default. Colors will continue to appear if `colorize=True` is specified by the developers of the application.",
          "created_at": "2025-02-14T18:42:34Z",
          "type": "comment"
        }
      ]
    },
    {
      "repository": "Delgan/loguru",
      "issue_number": 1174,
      "issue_title": "Allow for combining file rotation triggers by accepting a list of rotation conditions",
      "issue_url": "https://github.com/Delgan/loguru/issues/1174",
      "closed_at": "2025-01-17T17:06:20Z",
      "merged_prs": [
        {
          "pr_number": 1175,
          "pr_title": "Allow list of rotation conditions in file rotation logic",
          "pr_url": "https://github.com/Delgan/loguru/pull/1175",
          "merged_at": "2025-01-17T17:06:04Z",
          "base_commit": {
            "sha": "43baa14186249d0ca1ac7800b5271cca511d962c",
            "ref": "master"
          }
        }
      ],
      "discussion": [
        {
          "author": "CollinHeist",
          "body": "## Background\r\nI found myself (and [others](https://github.com/Delgan/loguru/issues/241)) wanting to rotate log files based on a combination of two already-implemented conditions (file size and interval in my case). I see there is existing functionality to allow arbitrary logic in the rotation by passing in a generic `callable`, however that would have required me to re-implement much of loguru's existing rotator functionality (or import code from within the loguru source).\r\n\r\nA cleaner approach would be to permit the specification of lists (or generic iterables) in the `rotation` argument, and then have loguru parse each element into a combined rotation rotation logic where a file will be rotated if _any_ of the rotators evaluate to true.\r\n\r\n## Example\r\n\r\n```py\r\nfrom loguru import logger\r\n\r\nlogger.configure(\r\n  handlers=[\r\n    dict(\r\n      sink='file.log',\r\n      rotation=['12h', '10 MB'],\r\n    )\r\n  ]\r\n)\r\n```\r\nWould rotate log files every 12 hours _or_ every 10 Megabytes. This is much easier for the end-user than creating a custom callable of the same logic.\r\n\r\nI've submitted this [PR](https://github.com/Delgan/loguru/pull/1175)",
          "type": "issue"
        },
        {
          "author": "Delgan",
          "body": "Fixed by #1175.",
          "created_at": "2025-01-17T17:06:20Z",
          "type": "comment"
        }
      ]
    },
    {
      "repository": "Delgan/loguru",
      "issue_number": 1083,
      "issue_title": "Add unit tests for traceback formatting of RecursionError",
      "issue_url": "https://github.com/Delgan/loguru/issues/1083",
      "closed_at": "2024-11-24T13:04:08Z",
      "merged_prs": [
        {
          "pr_number": 1079,
          "pr_title": "Testing against Python 3.12 (non-dev) and Python 3.13 (dev)",
          "pr_url": "https://github.com/Delgan/loguru/pull/1079",
          "merged_at": "2024-02-17T11:14:23Z",
          "base_commit": {
            "sha": "b80d5d17375fd78f92a49e88754e647dc0397ab4",
            "ref": "master"
          }
        },
        {
          "pr_number": 1239,
          "pr_title": "Fix repeated line not detected during exception formatting",
          "pr_url": "https://github.com/Delgan/loguru/pull/1239",
          "merged_at": "2024-11-24T13:04:07Z",
          "base_commit": {
            "sha": "65fe4a8db9a8f297ae3648f51b5e3050b30945a9",
            "ref": "master"
          }
        }
      ],
      "discussion": [
        {
          "author": "Delgan",
          "body": "For example, the following snippet:\r\n\r\n```python\r\nfrom loguru import logger\r\n\r\ndef rec():\r\n    rec()\r\n\r\ntry:\r\n    rec()\r\nexcept Exception:\r\n    logger.exception(\"Oups\")\r\n```\r\n\r\nShould produce the following logs:\r\n\r\n```txt\r\n2024-02-17 12:06:00.577 | ERROR    | __main__:<module>:9 - Oups\r\nTraceback (most recent call last):\r\n\r\n> File \"/home/delgan/Code/loguru/script.py\", line 7, in <module>\r\n    rec()\r\n    └ <function rec at 0x7a13f1314720>\r\n\r\n  File \"/home/delgan/Code/loguru/script.py\", line 4, in rec\r\n    rec()\r\n    └ <function rec at 0x7a13f1314720>\r\n\r\n  File \"/home/delgan/Code/loguru/script.py\", line 4, in rec\r\n    rec()\r\n    └ <function rec at 0x7a13f1314720>\r\n\r\n  File \"/home/delgan/Code/loguru/script.py\", line 4, in rec\r\n    rec()\r\n    └ <function rec at 0x7a13f1314720>\r\n  [Previous line repeated 996 more times]\r\n\r\nRecursionError: maximum recursion depth exceeded\r\n```\r\n\r\nNote the \"[Previous line repeated 996 more times]\".\r\n",
          "type": "issue"
        }
      ]
    },
    {
      "repository": "Delgan/loguru",
      "issue_number": 1072,
      "issue_title": "Help designing an integration with `logot`",
      "issue_url": "https://github.com/Delgan/loguru/issues/1072",
      "closed_at": "2024-01-27T15:00:52Z",
      "merged_prs": [
        {
          "pr_number": 1085,
          "pr_title": "Linking to `logot` from docs",
          "pr_url": "https://github.com/Delgan/loguru/pull/1085",
          "merged_at": "2024-03-02T09:27:14Z",
          "base_commit": {
            "sha": "9311c763bb3528f87c3c5a13a25ec7387f2cc545",
            "ref": "master"
          }
        }
      ],
      "discussion": [
        {
          "author": "etianen",
          "body": "I've recently released a 0.1.0 preview of a log testing library called [logot](https://github.com/etianen/logot). It provides a nice fixture for testing [complex log patterns](https://logot.readthedocs.io/latest/logged.html), which I've found very useful when testing multithreaded and async codebases.\r\n\r\nI'd like to provide a `loguru` integration. 🤗Since I'm not hugely familiar with `loguru`, I was hoping you'd have some advice on what a good integration would look like.\r\n\r\nThere are a couple of sticking points that I'd like to nail before committing to a v1.0.0 API.\r\n\r\n# Log capture\r\n\r\nCurrently, stdlib logging capture is enabled with a [context manager method](https://logot.readthedocs.io/latest/api.html#logot.Logot.capturing):\r\n\r\n``` py\r\nfrom logot import Logot\r\n\r\nwith Logot().capturing() as logot:\r\n    pass\r\n```\r\n\r\nSince the `loguru` integration would be an optional `extra`, a freestanding context manager could be provided like this:\r\n\r\n``` py\r\nfrom logot.contrib.loguru import capturing\r\n\r\nwith capturing(Logot()) as logot:\r\n   ...\r\n```\r\n\r\nIt's a bit awkward having a freestanding context manager for 3rd party integrations, so an alternative would be a capturing backend approach:\r\n\r\n``` py\r\nfrom logot.contrib.loguru import LoguruCapture\r\n\r\nwith Logot().capturing(LoguruCapture):\r\n   pass\r\n```\r\n\r\nAny arguments given to `capturing` would be propagated to the `LoguruCapture` constructor. This would then unify capture between stdlib logging and `loguru` logging. The default capture backend would be the stdlib capture, and an `@overload` would ensure good typing. 💪\r\n\r\nThe alternative is a whole `Logot` subclass just for `loguru`, which seems heavyweight and unpleasant. 🤮\r\n\r\n## Log message matching\r\n\r\nRather than awkward regexes, `logot` lets you [match log messages](https://logot.readthedocs.io/latest/match.html) with `%` placeholders. The hope here is that it's much cleaner and more intuitive to match using the syntax used for log message placeholders. (Similar to how `printf` and `scanf` pair nicely).\r\n\r\n``` py\r\nfrom logot import logged\r\n\r\nlogot.wait_for(logged.info(\"Hello %s\"))\r\n```\r\n\r\nBut `loguru` uses lovely `.format()`-style placeholders!\r\n\r\nMaybe it's fine to just use `%` placeholders in `loguru` tests? 🤷\r\n\r\nBut it might be nice to support `.format()`-style placeholders like this:\r\n\r\n``` py\r\nfrom logot.contrib.loguru import logged\r\n\r\nlogot.wait_for(logged.info(\"Hello {}\"))\r\n```\r\n\r\nSupport for matching structured data would also be possible:\r\n\r\n``` py\r\nlogot.wait_for(\r\n    logged.bind(foo=\"bar\").info(\"Hello {}\")\r\n)\r\n```\r\n\r\n## Advice appreciated! 🙏\r\n\r\nThanks for reading this far!\r\n\r\nI'm inclined to go with a `LoguruCapture` backend combined with `.format()`-style message matching. That would give first-class support for `loguru` without compromising or complicating the `stdlib` interface.\r\n\r\nHowever, I'm not really familiar with the `loguru` community and ecosystem! Maybe this is unappealing? Maybe it's already been done! 😬\r\n\r\nHope you have a nice weekend! ❤️",
          "type": "issue"
        },
        {
          "author": "Delgan",
          "body": "Hey @etianen.\r\n\r\nGreat project, and thanks for considering integration with Loguru! :+1: \r\n\r\nSomewhat related, here is documentation explaining how to capture Loguru logs during tests:\r\n* [Replacing `assertLogs()` method from `unittest` library](https://loguru.readthedocs.io/en/latest/resources/migration.html#replacing-assertlogs-method-from-unittest-library)\r\n* [Replacing `caplog` fixture from `pytest` library](https://loguru.readthedocs.io/en/latest/resources/migration.html#replacing-caplog-fixture-from-pytest-library).\r\n\r\nAs per the above, that means you could have your default `logged` API directly compatible with Loguru (although a Loguru-specific handler would still need to be installed). Now, as you suggested, you could also have `logged` that offers a tailored API for Loguru.\r\n\r\nTo be honest, I'm unsure whether `%s` or `{}` would be preferable for parsing Loguru logs. As you mentioned, using `%s` would likely resonate well with C developers due to its resemblance to `scanf()` syntax. Additionally, it would maintain a consistent API of your library across standard `logging` and `loguru`. Conversely, opting for `{}` aligns better with Loguru's format. It would probably make the `logged` usage more straightforward, especially when dealing with parsing f-strings.\r\n\r\nBoth approaches look fine to me. Not sure I'm of great help here by saying that. :grin: \r\n\r\nIn any case, that certainly won't be \"unappealing\". I like the idea of using placeholders to replace regex patterns (whether it uses `%` or `{}` syntax).",
          "created_at": "2024-01-27T13:42:52Z",
          "type": "comment"
        },
        {
          "author": "etianen",
          "body": "Thanks for getting back so quickly!\r\n\r\nI'm surprised (but pleased) you don't see the `%s` message match syntax as a barrier to adoption. I'll probably leave this out of the initial integration and leave it in the issue tracker as a possible enhancement depending on the popularity of the library (and the `loguru` integration!).\r\n\r\nThanks for those docs links - I'd already read them to make sure a `loguru` integration was actually possible, and it was nice to see that it would be easy via the already-implemented logging handler.\r\n\r\nI'm happy to close this now, as you've answered all my questions and I'm now enthused about the integration! 🚀  I'll post a small update here once the integration is in place to see if you have any thoughts.",
          "created_at": "2024-01-27T15:00:52Z",
          "type": "comment"
        },
        {
          "author": "etianen",
          "body": "It finally landed! https://logot.readthedocs.io/latest/integrations/loguru.html 🚀 \r\n\r\nThe `loguru` integration was far more straightforward than stdlib `logging`, with no footguns. I found that pretty surprising, since I've used `logging` for a very long time and only really dabbled with `loguru`. ❤️ \r\n\r\nFor comparison:\r\n\r\n- [`logging` integration](https://github.com/etianen/logot/blob/main/logot/_logging.py) 🥵 \r\n- [`loguru` integration](https://github.com/etianen/logot/blob/main/logot/_loguru.py) 😊 \r\n\r\nI'm hoping to promote `logot` as a way to test logs irrespective of testing framework, logging framework (or async framework!). I'm hoping `logot` can be a more powerful `caplog` / `assertLogs` fixture that doesn't care if you're using `logging`, `loguru`, `structlog`, or anything else.\r\n\r\nWould you accept a PR linking to `logot` from your _help and guides_ section? Nothing huge, and I'd obviously take your guidance on where to put it / how to phrase it 🙏 (and I understand completely if you'd rather not!).",
          "created_at": "2024-02-10T00:04:57Z",
          "type": "comment"
        },
        {
          "author": "Delgan",
          "body": "Congrats on the release, @etianen! I'm glad you found integration with Loguru easy!\r\n\r\nYour library would definitely fit well in the Loguru documentation. I'd be happy to accept a PR. ;)\r\n\r\nThis could be covered in one of the two sections I linked to above, or we could create a new section in [Code Snippets and Recipes for Loguru](https://loguru.readthedocs.io/en/latest/resources/recipes.html) to explain how to test logging. If the latter, we should probably first give general guidance, possibly by pointing to the other sections mentioned earlier, then suggest usage of specialized and more convenient libraries such as Logot.\r\n\r\nI have no particular preference. Choose what you think is best, I'm confident it will be great. :+1: \r\n",
          "created_at": "2024-02-11T09:28:00Z",
          "type": "comment"
        }
      ]
    },
    {
      "repository": "Delgan/loguru",
      "issue_number": 1044,
      "issue_title": "Loguru infinite recursion traceback loop",
      "issue_url": "https://github.com/Delgan/loguru/issues/1044",
      "closed_at": "2024-11-23T11:07:48Z",
      "merged_prs": [
        {
          "pr_number": 1237,
          "pr_title": "Fix possible infinite recursion with \"__repr__\" and \"logger.catch()\"",
          "pr_url": "https://github.com/Delgan/loguru/pull/1237",
          "merged_at": "2024-11-23T11:07:47Z",
          "base_commit": {
            "sha": "63a729a5ba8137b944ae43788de7ee860ba90431",
            "ref": "master"
          }
        }
      ],
      "discussion": [
        {
          "author": "mpenning",
          "body": "- [ciscoconfparse2](https://github.com/mpenning/ciscoconfparse2) uses loguru in a [pretty simple](https://github.com/mpenning/ciscoconfparse2/issues/1) manner, decorating methods with `@logger.catch(reraise=True)`\r\n\r\nMy problem is if I hit a bug in certain methods, I get an infinite traceback from loguru.  I love loguru when it works, but digging into the infinite recursion is a serious drag on my development because even with a multi-thousand-line scrollback buffer, I still can't hit control-c fast enough to interrupt the infinite loop of loguru messages and find the *real* cause of the problem (i.e. I have two problems, loguru inifinte recursion and the ciscoconfparse2 bug that caused it).\r\n\r\nIs there a way to get loguru to stop printing tracebacks in an infinite loop?\r\n\r\nYou can reproduce the infinite recursion loop as follows:\r\n\r\n- Install `loguru==0.7.2`\r\n- git clone ciscoconfparse2 to my local system\r\n- `cd ciscoconfparse2`\r\n- checkout hash [`1a7b88d72c5a86a673ba8d4ed18316036c65fded`](https://github.com/mpenning/ciscoconfparse2/commit/1a7b88d72c5a86a673ba8d4ed18316036c65fded)\r\n- run this script (python versions don't seem to matter... I have seen this problem over and over for months with a variety of python versions):\r\n\r\n```python\r\nfrom loguru import logger\r\n\r\nfrom ciscoconfparse2 import CiscoConParse\r\n\r\nparse = CiscoConfParse(\"tests/fixtures/configs/sample_01.junos\", syntax=\"junos\", factory=False)\r\nprint(parse)\r\nfor obj in parse.objs:\r\n    print(obj)\r\n```",
          "type": "issue"
        },
        {
          "author": "Delgan",
          "body": "Hi @mpenning.\r\n\r\nSorry you're experiencing difficulties with Loguru, and thanks for the reproducible example. It boils down to the following:\r\n\r\n```python\r\nfrom loguru import logger\r\n\r\n\r\nclass Foo:\r\n    @logger.catch(reraise=True)\r\n    def __repr__(self):\r\n        raise ValueError(\"Something went wrong\")\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    foo = Foo()\r\n    print(foo)\r\n```\r\n\r\nIt's definitely a problem with `diagnose=True` which causes infinite recursion if the exception is raised in `__repr__`, since `v` can't be printed:  https://github.com/Delgan/loguru/blob/dcf42d962567723c0195bb8b2bb6fd764ecf41ae/loguru/_better_exceptions.py#L331-L335\r\n\r\nI'll try to implement a fix. In the meantime, I advise to use `diagnose=False` or remove `@logger.catch()` decorator from `__repr__()` methods.\r\n",
          "created_at": "2023-12-22T17:40:24Z",
          "type": "comment"
        }
      ]
    },
    {
      "repository": "Delgan/loguru",
      "issue_number": 988,
      "issue_title": "How to escape `\\` before tag",
      "issue_url": "https://github.com/Delgan/loguru/issues/988",
      "closed_at": "2024-11-21T22:15:42Z",
      "merged_prs": [
        {
          "pr_number": 1236,
          "pr_title": "Fix inability to display '\\' before color markups",
          "pr_url": "https://github.com/Delgan/loguru/pull/1236",
          "merged_at": "2024-11-21T22:15:40Z",
          "base_commit": {
            "sha": "37f44eda5555ffed3b4c581925650fb939e55b94",
            "ref": "master"
          }
        }
      ],
      "discussion": [
        {
          "author": "yanyongyu",
          "body": "In my server application, i'm using loguru logger to log messages from client. But in some case, the log failed with the error: https://github.com/nonebot/adapter-onebot/issues/74 `ValueError: Closing tag \"</le>\" has no corresponding opening tag`\r\n\r\nHere is the example of the case:\r\n\r\n```python\r\nmessage = r\"\\\\<le>test</le>\"\r\nlogger.opt(colors=True).info(message)\r\n```\r\n\r\nIt seems double `\\` cannot escape the escape before tag according to the ansi parser. how can i escape this message currectly?\r\n\r\nhttps://github.com/Delgan/loguru/blob/e1f48c91cf2646b6429020f784881cd200663114/loguru/_colorizer.py#L223-L232",
          "type": "issue"
        },
        {
          "author": "AlTosterino",
          "body": "Hey,\r\n\r\nHmm, are you able to add space after `\\\\`? I just checked and adding a space is fixing the issue you are facing. Note that this is just  workaround.\r\n\r\n```python\r\nfrom loguru import logger\r\n\r\nif __name__ == \"__main__\":\r\n    logger.remove()\r\n    logger.add(sys.stdout)\r\n    logger.opt(colors=True).info(\"\\\\ <le>test</le>\")\r\n    # 2023-09-19 17:40:56.966 | INFO     | __main__:<module>:8 - \\ test\r\n```",
          "created_at": "2023-09-19T15:41:35Z",
          "type": "comment"
        },
        {
          "author": "Delgan",
          "body": "You need to escape both opening and closing tags.\r\n\r\n```python\r\nmessage = \"\\<le>test\\</le>\"\r\nlogger.opt(colors=True).info(message)\r\n# Output: \"<le>test</le>\"\r\n```\r\n\r\nNote that you shouldn't generally combine `colors=True` with messages that may contain arbitrary data. It's better to pass them as arguments, to avoid false positives of this type.\r\n\r\n```python\r\nlogger.opt(colors=True).info(\"<green>Parsed data:</green> <blue>{}</blue>\", data)\r\n```",
          "created_at": "2023-09-19T16:43:39Z",
          "type": "comment"
        },
        {
          "author": "yanyongyu",
          "body": "The message is a markup text with a `\\` before tag, the `<le>test</le>` is highlighted and should not be escaped.\r\n\r\nExpected: TEXT `\\`, OPEN tag `<le>`, TEXT `test`, CLOSING tag `</le>`",
          "created_at": "2023-09-19T16:49:53Z",
          "type": "comment"
        },
        {
          "author": "Delgan",
          "body": "In this case, you need to escape the two tags in addition to the `\\` already present. \r\n\r\n```python\r\nmessage = r\"\\\\<le>test\\</le>\"\r\nlogger.opt(colors=True).info(message)\r\n```\r\n\r\nLoguru uses tags such as `<le>` to colorize the message. To avoid the tag being interpreted as a colorization command, it must be preceded by `\\`. In such case, `\"\\<le>\"` is converted to `\"<le>\"`. Because you want to preserve the `\\` from your original message, you need two `\\`: the one to escape colors, and the one from your original message.",
          "created_at": "2023-09-19T17:02:12Z",
          "type": "comment"
        },
        {
          "author": "yanyongyu",
          "body": "May be i should provide detailed info about the case.:joy:\n\nWe have a tokenizer to parse the input string, and highlight special tokens. Here is an example with detailed steps:\n\n1. Input: `This is a message with [special_token]`\n2. tokenize result: `This a message with `, `[special_token]`\n3. output: `This a message with <le>[special_token]</le>`\n\nOnce there is a `\\` before special token, the highlight is failed to display:\n\n1. Input: `This is a message with \\[special_token]`\n2. tokenize result: `This a message with \\`, `[special_token]`\n3. output: `This a message with \\<le>[special_token]</le>`\n\nThe output is not a valid loguru markup message.",
          "created_at": "2023-09-19T17:12:20Z",
          "type": "comment"
        },
        {
          "author": "Delgan",
          "body": "Thanks for the explanation. I'm sorry, this is indeed a bug. It's not possible to display a literal \"\\\\\" immediately before a text to be colored. Thanks for the report.\r\n\r\nThe workaround provided by @AlTosterino seems to be the simplest solution for now.",
          "created_at": "2023-09-19T17:44:38Z",
          "type": "comment"
        },
        {
          "author": "Delgan",
          "body": "Fixed on `master` branch. It is now possible to use double backslash to display a literal `\\` without escaping the color markup.\r\n\r\nFor example, the following code will now print `Message: \\test` with `test` being blue colored:\r\n\r\n```python\r\nfrom loguru import logger\r\n\r\nlogger.opt(colors=True).info(r\"Message: \\\\<le>test</le>\")\r\n```",
          "created_at": "2024-11-21T22:15:55Z",
          "type": "comment"
        }
      ]
    },
    {
      "repository": "Delgan/loguru",
      "issue_number": 980,
      "issue_title": "Exceptions notes (PEP 678 since Python 3.11) are not properly formatted",
      "issue_url": "https://github.com/Delgan/loguru/issues/980",
      "closed_at": "2023-09-09T15:07:31Z",
      "merged_prs": [
        {
          "pr_number": 981,
          "pr_title": "Fix formatting of notes possible added to an Exception",
          "pr_url": "https://github.com/Delgan/loguru/pull/981",
          "merged_at": "2023-09-09T15:07:30Z",
          "base_commit": {
            "sha": "91351df436a14279fc226b70b126fb869152fc1b",
            "ref": "master"
          }
        }
      ],
      "discussion": [
        {
          "author": "Delgan",
          "body": "The following code:\r\n\r\n```python\r\nimport sys\r\nfrom loguru import logger\r\n\r\n\r\n@logger.catch\r\ndef main():\r\n    try:\r\n        raise ValueError(\"Error\")\r\n    except Exception as e:\r\n        e.add_note(\"Note 1\")\r\n        e.add_note(\"Note 2\")\r\n        raise\r\n\r\n\r\nlogger.remove()\r\nlogger.add(sys.stderr, diagnose=True, backtrace=False, colorize=True)\r\n\r\nmain()\r\n```\r\nCauses the `ValueError` to be formatted as follows:\r\n\r\n```txt\r\nTraceback (most recent call last):\r\n\r\n  File \"/home/delgan/test.py\", line 18, in <module>\r\n    main()\r\n    └ <function main at 0x7f77a3142020>\r\n\r\n  File \"/home/delgan/test.py\", line 8, in main\r\n    raise ValueError(\"Error\")\r\nValueError: Error\r\nNote 1\r\n\r\nNote 2\r\n```\r\n\r\nExpected output is more like this:\r\n\r\n```txt\r\nTraceback (most recent call last):\r\n\r\n  File \"/home/delgan/test.py\", line 18, in <module>\r\n    main()\r\n    └ <function main at 0x7f77a3142020>\r\n\r\n  File \"/home/delgan/test.py\", line 8, in main\r\n    raise ValueError(\"Error\")\r\n\r\nValueError: Error\r\nNote 1\r\nNote 2\r\n```\r\n\r\nAlso the ansi colors are wrong, as currently \"Note 2\" is highlighted instead of \"ValueError: Error\".",
          "type": "issue"
        }
      ]
    },
    {
      "repository": "Delgan/loguru",
      "issue_number": 974,
      "issue_title": "RuntimeError: context has already been set. When I use both Sanic and loguru",
      "issue_url": "https://github.com/Delgan/loguru/issues/974",
      "closed_at": "2023-09-11T14:19:42Z",
      "merged_prs": [
        {
          "pr_number": 985,
          "pr_title": "Fix \"RuntimeError\" using \"set_start_method()\" after \"logger\" import",
          "pr_url": "https://github.com/Delgan/loguru/pull/985",
          "merged_at": "2023-09-11T14:19:41Z",
          "base_commit": {
            "sha": "14fa062bdb4388d77250b1f7224024fea3c84bbf",
            "ref": "master"
          }
        }
      ],
      "discussion": [
        {
          "author": "ChrisYP",
          "body": "```python\r\nfrom sanic import Sanic, text\r\nfrom loguru import logger\r\n\r\napp = Sanic(__name__)\r\n\r\n\r\n@app.get('/')\r\nasync def run_shell(request):\r\n    return text('Hello world!')\r\n\r\n\r\nif __name__ == '__main__':\r\n    app.run(host='0.0.0.0', port=6666, debug=True, access_log=True, workers=2)\r\n```\r\npython version:3.8\r\nName: sanic\r\nVersion: 23.6.0\r\nName: loguru\r\nVersion: 0.7.1\r\n\r\nThe above code thorws an error:\r\n    raise RuntimeError('context has already been set')\r\nRuntimeError: context has already been set ",
          "type": "issue"
        },
        {
          "author": "Delgan",
          "body": "Thanks for the report and sorry for the inconvenience.\r\n\r\nFor `multiprocessing` purposes, Loguru v0.7.1 added a new `context` argument and uses [`multiprocessing.get_context()`](https://docs.python.org/3/library/multiprocessing.html#multiprocessing.get_context) by default. This is supposed to have the same effect as using `multiprocessing` directly, but makes it easier to switch from one context to another (eg. from `\"fork\"` to `\"spawn\"` on Linux).\r\nUnfortunately, I didn't notice that calling `multiprocessing.get_context()` had the side effect of also **setting** the default context globally... And once a context is set, it can't be changed, hence the error you're getting.\r\n\r\nI'll implement a fix as soon as possible. In the meantime, the only workaround I can think of is to disable the default handler of Loguru through `os.environ[\"LOGURU_AUTOINI\"]` and re-add it with a context explicitly:\r\n\r\n```python\r\nimport os\r\nimport sys\r\n\r\nos.environ[\"LOGURU_AUTOINIT\"] = \"0\"\r\n\r\nfrom sanic import Sanic, text\r\nfrom loguru import logger\r\n\r\nlogger.add(sys.stderr, context=\"spawn\")  # Assuming Sanic tries to set the start method to \"spawn\".\r\n\r\napp = Sanic(__name__)\r\n\r\n\r\n@app.get(\"/\")\r\nasync def run_shell(request):\r\n    return text(\"Hello world!\")\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    app.run(host=\"0.0.0.0\", port=6666, debug=True, access_log=True, workers=2)\r\n```",
          "created_at": "2023-09-07T08:16:19Z",
          "type": "comment"
        }
      ]
    },
    {
      "repository": "Delgan/loguru",
      "issue_number": 968,
      "issue_title": "Resolve the new BXXX that appeared when switching to ruff",
      "issue_url": "https://github.com/Delgan/loguru/issues/968",
      "closed_at": "2023-09-03T07:44:48Z",
      "merged_prs": [
        {
          "pr_number": 970,
          "pr_title": "Remove ruff config excludes",
          "pr_url": "https://github.com/Delgan/loguru/pull/970",
          "merged_at": "2023-09-03T07:44:47Z",
          "base_commit": {
            "sha": "f3392829926b335283b0039bb63f785bb1cf214d",
            "ref": "master"
          }
        }
      ],
      "discussion": [
        {
          "author": "hillairet",
          "body": "As discussed in [this PR](https://github.com/Delgan/loguru/pull/955#issuecomment-1694694943) a few linting and validation errors appeared when we switched from flake8 to ruff.\r\nTo get the PR merged, global exclusions of the errors were added to the ruff configuration.\r\nInstead we should deal with each error one by one by fixing the issue or adding a `noqa` wherever it's justified to do so.\r\nFor example some (all?) B018 complains about `1 / 0` being a useless expression. But it's part of a test checking that the exception is handled correctly so `noqa` is justified.",
          "type": "issue"
        },
        {
          "author": "hillairet",
          "body": "@Delgan Question about the errors in `loguru/__init__.pyi`.\r\nWhy did you use `__self` rather than `self` for some methods?\r\nYou ignored this error in `_logger.py` so I'll ignore line by line in `loguru/__init__.pyi` as well. The question is because I'm curious.  :wink: ",
          "created_at": "2023-09-02T13:50:12Z",
          "type": "comment"
        },
        {
          "author": "Delgan",
          "body": "Hi @hillairet. :)\r\n\r\nI use `__self` in `loguru/__init__.pyi` to match the signature of the `Logger` methods defined in `_logger.py`.  These class methods are implemented using `__self` instead of the typical `self` to mitigate the risk of conflicts arising from arbitrary keys employed in `**kwargs` arguments.\r\n\r\nIn other words, it makes it possible to do the following:\r\n\r\n```python\r\nself = \"delgan\"\r\nlogger.info(\"I'm {self}\", self=self)\r\n```\r\n\r\nOtherwise, this would raise an exception:\r\n\r\n```\r\nTypeError: Logger.info() got multiple values for argument 'self'\r\n```\r\n\r\nThis also applies to the `__message` parameter.\r\n\r\nIdeally, we could use [PEP 570 – Python Positional-Only Parameters](https://peps.python.org/pep-0570/) which is designed for such cases. However, this is only available for Python 3.8, and Loguru supports older versions of Python that are not compatible with this new syntax. Therefore, I prefixed the parameters with \"__\" as it's a convention used by some libraries to signal they are positional-only.\r\n",
          "created_at": "2023-09-02T14:15:46Z",
          "type": "comment"
        }
      ]
    },
    {
      "repository": "Delgan/loguru",
      "issue_number": 961,
      "issue_title": "Seconds and microseconds are missing from the formatted timezone offset",
      "issue_url": "https://github.com/Delgan/loguru/issues/961",
      "closed_at": "2023-08-31T16:44:04Z",
      "merged_prs": [
        {
          "pr_number": 962,
          "pr_title": "Fix missing seconds when formatting timezone offset",
          "pr_url": "https://github.com/Delgan/loguru/pull/962",
          "merged_at": "2023-08-31T16:44:03Z",
          "base_commit": {
            "sha": "2465fca6ca2e52b59845371d3d230367d5b45725",
            "ref": "master"
          }
        }
      ],
      "discussion": [
        {
          "author": "Delgan",
          "body": "Comparing native with Loguru formatting:\r\n\r\n```python\r\nfrom datetime import timedelta, timezone\r\nfrom loguru import logger\r\nimport sys\r\n\r\noffset = timedelta(hours=3, minutes=30, seconds=1, milliseconds=456)\r\n\r\nlogger = logger.patch(\r\n    lambda record: record.update(time=record[\"time\"].replace(tzinfo=timezone(offset)))\r\n)\r\n\r\nlogger.remove()\r\nlogger.add(sys.stderr, format=\"[Native] {time:%Y-%m-%d %H-%M-%S %z} {message}\")\r\nlogger.add(sys.stderr, format=\"[Loguru] {time:YYYY-MM-DD HH:mm:ss ZZ} {message}\")\r\nlogger.info(\"Test\")\r\n```\r\nOutput:\r\n```\r\n[Native] 2023-08-31 16-26-15 +033001.456000 Test\r\n[Loguru] 2023-08-31 16:26:15 +0330 Test\r\n```\r\n\r\nThis is likely not a significant issue in practice since there is no official timezone offset that requires accuracy down to the second. However, it's better to address this for the sake of correctness and to align with the standard library.",
          "type": "issue"
        }
      ]
    },
    {
      "repository": "Delgan/loguru",
      "issue_number": 954,
      "issue_title": "Disable LOGURU_DIAGNOSE by default - credential leak risk",
      "issue_url": "https://github.com/Delgan/loguru/issues/954",
      "closed_at": "2023-08-27T18:20:51Z",
      "merged_prs": [
        {
          "pr_number": 957,
          "pr_title": "Add note about diagnose=True being default",
          "pr_url": "https://github.com/Delgan/loguru/pull/957",
          "merged_at": "2023-08-27T18:19:58Z",
          "base_commit": {
            "sha": "d17ae011117e46365f3b68ec4eded733b8434090",
            "ref": "master"
          }
        }
      ],
      "discussion": [
        {
          "author": "aedwardstx",
          "body": "In the interest of being secure by default, `LOGURU_DIAGNOSE`(better_exceptions) should be disabled by default due to the potential for leaking credentials in logs. Per the guidance in https://github.com/Qix-/better-exceptions/issues/119#issuecomment-1024885652 better_exceptions should not be used when working with sensitive data. Per https://github.com/Delgan/loguru/blob/master/README.rst?plain=1#L242 \"Caution, may leak sensitive data in prod\". The way the readme describes enabling the feature and highlights the risk, it would be reasonable to assume that its disabled by default but this is not the case. \r\n\r\nhttps://github.com/Delgan/loguru/blob/d17ae011117e46365f3b68ec4eded733b8434090/loguru/_defaults.py#L43",
          "type": "issue"
        },
        {
          "author": "Delgan",
          "body": "Thank you for your input regarding the default value of `LOGURU_DIAGNOSE`.\r\n\r\nBalancing between ease of use and security is a crucial consideration. While the display of local variables is indeed a feature that raises security concerns, it's also a highly regarded aspect of Loguru. The library is designed with the intention of offering a seamless and user-friendly experience from the moment it's used.\r\n\r\nThe default settings in Loguru are primarily tailored for swift development iterations. However, as the software matures, it becomes imperative for developers to delve into additional aspects, such as the one you've pointed out. The documentation covers these concerns comprehensively under the section [Security considerations when using Loguru](https://loguru.readthedocs.io/en/stable/resources/recipes.html#security-considerations-when-using-loguru).\r\n\r\nIn essence, while I acknowledge the significance of enhancing security, transforming Loguru into a completely secure-by-default tool is not possible without undermining its default usability. As a result, I'm inclined to provide users with the responsibility to configure the logger to meet their specific security requirements when transitioning to production environments.",
          "created_at": "2023-08-27T15:41:57Z",
          "type": "comment"
        },
        {
          "author": "aedwardstx",
          "body": "Thank you for your response and for developing such an intuitive library! I understand your stance and it seems reasonable. Per my comment about clarity in the readme, I've submitted https://github.com/Delgan/loguru/pull/957 for your consideration. ",
          "created_at": "2023-08-27T17:12:42Z",
          "type": "comment"
        },
        {
          "author": "Delgan",
          "body": "Glad we've found a compromise. :smile: \r\n\r\nThanks for your contribution.\r\n",
          "created_at": "2023-08-27T18:20:51Z",
          "type": "comment"
        }
      ]
    },
    {
      "repository": "Delgan/loguru",
      "issue_number": 934,
      "issue_title": "True colors tags and some styles won't display on Windows 10 and above",
      "issue_url": "https://github.com/Delgan/loguru/issues/934",
      "closed_at": "2023-08-29T08:29:17Z",
      "merged_prs": [
        {
          "pr_number": 935,
          "pr_title": "Windows 10 and above ANSI support",
          "pr_url": "https://github.com/Delgan/loguru/pull/935",
          "merged_at": "2023-08-29T08:27:47Z",
          "base_commit": {
            "sha": "857f7a51edf8842aed9a4bf91c7a99a8405ebfca",
            "ref": "master"
          }
        }
      ],
      "discussion": [
        {
          "author": "tunaflsh",
          "body": "### To Replicate\r\n\r\n```python\r\nfrom loguru import logger\r\nimport sys\r\nlogger.remove()\r\nlogger.add(sys.stdout, format=\"{message}\")\r\nlogger.opt(colors=True).info(\"<fg 255,0,0>should be red</>\")  # \"should be red\" is default color\r\nlogger.opt(colors=True).info(\"<u>should be underlined</>\")  # \"should be underlined\" has default style\r\n```\r\n\r\n### Expected Output\r\n\r\n```python\r\nfrom colorama import just_fix_windows_console\r\njust_fix_windows_console()\r\nprint(\"\\033[38;2;255;0;0mthis is red\\033[0m\")  # \"this is red\" is red\r\nprint(\"\\033[4mthis is underlined\\033[0m\")  # \"this is underlined\" is underlined\r\n```\r\n\r\n### Environment\r\n\r\n- **Operating System**: Windows 11\r\n- **Python Version**: 3.11.4\r\n- **Terminals**: Windows Console, Windows Terminal\r\n- **Shells**: `cmd`, `powershell`, `mingw64`\r\n\r\n### Suggestion\r\n\r\nOn Windows 10 and above ANSI support can be enabled as in [colorama](https://github.com/tartley/colorama#initialisation).\r\n\r\n[should_wrap()](https://github.com/Delgan/loguru/blob/master/loguru/_colorama.py#L40) and [wrap()](https://github.com/Delgan/loguru/blob/master/loguru/_colorama.py#L52) are redundant and can be replaced with [colorama.just_fix_windows_console()](https://github.com/tartley/colorama/blob/master/colorama/initialise.py#L72) or [colorama.init()](https://github.com/tartley/colorama/blob/master/colorama/initialise.py#L72)",
          "type": "issue"
        },
        {
          "author": "Delgan",
          "body": "Fixed by #935.",
          "created_at": "2023-08-29T08:29:17Z",
          "type": "comment"
        }
      ]
    },
    {
      "repository": "Delgan/loguru",
      "issue_number": 906,
      "issue_title": "Logurus threaded lock is unsafe in async code",
      "issue_url": "https://github.com/Delgan/loguru/issues/906",
      "closed_at": "2023-09-03T15:27:11Z",
      "merged_prs": [
        {
          "pr_number": 972,
          "pr_title": "Fix possible deadlock with \"complete()\" and async sink",
          "pr_url": "https://github.com/Delgan/loguru/pull/972",
          "merged_at": "2023-09-03T15:27:10Z",
          "base_commit": {
            "sha": "2c585a1c186b4dadd05faa4c21363c9479e151b4",
            "ref": "master"
          }
        }
      ],
      "discussion": [
        {
          "author": "theunkn0wn1",
          "body": "I have  deadlock conditions in one of my production codebases that uses loguru extensively for logging.\n\nThis application is async, and enqueue=true is passed to the offending sink.\n\nWhenever `await logger.complete()` gets called,  the application deadlocks. \nThis is due in large part to loguru using a threading.Lock object for it's `self._lock` attribute, which results in the event loop being blocked indefinitely.\nThe sink itself makes no loguru logging calls, so it's not immediately clear why loguru is attempting to acquire it's own lock while in a locked state. \n\nA threaded lock should not be used in an async context, because if it blocks, the entire thread (including the event loop) block which may result in deadlocks.\n\nIf it makes a difference, the sink is implemented as\n```py\n\nasync def loguru_to_redis(message: Message, *, tx: asyncio.Queue[Message]):\n    # cannot call redis directly from here -- massive connection leaks\n    # instead, write to a queue we control so our worker can bulk-write messages without leaking\n    await tx.put(message)\n```\n\nI know the deadlock is loguru, since it is at the top of the stack trace:\n\n```\nAttaching to process 2711936\n[New LWP 2711965]\n[New LWP 2711966]\n[New LWP 2711967]\n[Thread debugging using libthread_db enabled]\nUsing host libthread_db library \"/lib/x86_64-linux-gnu/libthread_db.so.1\".\nfutex_abstimed_wait_cancelable (private=0, abstime=0x0, clockid=0, expected=0, futex_word=0xb3f980) at ../sysdeps/nptl/futex-internal.h:320\n320\t../sysdeps/nptl/futex-internal.h: No such file or directory.\n(gdb) py\npy-bt               py-bt-full          py-down             py-list             py-locals           py-print            py-up               python              python-interactive  \n(gdb) py-bt\nTraceback (most recent call first):\n  <built-in method __enter__ of _thread.lock object at remote 0x7fce64d10d20>\n  File \"REDACTED/venv/lib/python3.8/site-packages/loguru/_logger.py\", line 1076, in __await__\n    with self._core.lock:\n  File \"/usr/lib/python3.8/asyncio/tasks.py\", line 695, in _wrap_awaitable\n    return (yield from awaitable.__await__())\n\n```",
          "type": "issue"
        },
        {
          "author": "Delgan",
          "body": "Hi @theunkn0wn1. Thanks for the report and sorry you're experiencing deadlocks caused by Loguru.\r\n\r\nI was able to reproduce the problem locally with the following program:\r\n\r\n```python\r\nimport asyncio\r\n\r\nfrom loguru import logger\r\n\r\nasync def sink(message):\r\n    print(message, end=\"\")\r\n\r\nasync def some_task():\r\n    i = 0\r\n    while True:\r\n        logger.info(\"{}\", i)\r\n        await asyncio.sleep(0)\r\n        i += 1\r\n\r\nasync def another_task():\r\n    while True:\r\n        await asyncio.sleep(0.1)\r\n        await logger.complete()\r\n\r\nasync def main():\r\n    logger.remove()\r\n    logger.add(sink)\r\n\r\n    await asyncio.gather(some_task(), another_task())\r\n\r\nif __name__ == \"__main__\":\r\n    loop = asyncio.get_event_loop()\r\n    loop.run_until_complete(main())\r\n```\r\n\r\n\r\nThis is indeed a serious bug due to `logger.complete()` first acquiring a `threading.Lock` and then using `await` internally.\r\n\r\nWould you be able to update Loguru to version 0.7.0? This bug isn't fixed, but the latest version contains a mechanism that detects possible deadlocks and generates a `RuntimeError` instead.\r\n",
          "created_at": "2023-07-01T18:29:54Z",
          "type": "comment"
        }
      ]
    },
    {
      "repository": "Delgan/loguru",
      "issue_number": 894,
      "issue_title": "The log file is abnormal when the log is rotating",
      "issue_url": "https://github.com/Delgan/loguru/issues/894",
      "closed_at": "2023-08-31T13:06:06Z",
      "merged_prs": [
        {
          "pr_number": 960,
          "pr_title": "Fix incorrect rotation when re-starting around midnight",
          "pr_url": "https://github.com/Delgan/loguru/pull/960",
          "merged_at": "2023-08-31T13:06:05Z",
          "base_commit": {
            "sha": "e49dfa53cffc1116e25d58d727ff4eea34fafb64",
            "ref": "master"
          }
        }
      ],
      "discussion": [
        {
          "author": "jsonvot",
          "body": "Hi, thank you so much for your project, it's really great. However, some problems have been found in the process of using it recently. Can you help to have a look?\r\n\r\nI created a new file `logger.py`\r\n```python\r\nfrom loguru import logger\r\n\r\nlogger.remove()\r\nlogger.add(\r\n    'logs/log.{time:YYYY-MM-DD}.log',\r\n    level='INFO',\r\n    rotation=\"00:00\",\r\n    retention='1 months',\r\n    enqueue=True\r\n)\r\n\r\nlogger.info('hello world')\r\nlogger.info('hello world')\r\n```\r\nI execute it on a time period of zero, for example at 00:10. Got two log files, but the other one is not what I expected. When I set the rotation parameter to 01:00, the normal result of executing the code will only generate the file `log.log`\r\n`python logger.py`\r\n<img width=\"378\" alt=\"image\" src=\"https://github.com/Delgan/loguru/assets/23091750/c4cd15b9-d9f6-4a87-8727-d94df736b8a6\">\r\n\r\nThis should be a bug that must appear, and it will appear when it is executed at the same hour of the time set by the rotation parameter value.\r\n@Delgan \r\n",
          "type": "issue"
        },
        {
          "author": "Delgan",
          "body": "Hi @jsonvot.\r\n\r\nSorry but I'm not sure to fully understand the problem you're describing.\r\n\r\nThe `\"log.2023-06-15_00-27_04_266726.log\"` file is created when rotation occurs.  It's just the old file that's been renamed. After rotation, logs are wrote to `log.log` and the other one serves as a backup. If you want to limit the number of such files, you can use `retention=1`.",
          "created_at": "2023-06-15T19:50:59Z",
          "type": "comment"
        },
        {
          "author": "jsonvot",
          "body": "I changed the configuration of the code again, so it will look clearer. My idea should be easy to realize in your opinion, maybe it's just my improper use that leads to problems.\r\nI hope the result is that the log can be stored by day and kept for one month. According to my configuration, when I execute the code at 0 o'clock, a file similar to `log.2023-06-15 _ 00-27-04 _ 266726.log` will be generated every time I run it, but I only need a file like `log.2023-06-15.log`.",
          "created_at": "2023-06-16T02:05:52Z",
          "type": "comment"
        },
        {
          "author": "jsonvot",
          "body": "Hi@Delgan, Do you have any good suggestions and/or demo for my question? I'll study.\r\n",
          "created_at": "2023-06-16T15:18:34Z",
          "type": "comment"
        },
        {
          "author": "Delgan",
          "body": "Hi @jsonvot, thanks for the clarification. I was able to reproduce the issue.\r\n\r\nIt was a good occasion to use `git bisect`. Running the following test scripts:\r\n\r\n```python\r\nfrom loguru import logger\r\nlogger.remove()\r\nlogger.add(\r\n    'logs/log.{time:YYYY-MM-DD}.log',\r\n    level='INFO',\r\n    rotation=\"00:00\",\r\n    retention='1 months',\r\n    enqueue=False\r\n)\r\n\r\nlogger.info('hello world')\r\n```\r\n```bash\r\n#!/usr/bin/env bash\r\n\r\nrm -rf logs/*\r\nsudo date --set=\"2023-06-15 23:59:55\"\r\npython script.py\r\nsudo date --set=\"2023-06-16 00:00:05\"\r\npython script.py\r\n\r\nfile_count=$(find \"logs\" -maxdepth 1 -type f | wc -l)\r\nif [[ \"$file_count\" -ne \"2\" ]]; then\r\n  exit 1\r\nfi\r\n```\r\n\r\nLed to the following faulty commit: https://github.com/Delgan/loguru/commit/20eb57f8728c64b95aa5fb1c5b34eedf1fb03024\r\n\r\nIn this commit, I added support for localized aware datetime used for `rotation` but it seems I introduced a regression.\r\n\r\nAs a workaround until I fix this bug, I think you can replace `rotation=\"00:00\"` with a `datetime.time()` object configured with appropriate time and timezone: `rotation=datetime.time(hour=0, minute=0, tzinfo=datetime.timezone(datetime.timedelta(hours=2)))`. I'm not sure exactly which `tzinfo` you must use here... Maybe you need to actually specify UTC time (with `tzinfo=datetime.UTC`) of your local midnight time.",
          "created_at": "2023-06-18T13:33:30Z",
          "type": "comment"
        }
      ]
    },
    {
      "repository": "Delgan/loguru",
      "issue_number": 851,
      "issue_title": "Add new \"context\" option to specify the multiprocessing context internally used by handlers",
      "issue_url": "https://github.com/Delgan/loguru/issues/851",
      "closed_at": "2023-04-22T15:29:01Z",
      "merged_prs": [
        {
          "pr_number": 852,
          "pr_title": "Add new \"context\" option for multiprocessing while adding handler",
          "pr_url": "https://github.com/Delgan/loguru/pull/852",
          "merged_at": "2023-04-22T15:29:00Z",
          "base_commit": {
            "sha": "9fc929a54ae6ef92208c90ebafd449b8f9e3e34a",
            "ref": "master"
          }
        }
      ],
      "discussion": [
        {
          "author": "Delgan",
          "body": "A better fix should be implemented for #746, because changing the default context globally using `set_start_method()` is not always suitable.\r\n\r\nInvalid use case example on Linux (will hang forever because child processes crash):\r\n\r\n```python\r\nimport multiprocessing\r\nimport sys\r\n\r\nfrom loguru import logger\r\n\r\n\r\ndef set_logger(logger_):\r\n    global logger\r\n    logger = logger_\r\n\r\n\r\ndef log_test(num):\r\n    print(\"before log\")\r\n    logger.info(f\"hi {num}!\")\r\n    print(\"do we reach this?\")\r\n    logger.complete()\r\n\r\n\r\ndef main():\r\n    logger.remove()\r\n    logger.add(sys.stderr, enqueue=True)\r\n\r\n    with multiprocessing.get_context(\"spawn\").Pool(\r\n        4, initializer=set_logger, initargs=(logger,)\r\n    ) as pool:\r\n        pool.map(log_test, list(range(10)))\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    main()\r\n```\r\n\r\nProposed solution using a new `context` attribute:\r\n\r\n```python\r\nimport multiprocessing\r\nimport sys\r\n\r\nfrom loguru import logger\r\n\r\n\r\ndef set_logger(logger_):\r\n    global logger\r\n    logger = logger_\r\n\r\n\r\ndef log_test(num):\r\n    print(\"before log\")\r\n    logger.info(f\"hi {num}!\")\r\n    print(\"do we reach this?\")\r\n    logger.complete()\r\n\r\n\r\ndef main():\r\n    context = multiprocessing.get_context(\"spawn\")\r\n    logger.remove()\r\n    logger.add(sys.stderr, enqueue=True, context=context)\r\n\r\n    with context.Pool(4, initializer=set_logger, initargs=(logger,)) as pool:\r\n        pool.map(log_test, list(range(10)))\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    main()\r\n```",
          "type": "issue"
        }
      ]
    },
    {
      "repository": "Delgan/loguru",
      "issue_number": 833,
      "issue_title": "Internal errors when \"enqueue=True\" and \"catch=False\" should not invalidate the handler",
      "issue_url": "https://github.com/Delgan/loguru/issues/833",
      "closed_at": "2023-03-26T13:20:20Z",
      "merged_prs": [
        {
          "pr_number": 834,
          "pr_title": "Don't break sinks with \"enqueue=True\" and \"catch=False\" on error",
          "pr_url": "https://github.com/Delgan/loguru/pull/834",
          "merged_at": "2023-03-26T13:20:19Z",
          "base_commit": {
            "sha": "c926fd069dc9eadb04e48ca9692387b5e7372677",
            "ref": "master"
          }
        }
      ],
      "discussion": [
        {
          "author": "Delgan",
          "body": "Let's say some message fail to be logged (due to `Exception` raised during pickling or by the sink itself). If `catch=False`, the `Exception` will be re-raised, but it the user won't be able to catch it because it's raised from a internal thread. The error will be reported on `sys.stderr` by Python handler, but the thread will die, thus any all the subsequent logging messages will be discarded.\r\n\r\n```python\r\nimport random\r\nfrom loguru import logger\r\n\r\ndef broken_sink(message):\r\n    if random.random() < 0.5:\r\n        raise RuntimeError(\"Error\")\r\n    print(message, end=\"\")\r\n\r\nlogger.remove()\r\nlogger.add(broken_sink, enqueue=True, catch=False, colorize=True)\r\n\r\nfor i in range(10):\r\n    logger.info(f\"Message #{i}\")\r\n```\r\n\r\nI think this behavior is not user-friendly and does have much interest. The `catch=False` makes sense to let user manage exception handling, which is not possible when `enqueue=True` anyway.\r\n\r\nWhen `enqueue=False` and `catch=False`, the caller thread will die, but the sink will remain usable by others threads. The behavior should be the same when `enqueue=True`.\r\n\r\nAlso, it could simplify the code.",
          "type": "issue"
        }
      ]
    },
    {
      "repository": "Delgan/loguru",
      "issue_number": 830,
      "issue_title": "[Enhancement] Use ruff instead of flake8 for linting in pre-commit",
      "issue_url": "https://github.com/Delgan/loguru/issues/830",
      "closed_at": "2023-09-01T14:32:20Z",
      "merged_prs": [
        {
          "pr_number": 955,
          "pr_title": "Replace flake8 and isort with ruff",
          "pr_url": "https://github.com/Delgan/loguru/pull/955",
          "merged_at": "2023-09-01T14:32:18Z",
          "base_commit": {
            "sha": "d17ae011117e46365f3b68ec4eded733b8434090",
            "ref": "master"
          }
        }
      ],
      "discussion": [
        {
          "author": "baniasbaabe",
          "body": "I guess using ruff instead of flake8 could be considered, especially for performance reasons of lining + additional features like import sorting (like isort) and removing unused code (like autoflake).\r\n\r\nSee here: https://github.com/charliermarsh/ruff\r\n\r\n(There is also a performance comparison between common linters)",
          "type": "issue"
        },
        {
          "author": "Delgan",
          "body": "Ruff has gained a lot of popularity lately. I recently considered migrating to Ruff, but I don't have the time to make the switch right now. PR welcome.",
          "created_at": "2023-03-22T18:02:23Z",
          "type": "comment"
        }
      ]
    },
    {
      "repository": "pallets/click",
      "issue_number": 2817,
      "issue_title": "Set the `catch_exceptions` value for the whole runner",
      "issue_url": "https://github.com/pallets/click/issues/2817",
      "closed_at": "2024-12-19T16:54:33Z",
      "merged_prs": [
        {
          "pr_number": 2818,
          "pr_title": "Add CliRunner default `catch_exceptions` parameter",
          "pr_url": "https://github.com/pallets/click/pull/2818",
          "merged_at": "2024-12-19T16:54:32Z",
          "base_commit": {
            "sha": "5961d31fb566f089ad468a5b26a32f1ebfa7f63e",
            "ref": "main"
          }
        }
      ],
      "discussion": [
        {
          "author": "azmeuk",
          "body": "I always pass `catch_exceptions=False` for all my test suites.\r\nIt would be convenient to configure this value once for all in `CLIRunner` for example.\r\n\r\nFor example, we could add a `CLIRunner.catch_exceptions` parameter, and make `invoke` use that value if not directly passed in parameter of `invoke`. Then I would just have to put the runner in a pytest fixture and that would do the thing for me.\r\n\r\nIf that is OK, I can open a PR for this.\r\n\r\nWhat do you think?",
          "type": "issue"
        },
        {
          "author": "Rowlando13",
          "body": "Look like catch_exceptions=True is the default option, so you should not need to pass it in. \r\n![image](https://github.com/user-attachments/assets/a7821496-6597-4e07-87a6-148bd302329d)\r\n",
          "created_at": "2024-12-08T06:24:56Z",
          "type": "comment"
        },
        {
          "author": "azmeuk",
          "body": "My bad, I meant the other way. I edit the OP.",
          "created_at": "2024-12-08T09:24:45Z",
          "type": "comment"
        },
        {
          "author": "davidism",
          "body": "Might make more sense to add the param to `__init__`, and default to `None` in `invoke`. If it's `None`, it will use whatever was set in `__init__`.",
          "created_at": "2024-12-08T20:11:31Z",
          "type": "comment"
        }
      ]
    },
    {
      "repository": "pallets/click",
      "issue_number": 2793,
      "issue_title": "v8.1.8 Release Plan",
      "issue_url": "https://github.com/pallets/click/issues/2793",
      "closed_at": "2024-12-21T18:39:52Z",
      "merged_prs": [
        {
          "pr_number": 2826,
          "pr_title": "release version 8.1.8",
          "pr_url": "https://github.com/pallets/click/pull/2826",
          "merged_at": "2024-12-21T18:39:32Z",
          "base_commit": {
            "sha": "c23223b13c847ae472faa258907ffb5c27b504fa",
            "ref": "stable"
          }
        }
      ],
      "discussion": [
        {
          "author": "AndreasBackx",
          "body": "Summary of the status of v8.1.8 included issues and pull requests. I think I'd want to move this to a GitHub project, but this is good enough for now as I don't have access to that.\r\n\r\n# Pull Requests & Issues\r\n\r\n- [x] #2607\r\n\t- [x] Needs an additional CHANGES.rst mention.\r\n- [x] #2563 \r\n- [x] #1477\r\n\t- [x] Mostly ready, awaiting a tiny question before ready to merge.\r\n- [x] #2273\r\n  - Straightforward and includes necessary tests.\r\n- [x] #2453\r\n  - Straightforward, 2 better error messages.\r\n- [x] #2731\r\n\r\n## Potentially Included\r\n\r\n- ~~#2767~~\r\n  - Moved to 8.2.0 because failing tests and not worth delaying 8.1.8 for. \r\n- [x] #2639 \r\n- [x] #2811",
          "type": "issue"
        },
        {
          "author": "kdeldycke",
          "body": "@AndreasBackx you made excellent work on the upcoming 8.1.8 and 8.2.0 release! Last Click release was 15 months ago, so v8.1.8 looks already good to me to be released as it is. Anything I can help with to have 8.1.8 out?",
          "created_at": "2024-11-28T05:13:41Z",
          "type": "comment"
        },
        {
          "author": "AndreasBackx",
          "body": "The only thing holding 8.1.8 back is my question on #1477. My plan was to otherwise land it as-is. I've been away the last 2 weeks though should be ready to wrap 8.1.8 and 8.2.0 up.\r\n\r\nIf you want to help, the best way would be to:\r\n1. Leave feedback on the unchecked PR/issue items in the #2789.\r\n2. Join the Pallets Discord where chatting is a bit easier: https://discord.gg/pallets.",
          "created_at": "2024-11-29T00:04:47Z",
          "type": "comment"
        },
        {
          "author": "kdeldycke",
          "body": "> 2. Join the Pallets Discord where chatting is a bit easier: https://discord.gg/pallets.\r\n\r\nOk, that's where the action is! :)",
          "created_at": "2024-12-01T05:48:59Z",
          "type": "comment"
        },
        {
          "author": "davidism",
          "body": "@kdeldycke I could have sworn I had a conversation with you a while ago and added you to this repo. Did I forget to add you? Did I misremember?",
          "created_at": "2024-12-01T17:11:52Z",
          "type": "comment"
        },
        {
          "author": "kdeldycke",
          "body": "> @kdeldycke I could have sworn I had a conversation with you a while ago and added you to this repo. Did I forget to add you? Did I misremember?\r\n\r\n😄 ahah I don't think so. Or I don't remember either! 😅\r\n\r\nMaybe it was @janluke, who was pretty active and involved with Click internals via its https://github.com/janluke/cloup project?\r\n",
          "created_at": "2024-12-01T17:49:24Z",
          "type": "comment"
        },
        {
          "author": "davidism",
          "body": "@kdeldycke @janluke if you're interested in helping maintain as well, ping me on Discord",
          "created_at": "2024-12-04T17:54:16Z",
          "type": "comment"
        },
        {
          "author": "bckohan",
          "body": "Looks like this is ready to go?",
          "created_at": "2024-12-18T22:15:09Z",
          "type": "comment"
        },
        {
          "author": "AndreasBackx",
          "body": "@bckohan it is. I simply haven't found the time recently to go through the release process. Leaving to see family tomorrow as well for the holidays. Trying to get this out before the end of the year along with 8.2.0.",
          "created_at": "2024-12-18T23:28:54Z",
          "type": "comment"
        }
      ]
    },
    {
      "repository": "pallets/click",
      "issue_number": 2746,
      "issue_title": "`flag_value` is not taken into account with `envvar`",
      "issue_url": "https://github.com/pallets/click/issues/2746",
      "closed_at": "2024-11-03T14:40:47Z",
      "merged_prs": [
        {
          "pr_number": 2788,
          "pr_title": "Added functionality to set flag_value correctly when using envvar",
          "pr_url": "https://github.com/pallets/click/pull/2788",
          "merged_at": "2024-11-03T14:40:46Z",
          "base_commit": {
            "sha": "380008389b32ca2b7de7c73f670a9eee1562004e",
            "ref": "main"
          }
        }
      ],
      "discussion": [
        {
          "author": "dennisoehme",
          "body": "When using the ~~--debug option~~ `DEBUG` environment variable in the sample command, the debug value is not correctly set (`flag_value`). It is expected to be either `logging.DEBUG` or `None`, but it seems to be getting the integer value directly from the environment variable.\r\n\r\nSample:\r\n\r\n```python\r\nimport logging\r\nimport os\r\nimport sys\r\n\r\nimport click\r\n\r\n\r\n# Works as expected\r\n# sys.argv = ['', '--debug']\r\n\r\n# Does not work as expected\r\n# os.environ['DEBUG'] = '1'\r\n\r\n@click.command()\r\n@click.option('--debug', is_flag=True, flag_value=logging.DEBUG, envvar='DEBUG')\r\ndef sample(debug):\r\n    click.echo(f\"DEBUG: {debug}\")\r\n    assert debug in [logging.DEBUG, None], f\"Invalid debug value: {debug} - expected >{logging.DEBUG}< or None\"\r\n\r\n\r\nif __name__ == '__main__':\r\n    sample()\r\n\r\n```\r\n\r\nThere is no different in using `os.environ` or  `DEBUG=1 python cli.py`.\r\n\r\n`DEBUG=8 python cli.py` prints out: `8`\r\n\r\nEnvironment:\r\n\r\n- Python version: 3.12.4\r\n- Click version: 8.1.7\r\n",
          "type": "issue"
        }
      ]
    },
    {
      "repository": "pallets/click",
      "issue_number": 2732,
      "issue_title": "Missing reset on should_strip_ansi causing cascading issues during other tests",
      "issue_url": "https://github.com/pallets/click/issues/2732",
      "closed_at": "2024-12-04T17:39:37Z",
      "merged_prs": [
        {
          "pr_number": 2733,
          "pr_title": "Fix missing reset in isolation function",
          "pr_url": "https://github.com/pallets/click/pull/2733",
          "merged_at": "2024-12-04T17:39:25Z",
          "base_commit": {
            "sha": "9ce8bd84a66526e194668e8d4a05c45dd5b067a4",
            "ref": "stable"
          }
        }
      ],
      "discussion": [
        {
          "author": "Tyl13",
          "body": "PR #2729 was not resetting `_compat.should_strip_ansi` after replacing it with the mocked version. So the full pytest causes `test_echo_color_flag` to fail for windows machines.\r\n\r\nRun pytest on `test_utils.py` with a Windows machine and observe the test that fails when it shouldn't be.\r\n\r\nThe test should not fail.\r\n\r\nEnvironment:\r\n\r\n- Python version: 3.12.3\r\n- Click version: 8.1.x source code\r\n- OS: Windows",
          "type": "issue"
        }
      ]
    },
    {
      "repository": "pallets/click",
      "issue_number": 2717,
      "issue_title": "The type hint for the filename parameter to open_file is incomplete",
      "issue_url": "https://github.com/pallets/click/issues/2717",
      "closed_at": "2024-05-22T21:14:52Z",
      "merged_prs": [
        {
          "pr_number": 2725,
          "pr_title": "adjust type hint for filename parameter in open_file to also take an os.PathLike",
          "pr_url": "https://github.com/pallets/click/pull/2725",
          "merged_at": "2024-05-20T21:10:45Z",
          "base_commit": {
            "sha": "b54eb6e61568d807eef835ff20ab90b173accd3f",
            "ref": "8.1.x"
          }
        }
      ],
      "discussion": [
        {
          "author": "benblank",
          "body": "`click.open_file(filename, …)` happily accepts a `pathlib.Path` object as the filename; it [only passes the value along][open-file-src] to either `click.utils.LazyFile(filename, …)` or `click._compat.open_stream(filename, …)`, both of which accept pathlikes. However, `open_file`'s type hints indicate that `filename` can only be a string, which causes type-checking errors when feeding it a `Path`.\r\n\r\n[open-file-src]: https://github.com/pallets/click/blob/874ca2bc1c30d93a4ac6e36a15ed685eafe89097/src/click/utils.py#L391-L401\r\n\r\n``` python\r\nfrom pathlib import Path\r\n\r\nimport click\r\n\r\nfilename = Path(\"/some/path\")\r\n\r\n# Mypy gives the following error on the line with the call to open_file:\r\n#\r\n# error: Argument 1 to \"open_file\" has incompatible type \"Path\"; expected \"str\"  [arg-type]\r\n\r\nwith click.open_file(filename) as handle:\r\n    pass\r\n```\r\n\r\nBoth `LazyFile` and `open_stream` give their filename parameter the type `types.Union[str, os.PathLike[str]]`, so that should probably be the type accepted by `open_file`, too.\r\n\r\nEnvironment:\r\n\r\n- Python version: 3.12.1\r\n- Click version: 8.1.7\r\n",
          "type": "issue"
        },
        {
          "author": "danwuSBU",
          "body": "working on this at PyCon sprint",
          "created_at": "2024-05-20T18:27:56Z",
          "type": "comment"
        }
      ]
    },
    {
      "repository": "pallets/click",
      "issue_number": 2713,
      "issue_title": "Docs wrongly links PRs and Issues to flask",
      "issue_url": "https://github.com/pallets/click/issues/2713",
      "closed_at": "2024-05-23T17:21:44Z",
      "merged_prs": [
        {
          "pr_number": 2714,
          "pr_title": "Fix extlinks in docs/conf.py",
          "pr_url": "https://github.com/pallets/click/pull/2714",
          "merged_at": "2024-05-22T21:47:54Z",
          "base_commit": {
            "sha": "52072a9dc8388cb4176da92a13b4f4d475df0763",
            "ref": "8.1.x"
          }
        }
      ],
      "discussion": [
        {
          "author": "chestnutprog",
          "body": "![image](https://github.com/pallets/click/assets/13086194/cc68ea55-7c69-4e24-a2dd-f296d54a9c61)\r\n\r\nEnvironment:\r\n\r\n- Python version: N/A\r\n- Click version: N/A\r\n",
          "type": "issue"
        }
      ]
    },
    {
      "repository": "pallets/click",
      "issue_number": 2707,
      "issue_title": "Broken code example in docs under Advanced Patterns",
      "issue_url": "https://github.com/pallets/click/issues/2707",
      "closed_at": "2024-08-22T05:12:58Z",
      "merged_prs": [
        {
          "pr_number": 2708,
          "pr_title": "Fix broken code example in docs under Advanced Patterns",
          "pr_url": "https://github.com/pallets/click/pull/2708",
          "merged_at": "2024-05-22T21:21:12Z",
          "base_commit": {
            "sha": "396c1b9a8e48f391f52c7c166cec2914becc36c9",
            "ref": "8.1.x"
          }
        }
      ],
      "discussion": [
        {
          "author": "pbhuss",
          "body": "In the Managing Resources section of Advanced Patterns, there is [a code example](https://github.com/pallets/click/blob/f8857cb03268b5b952b88b2acb3e11d9f0f7b6e4/docs/advanced.rst?plain=1#L437-L447) where a `Repo` class is used as a context manager to be passed to `Context.with_resource`. \r\n```python\r\n    class Repo:\r\n        def __init__(self, home=None):\r\n            self.home = os.path.abspath(home or \".\")\r\n            self.db = None\r\n\r\n        def __enter__(self):\r\n            path = os.path.join(self.home, \"repo.db\")\r\n            self.db = open_database(path)\r\n\r\n        def __exit__(self, exc_type, exc_value, tb):\r\n            self.db.close()\r\n```\r\n\r\nThe `__enter__` method on `Repo` currently returns `None`, which means that the [code snippet below](https://github.com/pallets/click/blob/f8857cb03268b5b952b88b2acb3e11d9f0f7b6e4/docs/advanced.rst?plain=1#L453-L454) is broken since `repo` is `None` (the result of `__enter__()`).\r\n```python\r\n    with Repo() as repo:\r\n        repo.db.query(...)\r\n```\r\n\r\nIn the [snippet below that](https://github.com/pallets/click/blob/f8857cb03268b5b952b88b2acb3e11d9f0f7b6e4/docs/advanced.rst?plain=1#L469), we are also assigning `None` to `ctx.obj`, since `ctx.with_resource` returns the result of calling the resource’s `__enter__()` method.\r\n```python\r\n    @click.group()\r\n    @click.option(\"--repo-home\", default=\".repo\")\r\n    @click.pass_context\r\n    def cli(ctx, repo_home):\r\n        ctx.obj = ctx.with_resource(Repo(repo_home))\r\n```\r\n\r\nThe fix is to have `Repo.__enter__` return `self`.\r\n\r\n\r\n- Click version: 8.1.7\r\n",
          "type": "issue"
        },
        {
          "author": "pyrito",
          "body": "@davidism I think this issue should be marked as resolved 😄 (I was just combing through issues to solve as a first contribution and noticed this)",
          "created_at": "2024-08-22T04:05:20Z",
          "type": "comment"
        }
      ]
    },
    {
      "repository": "pallets/click",
      "issue_number": 2705,
      "issue_title": "Setting color=True in runner.invoke on windows strips ansi codes",
      "issue_url": "https://github.com/pallets/click/issues/2705",
      "closed_at": "2024-05-21T23:18:27Z",
      "merged_prs": [
        {
          "pr_number": 2729,
          "pr_title": "fix color handling in test runner",
          "pr_url": "https://github.com/pallets/click/pull/2729",
          "merged_at": "2024-05-21T23:18:10Z",
          "base_commit": {
            "sha": "d3e3852eba45a6f7ce0ae5e02ca49106e228add6",
            "ref": "8.1.x"
          }
        }
      ],
      "discussion": [
        {
          "author": "LilyFoote",
          "body": "I am trying to test that a click command uses colors correctly. I've set the `color=True` argument to `runner.invoke` and this keeps the ansi escape codes as expected on Linux. However, on Windows these are completely stripped, as if `color=False` was set.\r\n\r\nI did see #2606 and #2607, but testing the change there isn't enough to fix this for me. I think the problem is that `color=True` isn't set in the `Context` on Windows and therefore `ctx.color` is still `None` in [`resolve_color_default`](https://github.com/pallets/click/blob/f8857cb03268b5b952b88b2acb3e11d9f0f7b6e4/src/click/globals.py#L62-L65), despite `color=True` being passed to `invoke`.\r\n\r\nEnvironment:\r\n\r\n- Python version: 3.8 - 3.12\r\n- Click version: 8.1.7",
          "type": "issue"
        },
        {
          "author": "Tyl13",
          "body": "Will look into this issue. If I can't reproduce your issue, what is the version of Windows you are using?",
          "created_at": "2024-05-20T18:31:52Z",
          "type": "comment"
        },
        {
          "author": "LilyFoote",
          "body": "I was seeing this with the `windows-latest` runner in github actions.",
          "created_at": "2024-05-21T10:11:12Z",
          "type": "comment"
        }
      ]
    },
    {
      "repository": "pallets/click",
      "issue_number": 2697,
      "issue_title": "Broken message about invalid argument value for template \"File ... is a directory\"",
      "issue_url": "https://github.com/pallets/click/issues/2697",
      "closed_at": "2024-05-22T21:13:47Z",
      "merged_prs": [
        {
          "pr_number": 2728,
          "pr_title": "Prevent multiline error message on invalid path",
          "pr_url": "https://github.com/pallets/click/pull/2728",
          "merged_at": "2024-05-21T14:46:21Z",
          "base_commit": {
            "sha": "e88c11239971d309744fd3f9139259f64787f45a",
            "ref": "8.1.x"
          }
        }
      ],
      "discussion": [
        {
          "author": "Nhfiam",
          "body": "**User Actions**\r\n```sh\r\nmkdir $'my\\ndir'\r\nmy-tool $'my\\ndir'\r\n```\r\n\r\n**Expected Output**\r\n```\r\nInvalid value for 'PATH': File 'my\\ndir' is a directory.\r\n```\r\n\r\n\r\n**Actual Output**\r\n```\r\nInvalid value for 'PATH': File 'my\r\ndir' is a directory.\r\n```\r\n\r\n\r\n**Code**\r\n```python\r\nfrom pathlib import Path\r\nfrom typing import Annotated\r\n\r\nimport typer\r\n\r\n\r\ndef main(path: Annotated[Path, typer.Argument(dir_okay=False)]) -> None:\r\n    pass\r\n\r\n\r\nif __name__ == '__main__':\r\n    typer.run(main)\r\n```\r\n\r\n**Cause**\r\nYou clearly forgot `!r` on [this](https://github.com/pallets/click/blob/f8857cb03268b5b952b88b2acb3e11d9f0f7b6e4/src/click/types.py#L896) line and are using quotes instead.\r\n\r\nJust compare these lines in [click.types](https://github.com/pallets/click/blob/f8857cb03268b5b952b88b2acb3e11d9f0f7b6e4/src/click/types.py#L870-L928):\r\n```python\r\n_(\"{name} {filename!r} does not exist.\").format(\r\n_(\"{name} {filename!r} is a file.\").format(\r\n_(\"{name} '{filename}' is a directory.\").format(\r\n_(\"{name} {filename!r} is not readable.\").format(\r\n_(\"{name} {filename!r} is not writable.\").format(\r\n_(\"{name} {filename!r} is not executable.\").format(\r\n```\r\n",
          "type": "issue"
        },
        {
          "author": "t-payne",
          "body": "I'm going to work on this at the PyCon 2024 sprints.",
          "created_at": "2024-05-20T15:17:09Z",
          "type": "comment"
        }
      ]
    },
    {
      "repository": "pallets/click",
      "issue_number": 2695,
      "issue_title": "show envvar in error hint",
      "issue_url": "https://github.com/pallets/click/issues/2695",
      "closed_at": "2024-11-03T12:21:05Z",
      "merged_prs": [
        {
          "pr_number": 2696,
          "pr_title": "show env var in error hint",
          "pr_url": "https://github.com/pallets/click/pull/2696",
          "merged_at": "2024-11-03T12:21:04Z",
          "base_commit": {
            "sha": "0e0c00324a5af35f8995c7ff88df67b0f5594a58",
            "ref": "main"
          }
        }
      ],
      "discussion": [
        {
          "author": "KotlinIsland",
          "body": "```py\r\n@click.command()\r\n@click.option('--a', required=True, envvar=\"b\", show_envvar=True)\r\ndef f(a): ...\r\nf()\r\n```\r\nHere I would want the error message to show the env var.",
          "type": "issue"
        },
        {
          "author": "davidism",
          "body": "Out of curiosity, why does this and the PR start with an emoji in parentheses? That's pretty distracting, it's not clear how it's related to the request, and it's not something any other issues/PRs in the Pallets org use.",
          "created_at": "2024-03-29T00:53:00Z",
          "type": "comment"
        },
        {
          "author": "KotlinIsland",
          "body": "Because I like it. It got me [banned](https://github.com/pre-commit/pre-commit.com/issues/687) from pre-commit (and all asottile projects) though 🤣",
          "created_at": "2024-03-29T04:43:21Z",
          "type": "comment"
        },
        {
          "author": "davidism",
          "body": "Please don't use it unless a project indicates it's how things are done. Otherwise it's just noisy and annoying, exactly what was said in that issue.",
          "created_at": "2024-03-29T05:11:00Z",
          "type": "comment"
        }
      ]
    },
    {
      "repository": "pallets/click",
      "issue_number": 2674,
      "issue_title": "echo_via_pager with generators leaves terminal in broken state",
      "issue_url": "https://github.com/pallets/click/issues/2674",
      "closed_at": "2024-11-09T00:23:00Z",
      "merged_prs": [
        {
          "pr_number": 2775,
          "pr_title": "Improve echo_via_pager behaviour in face of errors",
          "pr_url": "https://github.com/pallets/click/pull/2775",
          "merged_at": "2024-11-09T00:22:59Z",
          "base_commit": {
            "sha": "2cabbe3175026695210fe0bf9b179fd62d52634f",
            "ref": "main"
          }
        }
      ],
      "discussion": [
        {
          "author": "0xDEC0DE",
          "body": "# Steps to reproduce\r\n\r\nRun the following test case:\r\n```\r\nimport click\r\n\r\ndef output_generator():\r\n    counter = 0\r\n    while True:\r\n        yield \"this is a line of output\\n\"\r\n        if counter == 1024:\r\n            click.echo(\"kaboom\", err=True)\r\n            click.get_current_context().exit(0)\r\n        counter += 1\r\n\r\n@click.command\r\ndef kaboom():\r\n    click.echo_via_pager(output_generator)\r\n\r\nif __name__ == \"__main__\":\r\n    kaboom()\r\n```\r\n\r\nAttempt to use the terminal afterwards\r\n\r\n# Expected result\r\n\r\nA working terminal.\r\n\r\n# Actual behavior\r\n\r\nNewlines and output are obscured.  Commands may be entered, but they are not displayed.\r\n\r\n# Workaround\r\n\r\nRun the `reset` command after the command terminates.\r\n\r\nEnvironment:\r\n\r\nReproducible on OS X and Ubuntu (x86_64):\r\n\r\n```\r\n$ sw_vers\r\nProductName:            macOS\r\nProductVersion:         14.3.1\r\nBuildVersion:           23D60\r\n```\r\n- Python version: 3.11.2\r\n- Click version: 8.1.7\r\n\r\n```\r\n# cat /etc/lsb-release\r\nDISTRIB_ID=Ubuntu\r\nDISTRIB_RELEASE=22.04\r\nDISTRIB_CODENAME=jammy\r\nDISTRIB_DESCRIPTION=\"Ubuntu 22.04.3 LTS\"\r\n```\r\n- Python version: 3.10.12\r\n- Click version: 8.1.7\r\n\r\n",
          "type": "issue"
        },
        {
          "author": "0xDEC0DE",
          "body": "# Addendum\r\n\r\nIf the generator exits \"normally\", the terminal works fine.  It's only when doing things like error handling that it goes sideways.",
          "created_at": "2024-02-12T22:56:32Z",
          "type": "comment"
        },
        {
          "author": "stefreak",
          "body": "Successfully reproduced this problem using bash, but failed to reproduce using zsh in my case (also macos)",
          "created_at": "2024-09-07T10:29:41Z",
          "type": "comment"
        },
        {
          "author": "stefreak",
          "body": "Hi @0xDEC0DE, thank you for the detailed bug report and the repro! I found a solution for the problem in #2775, if this is still relevant to you and you have time for it I'd be happy to receive feedback and/or a quick review 👍 ",
          "created_at": "2024-09-07T10:43:39Z",
          "type": "comment"
        }
      ]
    },
    {
      "repository": "pallets/click",
      "issue_number": 2644,
      "issue_title": "Click doesn't close file options during shell completion",
      "issue_url": "https://github.com/pallets/click/issues/2644",
      "closed_at": "2024-11-03T20:38:32Z",
      "merged_prs": [
        {
          "pr_number": 2800,
          "pr_title": "Close contexts created during shell completion #2644.",
          "pr_url": "https://github.com/pallets/click/pull/2800",
          "merged_at": "2024-11-03T20:38:31Z",
          "base_commit": {
            "sha": "d8763b93021c416549b5f8b4b5497234619410db",
            "ref": "main"
          }
        }
      ],
      "discussion": [
        {
          "author": "gregorias",
          "body": "Click doesn't close file options during shell completion, which causes a resource warning if a program uses a file option.\r\n\r\nFor example, I have group like this:\r\n\r\n```python\r\n@click.group()\r\n@click.option('--config_file',\r\n              default=CONFIG,\r\n              type=click.File(mode='r'),\r\n              help='help')\r\n@click.pass_context\r\ndef cli(ctx, config_file: typing.TextIO):\r\n```\r\n\r\nand I get this warning:\r\n\r\n```\r\n/Users/grzesiek/Library/Caches/pypoetry/virtualenvs/findata-fetcher-3hK6JJJX-py3.12/lib/python3.12/site-packages/click/shell_completion.py:293: ResourceWarning: unclosed file <_io.TextIOWrapper name='/Users/grzesiek/.config/findata/fetcher.json' mode='r' encoding='UTF-8'>\r\n  completions = self.get_completions(args, incomplete)\r\n```\r\n\r\n## Details\r\n\r\nI don't come with reproduction steps, but I can give something equally valuable, I can explain how this bug comes to be.\r\n\r\nThe issue stems from allocating a context in `core.py` outside of a `with` statement during shell completion. Here's a stack-trace of how that happens:\r\n\r\n```\r\n  File \"/Users/grzesiek/.local/bin/findata-fetcher\", line 8, in <module>\r\n    sys.exit(main())\r\n  File \"/Users/grzesiek/.local/pipx/venvs/findata-fetcher/lib/python3.12/site-packages/fetcher/tool.py\", line 576, in main\r\n    cli(obj={})\r\n  File \"/Users/grzesiek/.local/pipx/venvs/findata-fetcher/lib/python3.12/site-packages/click/core.py\", line 1171, in __call__\r\n    return self.main(*args, **kwargs)\r\n  File \"/Users/grzesiek/.local/pipx/venvs/findata-fetcher/lib/python3.12/site-packages/click/core.py\", line 1084, in main\r\n    self._main_shell_completion(extra, prog_name, complete_var)\r\n  File \"/Users/grzesiek/.local/pipx/venvs/findata-fetcher/lib/python3.12/site-packages/click/core.py\", line 1165, in _main_shell_completion\r\n    rv = shell_complete(self, ctx_args, prog_name, complete_var,\r\n  File \"/Users/grzesiek/.local/pipx/venvs/findata-fetcher/lib/python3.12/site-packages/click/shell_completion.py\", line 49, in shell_complete\r\n    echo(comp.complete())\r\n  File \"/Users/grzesiek/.local/pipx/venvs/findata-fetcher/lib/python3.12/site-packages/click/shell_completion.py\", line 296, in complete\r\n    completions = self.get_completions(args, incomplete)\r\n  File \"/Users/grzesiek/.local/pipx/venvs/findata-fetcher/lib/python3.12/site-packages/click/shell_completion.py\", line 273, in get_completions\r\n    ctx = _resolve_context(self.cli, self.ctx_args, self.prog_name, args)\r\n  File \"/Users/grzesiek/.local/pipx/venvs/findata-fetcher/lib/python3.12/site-packages/click/shell_completion.py\", line 513, in _resolve_context\r\n    ctx = cli.make_context(prog_name, args.copy(), **ctx_args)\r\n  File \"/Users/grzesiek/.local/pipx/venvs/findata-fetcher/lib/python3.12/site-packages/click/core.py\", line 952, in make_context\r\n    with ctx.scope(cleanup=False):\r\n```\r\n\r\nThis context gets [returned](https://github.com/pallets/click/blob/ca5e1c3d75e95cbc70fa6ed51ef263592e9ac0d0/src/click/core.py#L1147C19-L1147C19) to `get_completions`, but `get_completions` or its caller never call the context's `__exit__` function. \r\n\r\nCalling the `__exit__` function is essential, because `types.File` depends on it for cleanup: https://github.com/pallets/click/blob/ca5e1c3d75e95cbc70fa6ed51ef263592e9ac0d0/src/click/types.py#L740.\r\n\r\n## Environment\r\n\r\n- Python version: 3.12\r\n- Click version: 8.1.7\r\n",
          "type": "issue"
        },
        {
          "author": "AndreasBackx",
          "body": "@gregorias, if you have some time. Could you create a test case that can reproduce the issue? I'm having a hard time exactly reproducing the error that you're seeing. Doesn't have to be a test case, but even an example CLI and what to call it with would be sufficient. Then I can look into this.",
          "created_at": "2024-11-03T13:33:07Z",
          "type": "comment"
        },
        {
          "author": "gregorias",
          "body": "You can find the repro repo + instructions at https://github.com/gregorias/click-2644. It’s crucial to enable the dev mode to see warnings with `PYTHONDEVMODE`.",
          "created_at": "2024-11-03T18:55:14Z",
          "type": "comment"
        },
        {
          "author": "AndreasBackx",
          "body": "@gregorias thank you so much. I'll give it a look. I have some experience with the resource warnings and the dev mode settings from at work where we're also doing some things around it.",
          "created_at": "2024-11-03T19:59:44Z",
          "type": "comment"
        },
        {
          "author": "AndreasBackx",
          "body": "It seems that the reason why I couldn't get it to repro was because when the file (`default=\"README.md\"` in this case) does not exist, it doesn't open it. It does when it exists resulting in the warning. I'll change my test to incorporate a mocked/isolated filesystem. Thanks for the repro!",
          "created_at": "2024-11-03T20:06:55Z",
          "type": "comment"
        },
        {
          "author": "AndreasBackx",
          "body": "Signing off for today. I haven't had the time to try and confirm your example is fixed now too, but it likely should be. I used it as an inspiration for the new test case. Let me know if you still see an issue! Thanks once again for the repro!",
          "created_at": "2024-11-03T20:42:29Z",
          "type": "comment"
        }
      ]
    },
    {
      "repository": "pallets/click",
      "issue_number": 2638,
      "issue_title": "Shell completion bash version check fail in git-bash on windows",
      "issue_url": "https://github.com/pallets/click/issues/2638",
      "closed_at": "2024-12-04T17:22:05Z",
      "merged_prs": [
        {
          "pr_number": 2639,
          "pr_title": "More robust check of bash version",
          "pr_url": "https://github.com/pallets/click/pull/2639",
          "merged_at": "2024-11-09T21:57:12Z",
          "base_commit": {
            "sha": "26aa7bf3189e19a8a63890b1c2cc7eca24312d6f",
            "ref": "stable"
          }
        }
      ],
      "discussion": [
        {
          "author": "koliyo",
          "body": "I'm using windows with git-bash, and trying to set up bash shell completion following the readme.\r\n\r\nI have added the following to my `.bashrc`\r\n\r\n```sh\r\neval \"$(_VREX_COMPLETE=bash_source vrex)\"\r\n```\r\n\r\nBut I get this error in new shell instances:\r\n\r\n```\r\nThe file cannot be accessed by the system.\r\n```\r\n\r\nI have traced this to the subprocess execution of bash to check the version.\r\n\r\nThe problem is that the `bash` executable name is not working from my standard windows python installation.\r\nInstead I need to explicitly add the full path to the git-bash executable, which is `C:\\Program Files\\Git\\bin\\bash.exe`\r\n\r\nI have a working patch locally with using `shutil.which('bash')` to locate bash, which should work on all platforms. PR coming after this issue is submitted.\r\n\r\nThis is somewhat related to https://github.com/pallets/click/issues/2461, but that is a different issue, but both are specific to git-bash in windows.\r\n\r\n<!--\r\nDescribe how to replicate the bug.\r\n\r\nInclude a minimal reproducible example that demonstrates the bug.\r\nInclude the full traceback if there was an exception.\r\n-->\r\n\r\n<!--\r\nDescribe the expected behavior that should have happened but didn't.\r\n-->\r\n\r\nEnvironment:\r\n\r\n- Python version: 3.12.0\r\n- Click version: 8.1.7\r\n",
          "type": "issue"
        }
      ]
    },
    {
      "repository": "pallets/click",
      "issue_number": 2632,
      "issue_title": "Flag option with secondary opts: show_default=True does not show value from default_map in \"help\" output",
      "issue_url": "https://github.com/pallets/click/issues/2632",
      "closed_at": "2024-05-22T21:13:13Z",
      "merged_prs": [
        {
          "pr_number": 2730,
          "pr_title": "fix bug in show defaults when using a flag option and a default map",
          "pr_url": "https://github.com/pallets/click/pull/2730",
          "merged_at": "2024-05-22T21:13:00Z",
          "base_commit": {
            "sha": "5b1624bf09947d6f10eaffd63d6fb737dfe7656a",
            "ref": "8.1.x"
          }
        }
      ],
      "discussion": [
        {
          "author": "a-stangl",
          "body": "I'm setting the `default_map` from a config file, and it seems the values from the `default_map` are not correctly shown in the `--help` output if I set `show_default=True` on my option.\r\n\r\nMy Option looks like this:\r\n\r\n```python\r\n@click.option(\r\n    \"--long/--short\",\r\n    \"-l/-s\",\r\n    is_flag=True,\r\n    show_default=True,\r\n    help=\"show additional information like size and creation date\",\r\n)\r\n```\r\n\r\nI initialize the `default_map` with a custom command class that I attach via the `@click.command` decorator like this `@click.command(cls=ConfigAwareCommand)`\r\n\r\n```python\r\nfrom click import Command as _Command\r\n\r\n\r\nclass ConfigAwareCommand(_Command):\r\n    def __init__(self, *args, **kwargs):\r\n        kwargs[\"context_settings\"] = {\r\n            \"default_map\": CONFIG.get_cli_command_defaults(kwargs[\"name\"])\r\n        }\r\n        super().__init__(*args, **kwargs)\r\n\r\n```\r\n\r\nThe `default_map` value is in my example `{'long': True}`. In the `--help` output, the default value is shown like this\r\n\r\n```\r\n  -l, --long / -s, --short        show additional information like size and\r\n                                  creation date  [default: short]\r\n```\r\n\r\nWhen executing the command, the default value from the `default_map` is used correctly (`long` defaults to `True`).\r\n\r\nDuring debugging, I might have found the culprit inside [src/click/core.py](https://github.com/pallets/click/blob/main/src/click/core.py#L2746)\r\n\r\n```python\r\n            elif self.is_bool_flag and self.secondary_opts:\r\n                # For boolean flags that have distinct True/False opts,\r\n                # use the opt without prefix instead of the value.\r\n                default_string = _split_opt(\r\n                    (self.opts if self.default else self.secondary_opts)[0]\r\n                )[1]\r\n```\r\n\r\nAs you can see, `self.default` is used instead of the `default_value` variable that is initialized [further above](https://github.com/pallets/click/blob/main/src/click/core.py#L2720) this code snippet.\r\n\r\nIf I change the part of the code above and use `default_value` instead of `self.default` the help output shows the correct default values from the `default_map`.\r\n\r\n```python\r\n            elif self.is_bool_flag and self.secondary_opts:\r\n                # For boolean flags that have distinct True/False opts,\r\n                # use the opt without prefix instead of the value.\r\n                default_string = _split_opt(\r\n                    (self.opts if default_value else self.secondary_opts)[0]\r\n                )[1]\r\n```\r\n\r\nI am not sure if I do something wrong or if this is indeed a bug.\r\n\r\nEnvironment:\r\n\r\n- Python version: 3.10.12\r\n- Click version: 8.1.7\r\n",
          "type": "issue"
        },
        {
          "author": "ChrisPappalardo",
          "body": "Hi, I'm at PyCon 2024 and picked up this issue.  I wrote a unit tests to re-produce this issue and I believe this is a bug in latest main.  I also think the OP is correct about what is causing it, when I replace `self.default` with `default_value` in this line of `core.py` the tests pass: https://github.com/pallets/click/blob/9f63c3b477d444245b0cc21ac23c28f6e8f4c385/src/click/core.py#L2725",
          "created_at": "2024-05-21T20:32:00Z",
          "type": "comment"
        },
        {
          "author": "ChrisPappalardo",
          "body": "@aenglander please review.  Thanks!",
          "created_at": "2024-05-21T20:45:01Z",
          "type": "comment"
        }
      ]
    },
    {
      "repository": "pallets/click",
      "issue_number": 2621,
      "issue_title": "Allow customizing fail message for invalid choice in `click.types.Choice`",
      "issue_url": "https://github.com/pallets/click/issues/2621",
      "closed_at": "2024-11-03T14:54:04Z",
      "merged_prs": [
        {
          "pr_number": 2622,
          "pr_title": "feat: new method for choice fail",
          "pr_url": "https://github.com/pallets/click/pull/2622",
          "merged_at": "2024-11-03T14:54:03Z",
          "base_commit": {
            "sha": "1787497713fa389435ed732c9b26274c3cdc458d",
            "ref": "main"
          }
        }
      ],
      "discussion": [
        {
          "author": "antazoey",
          "body": "Move the fail art of `convert()` in the `Choice` class to a new method `get_invalid_choice_fail_message(self)` so in my subclass of `click.Choice` I can customize the way it shows the failing value for the choice\r\n\r\nSome CLI option choices are multi-part meaning they are separated by some value, like a comma separated list for example. Maybe each section of this value represents a different part of a schema and it is nice to show a custom message about the specific part.\r\n\r\nContrived version:\r\nLet says my choices are `[\"maine::goat\", \"maine::themepark\"]` and I give it \"maine::toast\"`, it'd be nice to say the `maine` part was correct and the `toast` part was not.\r\n\r\n\r\n",
          "type": "issue"
        }
      ]
    },
    {
      "repository": "pallets/click",
      "issue_number": 2609,
      "issue_title": "`progressbar(hide=True)` option for hiding the progress bar",
      "issue_url": "https://github.com/pallets/click/issues/2609",
      "closed_at": "2024-11-03T13:12:07Z",
      "merged_prs": [
        {
          "pr_number": 2727,
          "pr_title": "Add functionality to hide the progress bar Issue #2609",
          "pr_url": "https://github.com/pallets/click/pull/2727",
          "merged_at": "2024-11-03T13:12:06Z",
          "base_commit": {
            "sha": "c326df95e9e3da0425360e030413f6a3ee25fdee",
            "ref": "main"
          }
        }
      ],
      "discussion": [
        {
          "author": "simonw",
          "body": "Often when I use the Click `progressbar` I find myself wanting to conditionally hide it. Sometimes it's because there's another option in play which means I have output to display in place of it - others it's because I added a `--silent` option (as seen in `curl`) for disabling it entirely.\r\n\r\nIt's actually a bit tricky doing this at the moment, due to its use as a context manager.\r\n\r\nWhat I'd really like to be able to do is this:\r\n\r\n```python\r\nhide = True  # or False depending on various things\r\n\r\nwith click.progressbar(items, show_eta=True, hide=hide):\r\n    for item in items:\r\n        process_item(item)\r\n```\r\n",
          "type": "issue"
        },
        {
          "author": "simonw",
          "body": "Here's [one workaround](https://github.com/simonw/sqlite-utils/blob/622c3a5a7dd53a09c029e2af40c2643fe7579340/sqlite_utils/utils.py#L432-L450) I've used for this, which feels pretty messy:\r\n\r\n```python\r\nclass NullProgressBar:\r\n    def __init__(self, *args):\r\n        self.args = args\r\n\r\n    def __iter__(self):\r\n        yield from self.args[0]\r\n\r\n    def update(self, value):\r\n        pass\r\n\r\n\r\n@contextlib.contextmanager\r\ndef progressbar(*args, **kwargs):\r\n    silent = kwargs.pop(\"silent\")\r\n    if silent:\r\n        yield NullProgressBar(*args)\r\n    else:\r\n        with click.progressbar(*args, **kwargs) as bar:\r\n            yield bar\r\n```\r\nThen:\r\n```python\r\n        with progressbar(\r\n            length=self.count, silent=not show_progress, label=\"1: Evaluating\"\r\n        ) as bar:\r\n```",
          "created_at": "2023-09-12T04:10:13Z",
          "type": "comment"
        },
        {
          "author": "simonw",
          "body": "It looks like there's already a property that could be used for this:\r\n\r\nhttps://github.com/pallets/click/blob/ca5e1c3d75e95cbc70fa6ed51ef263592e9ac0d0/src/click/_termui_impl.py#L107\r\n\r\nSo the implementation may be as straight-forward as adding a `hide: bool = False` parameter and then doing this:\r\n\r\n```python\r\n self.is_hidden: bool = not hide and not isatty(self.file) \r\n```",
          "created_at": "2023-09-12T04:11:33Z",
          "type": "comment"
        },
        {
          "author": "simonw",
          "body": "I tried this:\r\n```python\r\n        with click.progressbar(\r\n            ids, label=\"Calculating similarities\", show_percent=True\r\n        ) as bar:\r\n            if hide:\r\n                bar.is_hidden = True\r\n```\r\nBut it still shows the bar once at the start of the loop, because of this:\r\n\r\nhttps://github.com/pallets/click/blob/ca5e1c3d75e95cbc70fa6ed51ef263592e9ac0d0/src/click/_termui_impl.py#L110-L113\r\n\r\nWhich calls `render_progress()` before I've had a chance to toggle `is_hidden` to `False`: https://github.com/pallets/click/blob/ca5e1c3d75e95cbc70fa6ed51ef263592e9ac0d0/src/click/_termui_impl.py#L231-L239",
          "created_at": "2023-09-12T04:46:41Z",
          "type": "comment"
        },
        {
          "author": "davidism",
          "body": "I'm wary of changing our progress bar at this point. I generally recommend that people use tqdm or rich if they need features beyond what ours provides. Both of them have a way to hide a progress bar.\r\n\r\nIn this case, it does seem relatively straightforward to modify our existing hide behavior with a parameter, so I think I'm ok with this.",
          "created_at": "2024-05-22T22:16:26Z",
          "type": "comment"
        }
      ]
    },
    {
      "repository": "pallets/click",
      "issue_number": 2606,
      "issue_title": "click.echo does not force colors on Windows with color=True",
      "issue_url": "https://github.com/pallets/click/issues/2606",
      "closed_at": "2024-11-09T21:47:35Z",
      "merged_prs": [
        {
          "pr_number": 2607,
          "pr_title": "Fix colored output on Windows (#2606)",
          "pr_url": "https://github.com/pallets/click/pull/2607",
          "merged_at": "2024-10-26T13:43:32Z",
          "base_commit": {
            "sha": "53f14d3ac4791718f259531dec3433e04a6e45ce",
            "ref": "stable"
          }
        }
      ],
      "discussion": [
        {
          "author": "krisztianloki",
          "body": "Using `click.echo(click.style(\"Foo\", fg=\"red\"), color=True)` on Windows will not print \"Foo\" in red if the output is not a terminal that supports colors, so it seems that `color=True` is ignored on Windows.\r\n\r\nHere is an example code to reproduce the bug:\r\n```\r\nimport click\r\n\r\n\r\ndef main():\r\n    test_txt = \"click_echo.txt\"\r\n    with open(test_txt, \"w\") as f:\r\n        click.secho(\"Without setting color\", file=f, fg=\"red\")\r\n        click.secho(\"With color=False\", file=f, fg=\"red\", color=False)\r\n        click.secho(\"With color=True\", file=f, fg=\"red\", color=True)\r\n\r\n    click.echo(f\"Check the contents of {test_txt}\")\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    main()\r\n```\r\nAfter running it on Linux the third line of `click_echo.txt` will contain the ANSI color codes but on Windows all three lines will be the same (the behavior is the same if `echo` prints on the console and the script output is redirected to a file)\r\n\r\nEnvironment:\r\n\r\n- Python version: 3.9\r\n- Click version: 8.1.7\r\n",
          "type": "issue"
        },
        {
          "author": "davidism",
          "body": "Windows uses a different mechanism for color than Unix. It's not possible to force it on. Or if it is, you'd need to take that up with colorama. ",
          "created_at": "2023-09-04T17:43:20Z",
          "type": "comment"
        },
        {
          "author": "krisztianloki",
          "body": "I've looked into it and it seems that there is a bug in `click` itself: the `color` parameter is not passed when `auto_wrap_for_ansi()` is called on line 317 in `utils.py`:\r\n```\r\n    # ANSI style code support. For no message or bytes, nothing happens.\r\n    # When outputting to a file instead of a terminal, strip codes.\r\n    else:\r\n        color = resolve_color_default(color)\r\n\r\n        if should_strip_ansi(file, color):\r\n            out = strip_ansi(out)\r\n        elif WIN:\r\n            if auto_wrap_for_ansi is not None:\r\n                file = auto_wrap_for_ansi(file)  # type: ignore\r\n            elif not color:\r\n                out = strip_ansi(out)\r\n```\r\nIf I change it to `file = auto_wrap_for_ansi(file, color)` then forcing colors seems to work.",
          "created_at": "2023-09-05T07:45:16Z",
          "type": "comment"
        },
        {
          "author": "davidism",
          "body": "Thanks for looking. Happy to review a PR.",
          "created_at": "2023-09-05T13:59:53Z",
          "type": "comment"
        },
        {
          "author": "kdeldycke",
          "body": "FWIW, I had to skip color-based tests on Windows in a lot of my Click-based libraries:\r\n- https://github.com/kdeldycke/meta-package-manager/commit/5ecbe5b4557fa338c53e42061d588cd62e7f8067\r\n- https://github.com/kdeldycke/click-extra/commit/43419461ca732869ddf0e37214a41b957dcf7de5\r\n\r\nSo yes, I am pretty sure there is something wrong with colors on Windows. But I never found a way to reliably fix it and find the root cause.\r\n\r\nEven with loads of hacks and workarounds in my [Click Extra](https://github.com/kdeldycke/click-extra) project, like:\r\n- https://github.com/kdeldycke/click-extra/blob/44732144e3f1f4a3da059a084e02c4c3c8f95579/click_extra/commands.py#L96-L124\r\n- https://github.com/kdeldycke/click-extra/blob/44732144e3f1f4a3da059a084e02c4c3c8f95579/click_extra/colorize.py#L258-L269\r\n\r\nSo yeah, @Tyl13 is probably onto something here with his #2731 PR ! :)\r\n\r\nRelated issues might include:\r\n- https://github.com/pallets/click/issues/2110\r\n- https://github.com/pallets/click/issues/2111",
          "created_at": "2024-05-28T06:26:59Z",
          "type": "comment"
        },
        {
          "author": "AndreasBackx",
          "body": "Fixed by #2607",
          "created_at": "2024-11-09T21:47:35Z",
          "type": "comment"
        }
      ]
    },
    {
      "repository": "pallets/click",
      "issue_number": 2598,
      "issue_title": "deprecate `__version__`  attribute",
      "issue_url": "https://github.com/pallets/click/issues/2598",
      "closed_at": "2023-08-30T15:44:23Z",
      "merged_prs": [
        {
          "pr_number": 2599,
          "pr_title": "deprecate `__version__` attribute",
          "pr_url": "https://github.com/pallets/click/pull/2599",
          "merged_at": "2023-08-30T15:44:22Z",
          "base_commit": {
            "sha": "a3277513d7340d8a0e29076fe2769a8837f756ae",
            "ref": "main"
          }
        }
      ],
      "discussion": [
        {
          "author": "davidism",
          "body": "The `__version__` attribute is an old pattern from early in Python packaging. Setuptools eventually made it easier to use the pattern by allowing reading the value from the attribute at build time, and some other build backends have done the same.\r\n\r\nHowever, there's no reason to expose this directly in code anymore. It's usually easier to use feature detection (`hasattr`, `try/except`) instead. `importlib.metadata.version(\"click\")` can be used to get the version at runtime in a standard way, if it's really needed.",
          "type": "issue"
        }
      ]
    },
    {
      "repository": "pallets/click",
      "issue_number": 2590,
      "issue_title": "deprecate `MultiCommand`, merge into `Group`",
      "issue_url": "https://github.com/pallets/click/issues/2590",
      "closed_at": "2023-08-19T20:07:37Z",
      "merged_prs": [
        {
          "pr_number": 2591,
          "pr_title": "deprecate base classes `BaseCommand` and `MultiCommand`",
          "pr_url": "https://github.com/pallets/click/pull/2591",
          "merged_at": "2023-08-19T20:07:36Z",
          "base_commit": {
            "sha": "f5e47a6fc29c515c5c23bab297e1454c054844cb",
            "ref": "main"
          }
        }
      ],
      "discussion": [
        {
          "author": "davidism",
          "body": "As part of rewriting the parser in #2205, I was looking at the complexities of Click's definitions and processing. `MultiCommand` and `CommandCollection` could be combined with `Group` to simplify to a single way of working with multiple commands. This is a little more difficult than #2589 removing `BaseCommand`.\r\n\r\nCurrently, they're distinct because `Group` provides further `group` and `command` decorators. `MultiCommand` is the base and doesn't specify how commands are registered, and `CommandCollection` \"flattens\" multiple `MultiCommands` instead of nesting like `Group.group`.\r\n\r\nThe docs occasionally refer to \"mulitcommand\" instead of \"group\" in situations where the user would probably understand \"group\" better. There are very few examples in the docs of either class, and all of them can be reasonably implemented with `Group` instead.\r\n\r\n#347 (and many linked issues) show a confusion over how `CommandCollection` is supposed to work. It doesn't use each source's parameters, and doesn't invoke the source's callback before a command. In other words, currently the collection only collects the commands in each source, but users expect it to _merge_ the behavior of all sources. I'm not entirely convinced that we should continue to support either of these things. But we could continue to support the current behavior by adding `Group.add_source` or `extend_commands` with the same behavior, where the command is looked up first on the group, then on each source. In the future we could also add a `merge_group` method.",
          "type": "issue"
        },
        {
          "author": "davidism",
          "body": "To expand on why I'm not convinced that we should support flattening or merging groups, in general it's because it adds ambiguity and indirection when defining the CLI. Whether you flatten or merge, there's probably a way to get the source's callback called before its command. But there's no convenient way to merge different group's parameters, especially in the face of overlapping or conflicting parameters. It's something that any given project can make a call on, but that Click would have a hard time implementing in a generic and compatible way for all cases.",
          "created_at": "2023-08-18T18:23:14Z",
          "type": "comment"
        },
        {
          "author": "davidism",
          "body": "@janluke @kdeldycke any feedback on this is appreciated",
          "created_at": "2023-08-18T18:28:40Z",
          "type": "comment"
        },
        {
          "author": "davidism",
          "body": "[A search for `CommandCollection` on SourceGraph](https://sourcegraph.com/search?q=context%3Aglobal+lang%3APython+-file%3Aclick%2F*+-repo%3A%5Egithub%5C.com%2Fpallets%2Fclick%24+CommandCollection&patternType=standard&sm=1&groupBy=repo) shows that it's in use. Some of those uses seem to be unnecessary. Many are for loading plugins that add top-level commands, where a custom `Group.get_command` would probably serve them better. I'll leave it for now and make it a subclass of `Group`.",
          "created_at": "2023-08-19T00:05:56Z",
          "type": "comment"
        },
        {
          "author": "kdeldycke",
          "body": "I agree `CommandCollection` is confusing. I never had any use for that, and when working on Click Extra, I voluntarily ignored it, thinking it was too exotic. My rationale was to focus only on good support for `Command` and `Group` as they are the first-class citizen of the Click ecosystem. Then see if my users were asking for `CommandCollection`. Nobody came for `CommandCollection`.\r\n\r\nSo if you can get rid of `CommandCollection`, I vote for.\r\n\r\nJust noticed you also just got rid of `MultiCommand`, and yes, that's also a good idea!",
          "created_at": "2023-08-20T15:13:28Z",
          "type": "comment"
        }
      ]
    },
    {
      "repository": "pallets/click",
      "issue_number": 2589,
      "issue_title": "deprecate `BaseCommand`, merge into `Command`",
      "issue_url": "https://github.com/pallets/click/issues/2589",
      "closed_at": "2023-08-19T20:07:37Z",
      "merged_prs": [
        {
          "pr_number": 2591,
          "pr_title": "deprecate base classes `BaseCommand` and `MultiCommand`",
          "pr_url": "https://github.com/pallets/click/pull/2591",
          "merged_at": "2023-08-19T20:07:36Z",
          "base_commit": {
            "sha": "f5e47a6fc29c515c5c23bab297e1454c054844cb",
            "ref": "main"
          }
        }
      ],
      "discussion": [
        {
          "author": "davidism",
          "body": "As part of rewriting the parser in #2205, I was looking at the complexities of Click's definitions and processing. `BaseCommand` seems to exist to represent a command without the help, parse, and invoke behaviors implemented by `Command`. A test shows implementing `parse_args` to use `optparse`, where the parameters are defined there instead of as the `command.params` collection. This not documented, and subclassing `Command` instead doesn't prevent writing a custom `parse_args` method.",
          "type": "issue"
        },
        {
          "author": "davidism",
          "body": "@janluke @kdeldycke any feedback on this is appreciated",
          "created_at": "2023-08-18T18:28:49Z",
          "type": "comment"
        },
        {
          "author": "janluke",
          "body": "> A test shows implementing parse_args to use optparse, where the parameters are defined there instead of as the command.params collection. \r\n\r\nI'm fine with the removal, especially if that's the only purpose of `BaseCommand` (using something different than `command.params`). Personally I've never made use of `BaseCommand`. In cloup I had a `BaseCommand` too but I quickly removed it because it didn't serve any purpose.",
          "created_at": "2023-08-20T09:28:20Z",
          "type": "comment"
        },
        {
          "author": "kdeldycke",
          "body": "Yes, same as @janluke, never had to use it and was quite confused by its existence. Nothing prevent merging that back to `Command`.\r\n\r\nSo yes, I agree `BaseCommand` could be removed. 👍",
          "created_at": "2023-08-20T15:02:53Z",
          "type": "comment"
        }
      ]
    },
    {
      "repository": "pallets/click",
      "issue_number": 2574,
      "issue_title": "Don't fail with error when bash is not found or too old",
      "issue_url": "https://github.com/pallets/click/issues/2574",
      "closed_at": "2023-08-17T17:13:36Z",
      "merged_prs": [
        {
          "pr_number": 2576,
          "pr_title": "Replace bash shell completion version error with warning",
          "pr_url": "https://github.com/pallets/click/pull/2576",
          "merged_at": "2023-08-17T17:13:30Z",
          "base_commit": {
            "sha": "22b9b1ce7945518fa7838321d991f5e766bceb32",
            "ref": "8.1.x"
          }
        }
      ],
      "discussion": [
        {
          "author": "superatomic",
          "body": "<!--\r\nThis issue tracker is a tool to address bugs in Click itself. Please use\r\nPallets Discord or Stack Overflow for questions about your own code.\r\n\r\nReplace this comment with a clear outline of what the bug is.\r\n-->\r\n\r\n<!--\r\nDescribe how to replicate the bug.\r\n\r\nInclude a minimal reproducible example that demonstrates the bug.\r\nInclude the full traceback if there was an exception.\r\n-->\r\n\r\n<!--\r\nDescribe the expected behavior that should have happened but didn't.\r\n-->\r\n\r\nAs discussed in #2152 and #2200, `click` does not support bash shell autocompletion for bash versions older than version 4.4. I understand this and the rational behind this decision, and I am **not** requesting that this should be changed. However, the way that `click` makes developers aware of this version limitation has caused an issue with the ability for autocompletion generation to be scripted.\r\n\r\nI have developed [a CLI tool](https://github.com/superatomic/tldr-man-client) using `click` and I have tried to package it for the [Homebrew](https://brew.sh) package manager. As a part of the installation script, autocompletion scripts for `bash`, `zsh`, and `fish` must be generated at installation time. [Homebrew isolates builds by removing `/usr/local/bin` and all user `PATH`s that are not essential for the build](https://docs.brew.sh/Formula-Cookbook#superenv-notes). This means that a newer version of `bash` (>4.4) will **not** be present at build time, **even if it is present on the system**, which causes `click` to fail to generate bash autocompletion, even if a user has a newer version of bash installed on their system:\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"/Users/Olivia/Code/tldr-man/.venv/bin/tldr\", line 6, in <module>\r\n    sys.exit(cli())\r\n  File \"/Users/Olivia/Code/tldr-man/.venv/lib/python3.10/site-packages/click/core.py\", line 1130, in __call__\r\n    return self.main(*args, **kwargs)\r\n  File \"/Users/Olivia/Code/tldr-man/.venv/lib/python3.10/site-packages/click/core.py\", line 1050, in main\r\n    self._main_shell_completion(extra, prog_name, complete_var)\r\n  File \"/Users/Olivia/Code/tldr-man/.venv/lib/python3.10/site-packages/click/core.py\", line 1125, in _main_shell_completion\r\n    rv = shell_complete(self, ctx_args, prog_name, complete_var, instruction)\r\n  File \"/Users/Olivia/Code/tldr-man/.venv/lib/python3.10/site-packages/click/shell_completion.py\", line 45, in shell_complete\r\n    echo(comp.source())\r\n  File \"/Users/Olivia/Code/tldr-man/.venv/lib/python3.10/site-packages/click/shell_completion.py\", line 326, in source\r\n    self._check_version()\r\n  File \"/Users/Olivia/Code/tldr-man/.venv/lib/python3.10/site-packages/click/shell_completion.py\", line 314, in _check_version\r\n    raise RuntimeError(\r\nRuntimeError: Shell completion is not supported for Bash versions older than 4.4.\r\n```\r\n\r\nThis error is caused by the following function, which will  make bash autocompletion simply fail if it detects that an incompatible version is being used: https://github.com/pallets/click/blob/f45198a3bcaf41d72d31273f9e6a2e3dfeccd19b/src/click/shell_completion.py#L304-L325\r\n\r\nIt makes sense for bash autocompletion *generation* to always succeed, like it does for both `zsh` and `fish` (zsh and fish autocompletion generation will succeed no matter what, even if neither shell is present on the system). While it is important to notify the user if they are using a version of bash that is too old to be supported, it is a bug for this to cause autocompletion generation to fail entirely. I propose for these error messages to be changed into warning messages that are still displayed, but do not prevent the generation from succeeding.\r\n\r\nI am willing to submit a pull request myself with the proposed changes if these changes are wanted.\r\n\r\nEnvironment:\r\n\r\n- Python version: 3.10.12\r\n- Click version: 8.1.3\r\n",
          "type": "issue"
        },
        {
          "author": "davidism",
          "body": "> autocompletion scripts for bash, zsh, and fish must be generated at installation time.\n\nNo they don't, they can be generated at build time and installed to the correct locations. That's actually the intended workflow when distributing an application. ",
          "created_at": "2023-07-29T02:36:43Z",
          "type": "comment"
        },
        {
          "author": "superatomic",
          "body": "> > autocompletion scripts for bash, zsh, and fish must be generated at installation time.\r\n> \r\n> No they don't, they can be generated at build time and installed to the correct locations. That's actually the intended workflow when distributing an application.\r\n\r\nThank you for your response!\r\n\r\nWith Homebrew, packages are built and installed in the same place. Unless I misunderstand you?\r\n\r\nRegardless, it seems unintended for bash to behave differently than zsh and fish.",
          "created_at": "2023-07-29T02:47:23Z",
          "type": "comment"
        },
        {
          "author": "davidism",
          "body": "I didn't realize it was built on the user's machine. I'm fine with modifying the check to be a warning at generation and an error at runtime. Happy to review aPR. ",
          "created_at": "2023-07-29T03:25:18Z",
          "type": "comment"
        },
        {
          "author": "superatomic",
          "body": "Thank you! I'll develop and submit a PR for review tomorrow.",
          "created_at": "2023-07-29T03:38:30Z",
          "type": "comment"
        },
        {
          "author": "superatomic",
          "body": "A quick clarification: by \"error at runtime\", do you mean checking the bash version at the start of the bash script itself, and displaying the error message then?",
          "created_at": "2023-07-29T03:42:53Z",
          "type": "comment"
        },
        {
          "author": "davidism",
          "body": "The completion script calls click to produce the results, there's a method in the bash completer class that can be modified. ",
          "created_at": "2023-07-29T04:40:55Z",
          "type": "comment"
        },
        {
          "author": "superatomic",
          "body": "I moved the version check from the `source(...)` method into the `get_completion_args(...)` method, and it works. However, there is a problem with this implementation: Since bash completion does not work with versions `<4.4`, the completion script isn't able to call click to produce the results, since the script fails to call `complete` with the error `bash: complete: nosort: invalid option name`. This means that the check will not run in common usage. Notably, this change does resolve the issue (Homebrew will now generate Bash autocompletion), since the call to `_check_version()` no longer occurs at build time.\r\n\r\nI see two solutions to this problem:\r\n- Write the `BASH_VERSION` check inside the Bash script itself by changing `_SOURCE_BASH`.\r\n- Have `_check_version()` print a warning to **stderr** instead of raising an error, and don't raise any error at runtime, allowing for the autocompletion to fail with the error `bash: complete: nosort: invalid option name`.\r\n\r\nOption 2 is what I currently have implemented, and it works pretty well. It prints warnings when generating Bash autocompletion with an insufficient version at build time, and resolves this issue.\n\nIt's also worth mentioning that that [the click shell completion documentation](https://click.palletsprojects.com/en/8.1.x/shell-completion/) details the Bash version requirement in the first paragraph.",
          "created_at": "2023-07-29T20:53:56Z",
          "type": "comment"
        },
        {
          "author": "superatomic",
          "body": "Draft implementation in #2576.",
          "created_at": "2023-07-29T23:56:38Z",
          "type": "comment"
        }
      ]
    },
    {
      "repository": "pallets/click",
      "issue_number": 2567,
      "issue_title": "Fish autocomplete stopped working on 8.1.4",
      "issue_url": "https://github.com/pallets/click/issues/2567",
      "closed_at": "2023-08-17T17:20:37Z",
      "merged_prs": [
        {
          "pr_number": 2570,
          "pr_title": "completion(fish): add back ; as line endings in fish script",
          "pr_url": "https://github.com/pallets/click/pull/2570",
          "merged_at": "2023-08-17T17:20:13Z",
          "base_commit": {
            "sha": "a260ca6fa7675a87dc55c4c79cebad3de2d9ed6d",
            "ref": "8.1.x"
          }
        }
      ],
      "discussion": [
        {
          "author": "peterdragun",
          "body": "Fish autocomplete stopped working in 8.1.4. By using git bisect I was able to identify fist commit that caused the issue - https://github.com/pallets/click/commit/bcd3faaaaf03933915394f6c24d4f06d22aa8a1d\r\n\r\nI believe the issue was caused by removing line endings with ';'. Adding them back resolves issue for me.\r\n\r\nWhen executing the `eval (env _FOO_BAR_COMPLETE=fish_source foo-bar)` I get `fish: Expected end of the statement, but found end of the input`\r\n\r\n<!--\r\nDescribe how to replicate the bug.\r\n\r\nInclude a minimal reproducible example that demonstrates the bug.\r\nInclude the full traceback if there was an exception.\r\n-->\r\n\r\n<!--\r\nDescribe the expected behavior that should have happened but didn't.\r\n-->\r\n\r\nEnvironment:\r\n\r\n- Python version: 3.11.4\r\n- Click version: 8.1.4, 8.1.5\r\n- Fish version: 3.6.1\r\n",
          "type": "issue"
        },
        {
          "author": "davidism",
          "body": "Happy to review a PR. ",
          "created_at": "2023-07-18T13:16:50Z",
          "type": "comment"
        },
        {
          "author": "davidism",
          "body": "@exploide ",
          "created_at": "2023-07-18T19:46:26Z",
          "type": "comment"
        },
        {
          "author": "exploide",
          "body": "Oh no. I'm sorry causing that one. The problem is it depends how the generated completion scripts gets loaded.\r\n\r\n```console\r\n# does indeed not work without ;\r\n$ eval (env _FOO_BAR_COMPLETE=fish_source foo-bar)\r\n\r\n# works\r\n$ eval \"$(env _FOO_BAR_COMPLETE=fish_source foo-bar)\"\r\n\r\n# also works\r\n$ _FOO_BAR_COMPLETE=fish_source foo-bar | source\r\n```\r\n\r\nIf you look in the fish repo, the `source` variant seems to be preferred. And the `\"$(...)\"` variant preserves newlines. Unfortunately the only non-working variant seems to be the documented one here. So it's of course fine if you add the `;` back, though they are not idiomatic for fish.",
          "created_at": "2023-07-19T18:00:04Z",
          "type": "comment"
        },
        {
          "author": "davidism",
          "body": "If all three work with semicolon, then it's probably best to use that as well as update the docs to use the most idiomatic approach. ",
          "created_at": "2023-07-19T18:04:47Z",
          "type": "comment"
        },
        {
          "author": "peterdragun",
          "body": "I have updated my PR to also include the update for docs to follow the fish repo recommendation.",
          "created_at": "2023-07-24T07:55:40Z",
          "type": "comment"
        }
      ]
    },
    {
      "repository": "pallets/click",
      "issue_number": 2558,
      "issue_title": "Typing changes in 8.1.4 cause failure of mypy check",
      "issue_url": "https://github.com/pallets/click/issues/2558",
      "closed_at": "2023-07-13T15:08:38Z",
      "merged_prs": [
        {
          "pr_number": 2565,
          "pr_title": "Fix `group` overload",
          "pr_url": "https://github.com/pallets/click/pull/2565",
          "merged_at": "2023-07-18T19:59:01Z",
          "base_commit": {
            "sha": "56b15be8b843a26a8065c65f8a208eef7b7c05bc",
            "ref": "8.1.x"
          }
        }
      ],
      "discussion": [
        {
          "author": "sgillies",
          "body": "Click's simple example https://github.com/pallets/click#a-simple-example doesn't pass mypy 1.4.1 since 8.1.4.  With click 8.1.3 the example did pass. This affects not only the simple example but also existing projects that use click. I ran mypy on one of my projects and everything passed, ran it 30 minutes later and saw failures out of the blue. Click 8.1.4 was published to PyPI between my checks.\r\n\r\nTo reproduce:\r\n\r\n* Save the simple example as click.py\r\n* `pip install mypy==1.4.1 click==8.1.3`\r\n* `mypy click.py`\r\n\r\nThis is the output:\r\n\r\n```\r\nclick.py:3: error: Argument 1 has incompatible type \"Callable[[Any, Any], Any]\"; expected <nothing>  [arg-type]\r\nclick.py:12: error: <nothing> not callable  [misc]\r\n```\r\n\r\nEnvironment:\r\n\r\n- Python version: 3.11\r\n- Click version: 8.1.4\r\n",
          "type": "issue"
        },
        {
          "author": "davidism",
          "body": "To anyone seeing or voting on this issue: Happy to review a PR.",
          "created_at": "2023-07-06T19:13:08Z",
          "type": "comment"
        },
        {
          "author": "sirosen",
          "body": "We ran into this as well. Unfortunately I won't be able to work on a fix for several hours at least, but I'm happy to try things out and submit a PR if I can. If someone else gets to it first, I'd also be happy to help review and check the fix against our codebase if that would be useful.\r\n\r\nI think the issue stems from the definition of the `_Decorator` type alias in the decorators. I'm not quite sure how the types should be shaped, but I tried a change which swaps an underlying TypeVar for a TypeAlias.\r\n\r\nI put together a reproducer for the `expected <nothing>` behavior which tries to ignore most of the details, and a _possible_ fix (though I'm not 100% sure that the types I played with are correct):\r\n```python\r\nimport typing as t \r\n\r\nfrom click import Command\r\n\r\n\r\nT = t.TypeVar(\"T\")\r\n_AnyCallable: t.TypeAlias = t.Callable[..., t.Any]\r\n_Decorator: t.TypeAlias = t.Callable[[T], T]\r\nFC = t.TypeVar(\"FC\", bound=t.Union[_AnyCallable, Command])\r\n\r\n\r\ndef option() -> _Decorator[FC]:\r\n    def decorator(f: FC) -> FC:\r\n        return f \r\n\r\n    return decorator\r\n\r\n\r\nFC2: t.TypeAlias = t.Union[_AnyCallable, Command]\r\nFC2_Decorator: t.TypeAlias = t.Callable[[FC2], FC2]\r\n\r\n\r\ndef option2() -> FC2_Decorator:\r\n    def decorator(f: FC) -> FC:\r\n        return f \r\n\r\n    return decorator\r\n\r\n\r\ndef foo() -> None:\r\n    pass\r\n\r\n\r\nreveal_type(option)\r\nreveal_type(option2)\r\nfoo = option()(foo)\r\nfoo2 = option2()(foo)\r\n```",
          "created_at": "2023-07-06T20:33:20Z",
          "type": "comment"
        },
        {
          "author": "sirosen",
          "body": "A minor note: I'm now fairly certain that my \"solution\" above is incorrect.\r\n\r\nIf `FC2` is defined as an alias for `_AnyCallable | Command`, then it won't allow subtypes of `_AnyCallable`, which is not acceptable. (It would mean that a command whose callback is defined with a return type other than `Any` gets rejected.)\r\n\r\nIt might be okay to use `Callable` (with no parameters) in lieu of `_AnyCallable`, but I haven't yet learned why `_AnyCallable` is being used rather than `Callable`.",
          "created_at": "2023-07-06T22:30:46Z",
          "type": "comment"
        },
        {
          "author": "rra",
          "body": "I'm guessing the right way to type these decorators is to use the facilities described here, which are intended to deal with exactly this problem of decorating functions that may have arbitrary signatures:\r\n\r\nhttps://mypy.readthedocs.io/en/stable/generics.html#declaring-decorators",
          "created_at": "2023-07-06T22:39:42Z",
          "type": "comment"
        },
        {
          "author": "davidism",
          "body": "That was what I used originally. It was apparently lacking, because we continue to get reports from users saying that their type checker doesn't like _something_, then we add more complexity to the type, then something else isn't correct, etc. Python's and mypy's implementation of typing can be a huge mess sometimes.\r\n\r\nWhoever is going to change this, be sure to follow `git blame` (or GitHub's view of it) back in time until you get to the original addition of types. Make sure to take into account why the various commits were made along the way.",
          "created_at": "2023-07-06T22:51:13Z",
          "type": "comment"
        },
        {
          "author": "Tinche",
          "body": "Taking a quick look at this.\r\n\r\nWould you consider changing the signature of `option` (and maybe others) to:\r\n\r\n```python\r\ndef option(\r\n    *param_decls: str, cls: t.Optional[t.Type[Option]] = None, **attrs: t.Any\r\n) -> t.Callable[[FC], FC]:\r\n```\r\n? This syntax is equivalent to what we have today.\r\n\r\nThe current implementation with a generic type alias might be a little too much for Mypy at this time (I'm getting `note: Revealed type is \"<nothing>\"`). This by itself won't solve this issue but it might be a necessary step.\r\n\r\nAfter that, I think this overload is the issue:\r\n```python\r\n# variant: name omitted, cls _must_ be a keyword argument, @command(cmd=CommandCls, ...)\r\n# The correct way to spell this overload is to use keyword-only argument syntax:\r\n# def command(*, cls: t.Type[CmdType], **attrs: t.Any) -> ...\r\n# However, mypy thinks this doesn't fit the overloaded function. Pyright does\r\n# accept that spelling, and the following work-around makes pyright issue a\r\n# warning that CmdType could be left unsolved, but mypy sees it as fine. *shrug*\r\n@t.overload\r\ndef command(\r\n    name: None = None,\r\n    cls: t.Type[CmdType] = ...,\r\n    **attrs: t.Any,\r\n) -> t.Callable[[_AnyCallable], CmdType]:\r\n    ...\r\n```\r\nIf I comment it out, the example type-checks. So we need to figure out how to fix it. Given the comment, it might not be super easy.",
          "created_at": "2023-07-06T23:57:51Z",
          "type": "comment"
        },
        {
          "author": "Tinche",
          "body": "Like the `command` comment mentions, the proper way to type that overload is:\r\n\r\n```python\r\n@t.overload\r\ndef command(\r\n    name: None = None,\r\n    *,\r\n    cls: t.Type[CmdType],\r\n    **attrs: t.Any,\r\n) -> t.Callable[[_AnyCallable], CmdType]:\r\n    ...\r\n```\r\n\r\nThe comment also mentions this doesn't actually pass Mypy. Now I haven't really used custom command in click, so I googled and found this example from the official docs: https://click.palletsprojects.com/en/8.1.x/advanced/#command-aliases. It looks like this example might be exercising the problematic overload?\r\n\r\nIf I try pasting the first part of the example into a file, Mypy seems to work fine with it:\r\n\r\n```python\r\nimport click\r\n\r\n\r\nclass AliasedGroup(click.Group):\r\n    def get_command(self, ctx, cmd_name):\r\n        rv = click.Group.get_command(self, ctx, cmd_name)\r\n        if rv is not None:\r\n            return rv\r\n        matches = [x for x in self.list_commands(ctx) if x.startswith(cmd_name)]\r\n        if not matches:\r\n            return None\r\n        elif len(matches) == 1:\r\n            return click.Group.get_command(self, ctx, matches[0])\r\n        ctx.fail(f\"Too many matches: {', '.join(sorted(matches))}\")\r\n\r\n    def resolve_command(self, ctx, args):\r\n        # always return the full command name\r\n        _, cmd, args = super().resolve_command(ctx, args)\r\n        return cmd.name if cmd is not None else None, cmd, args\r\n\r\n\r\n@click.command(cls=AliasedGroup)\r\ndef cli():\r\n    pass\r\n\r\n\r\nreveal_type(cli)  # note: Revealed type is \"a02.AliasedGroup\"\r\n```\r\nSo maybe Mypy fixed this in the meantime and we can use the proper overload variant?",
          "created_at": "2023-07-07T00:11:50Z",
          "type": "comment"
        },
        {
          "author": "davidism",
          "body": "I'm fine with changing signatures. I'm also fine with writing the \"right\" type for people _using_ Click, even if mypy doesn't like it when checking Click itself; we can just add ignores and comments.\r\n\r\nAnother wrinkle in this, as shown by that comment, is that people want both mypy and pyright to work, and they have different behaviors regarding decorators.",
          "created_at": "2023-07-07T01:48:29Z",
          "type": "comment"
        },
        {
          "author": "Tinche",
          "body": "I can put together a PR over the weekend. How about I set up some typing tests too (by stealing them from @hynek in attrs)?",
          "created_at": "2023-07-07T09:50:21Z",
          "type": "comment"
        },
        {
          "author": "davidism",
          "body": "That would be great!\r\n\r\nWe added some typing tests to Flask after talking with Hynek at PyCon. The `tests/typing` directory has files with different examples that should pass (they don't have to be sensible/useful code). MyPy is configured to type check that directory as well, so it runs as part of tox and CI.",
          "created_at": "2023-07-07T12:58:52Z",
          "type": "comment"
        },
        {
          "author": "Dreamsorcerer",
          "body": "> How about I set up some typing tests too\r\n\r\nProbably the first thing to do is to add tests/ and examples/ to https://github.com/pallets/click/blob/main/pyproject.toml#L62\r\nThey are generally the only place in a repo that actually use the public API, so you should get a lot of typing coverage by type checking them. We do this in all our projects these days.",
          "created_at": "2023-07-07T16:21:35Z",
          "type": "comment"
        },
        {
          "author": "davidism",
          "body": "I'd prefer to use the layout I described above. Type checking the large existing test suite is a giant pain.",
          "created_at": "2023-07-07T16:42:23Z",
          "type": "comment"
        },
        {
          "author": "Dreamsorcerer",
          "body": "It depends on how the test suite is written. I've not looked at the tests here, so maybe it's too difficult. But, remember that you can use different strictness settings for tests and examples (e.g. https://github.com/aio-libs/aiohttp-jinja2/blob/master/.mypy.ini#L26-L29).\r\n\r\nThough, I've personally found when keeping the strictness for tests, I've found and fixed poorly done mocking, tests which could never fail (often because of the mocking) and tests that were not actually testing anything.",
          "created_at": "2023-07-07T16:53:23Z",
          "type": "comment"
        },
        {
          "author": "DylanLukes",
          "body": "Here's a very minimal reproduction of this issue using just `version_option` (which returns `_Decorator[FC]`) that might help narrow things down:\r\n\r\n```py\r\n@click.group()\r\n@click.version_option()\r\ndef foo():\r\n    pass\r\n```\r\n\r\n```sh\r\ncli.py:XX: error: Argument 1 has incompatible type \"Callable[[], Any]\"; expected <nothing>  [arg-type]\r\n```",
          "created_at": "2023-07-07T20:19:15Z",
          "type": "comment"
        },
        {
          "author": "Tinche",
          "body": "PR up at https://github.com/pallets/click/pull/2562. I've also added simple Mypy and Pyright tests that should be fleshed out over time.",
          "created_at": "2023-07-09T13:45:42Z",
          "type": "comment"
        },
        {
          "author": "davidism",
          "body": "Click 8.1.5 is available on PyPI.\r\n\r\nThanks @Tinche and @sirosen for helping diagnose and fix the issue.",
          "created_at": "2023-07-13T15:08:38Z",
          "type": "comment"
        },
        {
          "author": "layday",
          "body": "FYI this:\r\n\r\n```py\r\n@click.group(\r\n    context_settings={'help_option_names': ('-h', '--help')},\r\n)\r\ndef foo():\r\n    ...\r\n```\r\n\r\nstill errors in Pyright as mentioned [here](https://github.com/pallets/click/pull/2562#discussion_r1257494622) if you wanna reopen this issue.",
          "created_at": "2023-07-13T15:29:06Z",
          "type": "comment"
        },
        {
          "author": "davidism",
          "body": "Happy to review a PR. ",
          "created_at": "2023-07-13T15:43:58Z",
          "type": "comment"
        },
        {
          "author": "ofek",
          "body": "I think this is still broken but maybe I'm doing something incorrectly:\r\n\r\n```\r\n~\\Desktop\\j ddev{repo: core, org: staging}\r\n❯ pip freeze | rg \"click|mypy\"\r\nclick==8.1.5\r\nmypy==1.4.1\r\nmypy-extensions==1.0.0\r\n\r\n~\\Desktop\\j ddev{repo: core, org: staging}\r\n❯ mypy .\r\nt.py:17: error: <nothing> has no attribute \"add_command\"  [attr-defined]\r\nFound 1 error in 1 file (checked 1 source file)\r\n```\r\n\r\n```python\r\nimport click\r\n\r\n\r\n@click.group(context_settings={'help_option_names': ['-h', '--help']}, invoke_without_command=True)\r\n@click.version_option(version='0.1.0', prog_name='ddev')\r\n@click.pass_context\r\ndef ddev(ctx: click.Context):\r\n    print('ddev')\r\n\r\n\r\n@click.command(name='ci')\r\n@click.pass_context\r\ndef ci(ctx: click.Context):\r\n    print('ci')\r\n\r\n\r\nddev.add_command(ci)\r\n\r\n\r\ndef main():\r\n    return ddev(prog_name='ddev', windows_expand_args=False)\r\n\r\n\r\nif __name__ == '__main__':\r\n    main()\r\n```",
          "created_at": "2023-07-13T16:37:18Z",
          "type": "comment"
        },
        {
          "author": "Tinche",
          "body": "@ofek  And if you try with https://github.com/pallets/click/pull/2565?",
          "created_at": "2023-07-13T16:38:55Z",
          "type": "comment"
        },
        {
          "author": "ofek",
          "body": "Oh indeed that fixes it:\r\n\r\n```\r\n~\\Desktop\\j ddev{repo: core, org: staging}\r\n❯ pip install -q -I \"click @ git+https://github.com/layday/click.git@typing-fixes\"\r\n\r\n[notice] A new release of pip is available: 23.1.1 -> 23.1.2\r\n[notice] To update, run: C:\\USERS\\OFEK\\APPDATA\\LOCAL\\PROGRAMS\\PYTHON\\PYTHON311\\PYTHON.EXE -m pip install --upgrade pip\r\n\r\n~\\Desktop\\j ddev{repo: core, org: staging} took 5s\r\n❯ pip freeze | rg \"click|mypy\"\r\nclick @ git+https://github.com/layday/click.git@dc597ba60ead6dac09c7858e18074b3dae7f1273\r\nmypy==1.4.1\r\nmypy-extensions==1.0.0\r\n\r\n~\\Desktop\\j ddev{repo: core, org: staging}\r\n❯ mypy .\r\nSuccess: no issues found in 1 source file\r\n```",
          "created_at": "2023-07-13T16:44:48Z",
          "type": "comment"
        },
        {
          "author": "blue42u",
          "body": "I'm still experiencing this issue, the examples in https://click.palletsprojects.com/en/8.1.x/quickstart/#nesting-commands fail to typecheck under MyPy 1.4.1. I imagine whatever type adjustments were done to `click.command` for 8.1.5 also needs to be done to `click.group`.\r\n\r\n```python\r\nimport click\r\n\r\n@click.group()\r\ndef cli():\r\n    pass\r\n\r\n@cli.command()\r\ndef initdb():\r\n    click.echo('Initialized the database')\r\n\r\n@cli.command()\r\ndef dropdb():\r\n    click.echo('Dropped the database')\r\n```\r\n```console\r\n❯ python3 -m pip list\r\nPackage           Version\r\n----------------- -------\r\nclick             8.1.5\r\nmypy              1.4.1\r\nmypy-extensions   1.0.0\r\npip               23.1.2\r\nsetuptools        68.0.0\r\ntyping_extensions 4.7.1\r\n\r\n❯ mypy --pretty example.py\r\nexample.py:7: error: <nothing> has no attribute \"command\"  [attr-defined]\r\n    @cli.command()\r\n     ^~~~~~~~~~~\r\nexample.py:11: error: <nothing> has no attribute \"command\"  [attr-defined]\r\n    @cli.command()\r\n     ^~~~~~~~~~~\r\nFound 2 errors in 1 file (checked 1 source file)\r\n```\r\n\r\n",
          "created_at": "2023-07-16T06:57:18Z",
          "type": "comment"
        },
        {
          "author": "layday",
          "body": "Can you try #2565?",
          "created_at": "2023-07-16T08:06:52Z",
          "type": "comment"
        },
        {
          "author": "blue42u",
          "body": "Can confirm #2565 resolves this issue for me. Thanks! Now to wait for 8.1.6...",
          "created_at": "2023-07-16T15:07:01Z",
          "type": "comment"
        },
        {
          "author": "pierrejeambrun",
          "body": "Same, #2565 seems to work on my end. Looking forward to `8.1.6`",
          "created_at": "2023-07-16T18:01:12Z",
          "type": "comment"
        },
        {
          "author": "davidism",
          "body": "Locking to avoid \"me too\" comments.",
          "created_at": "2023-07-16T18:10:46Z",
          "type": "comment"
        },
        {
          "author": "davidism",
          "body": "Click 8.1.6 is available on PyPI.",
          "created_at": "2023-07-18T20:07:54Z",
          "type": "comment"
        },
        {
          "author": "aarnphm",
          "body": "For anyone that runs mypy with pre-commit, make sure to add `click>=8.1.6` to `additional_dependencies`",
          "created_at": "2023-07-29T04:05:39Z",
          "type": "comment"
        }
      ]
    },
    {
      "repository": "pallets/click",
      "issue_number": 2524,
      "issue_title": "Click tests fails on Python `3.12.0-beta.1`",
      "issue_url": "https://github.com/pallets/click/issues/2524",
      "closed_at": "2023-06-27T15:47:56Z",
      "merged_prs": [
        {
          "pr_number": 2523,
          "pr_title": "Keep track of `<stderr>` and `<stdout>` mix in `CliRunner` results",
          "pr_url": "https://github.com/pallets/click/pull/2523",
          "merged_at": "2024-11-03T01:52:09Z",
          "base_commit": {
            "sha": "948d7a707a0abda8ce0a1b39ba87390f11ffcd5e",
            "ref": "main"
          }
        },
        {
          "pr_number": 2539,
          "pr_title": "Use python3 venv module instead of needing virtualenv",
          "pr_url": "https://github.com/pallets/click/pull/2539",
          "merged_at": "2023-06-30T20:15:28Z",
          "base_commit": {
            "sha": "8ee2f2e7abdec862e3ab74daea063bb5ecf961f7",
            "ref": "8.1.x"
          }
        }
      ],
      "discussion": [
        {
          "author": "kdeldycke",
          "body": "The last test job on `main` branch dates back to a month ago. At that time Python `3.12.0-alpha.7` was used and everything went fine: https://github.com/pallets/click/actions/runs/4874262829/jobs/8694965847#step:3:33\r\n\r\nWith the release of Python `3.12.0-beta.1`, Click tests are failing on the `3.12-dev` job, with the following issue:\r\n```\r\n==================================== ERRORS ====================================\r\n___________________ ERROR collecting tests/test_arguments.py ___________________\r\n/opt/hostedtoolcache/Python/3.12.0-beta.1/x64/lib/python3.12/importlib/__init__.py:90: in import_module\r\n    return _bootstrap._gcd_import(name[level:], package, level)\r\n<frozen importlib._bootstrap>:1293: in _gcd_import\r\n    ???\r\n<frozen importlib._bootstrap>:1266: in _find_and_load\r\n    ???\r\n<frozen importlib._bootstrap>:1237: in _find_and_load_unlocked\r\n    ???\r\n<frozen importlib._bootstrap>:841: in _load_unlocked\r\n    ???\r\n.tox/py312/lib/python3.12/site-packages/_pytest/assertion/rewrite.py:163: in exec_module\r\n    source_stat, co = _rewrite_test(fn, self.config)\r\n.tox/py312/lib/python3.12/site-packages/_pytest/assertion/rewrite.py:346: in _rewrite_test\r\n    rewrite_asserts(tree, source, strfn, config)\r\n.tox/py312/lib/python3.12/site-packages/_pytest/assertion/rewrite.py:407: in rewrite_asserts\r\n    AssertionRewriter(module_path, config, source).run(mod)\r\n.tox/py312/lib/python3.12/site-packages/_pytest/assertion/rewrite.py:965: in visit_Name\r\n    inlocs = ast.Compare(ast.Str(name.id), [ast.In()], [locs])\r\n/opt/hostedtoolcache/Python/3.12.0-beta.1/x64/lib/python3.12/ast.py:584: in _new\r\n    warnings._deprecated(\r\n/opt/hostedtoolcache/Python/3.12.0-beta.1/x64/lib/python3.12/warnings.py:529: in _deprecated\r\n    warn(msg, DeprecationWarning, stacklevel=3)\r\nE   DeprecationWarning: ast.Str is deprecated and will be removed in Python 3.14; use ast.Constant instead\r\n...\r\n```\r\n\r\nSee for instance my latest #2523 PR: https://github.com/pallets/click/actions/runs/5121540227/jobs/9209435195?pr=2523#step:7:73",
          "type": "issue"
        },
        {
          "author": "darless",
          "body": "Running with python 3.12.0b3 there are several issues:\r\n\r\n### tox - testenv - pytest\r\nThis causes deprecation warnings about ast.Str, they will be removed in python 3.14, but in 3.12, it should continue to work.\r\nTo fix we can change the commands to ignore the deprecation warning:\r\n\r\n```\r\n[testenv]\r\n...\r\ncommands = pytest -v -W ignore::DeprecationWarning --tb=short --basetemp={envtmpdir} {posargs}\r\n```\r\n\r\n### tox - testenv  - docs\r\n\r\nRunning this fails with the error about not being able to find pkg_resources due to it being deprecated.\r\nThis can be fixed by adding setuptools to the docs.txt requirements.\r\n\r\n### tox - testenv - style\r\n\r\nThe errors that are seen about python 3.12 issues with files in the /root/.cache directory for other files outside of the click repo.\r\n\r\nOne of the errors looks like this:\r\n```\r\n  File \"/usr/local/lib/python3.12/ast.py\", line 417, in generic_visit\r\n    self.visit(value)\r\n  File \"/usr/local/lib/python3.12/site-packages/bugbear.py\", line 347, in visit\r\n    super().visit(node)\r\n  File \"/usr/local/lib/python3.12/ast.py\", line 407, in visit\r\n    return visitor(node)\r\n           ^^^^^^^^^^^^^\r\n  File \"/usr/local/lib/python3.12/site-packages/bugbear.py\", line 519, in visit_JoinedStr\r\n    self.check_for_b907(node)\r\n  File \"/usr/local/lib/python3.12/site-packages/bugbear.py\", line 1267, in check_for_b907\r\n    and value.value[-1] in quote_marks\r\n        ~~~~~~~~~~~^^^^\r\nIndexError: string index out of range\r\n```\r\nThe value.value[-1] is an issue with flake8 it looks like with bugbear. Issue goes away if bugbear is fixed to check that value string is filled in with at least one char before trying to get the last character. If the value is empty then it will throw the IndexError.\r\n\r\nFrom what I can see the style portion of tox is not run in github actions, so we won't see that when running it.\r\n\r\nTox runs the pre-commit which has `--all-files` set.\r\nWhy are we running pre-commit on this? This can be fixed by removing the flake8 in pre-commit and instead running flake8 manually within the repo since we do not care about running on other python libraries.\r\n\r\nI'll create a PR that fixes the items mentioned above, specifically flake8 running within the testing repo and not on every library in the system, which does not make sense.",
          "created_at": "2023-06-26T17:55:36Z",
          "type": "comment"
        },
        {
          "author": "davidism",
          "body": "All of the suggested changes are incorrect, this just requires updating some libraries, which I'll take care of when I have a chance. ",
          "created_at": "2023-06-26T18:16:43Z",
          "type": "comment"
        },
        {
          "author": "darless",
          "body": "The linked PR actually shows that all the tests passed.\r\nhttps://github.com/pallets/click/pull/2540/checks\r\n\r\nI addressed more issues than the bug is for, the bug is only for the environment py312, the docs and style which are not run in the matrix have issues in 3.12 as I outlined, but are outside of scope of this bug.\r\n\r\nThat being said, in the current docker python:3.12.0b3, the py312 does not fail.\r\n```\r\n$ docker run -v $(pwd):/app -w /app -it python:3.12.0b3 bash\r\nroot@0042936aa7c4:/app# pip3 install tox -q\r\nroot@0042936aa7c4:/app# tox run -e py312\r\n.pkg: _optional_hooks> python /usr/local/lib/python3.12/site-packages/pyproject_api/_backend.py True setuptools.build_meta\r\n.pkg: get_requires_for_build_wheel> python /usr/local/lib/python3.12/site-packages/pyproject_api/_backend.py True setuptools.build_meta\r\n.pkg: build_wheel> python /usr/local/lib/python3.12/site-packages/pyproject_api/_backend.py True setuptools.build_meta\r\npy312: install_package> python -I -m pip install --force-reinstall --no-deps /app/.tox/.tmp/package/10/click-8.2.0.dev0-py3-none-any.whl\r\npy312: commands[0]> pytest -v --tb=short --basetemp=/app/.tox/py312/tmp\r\n...\r\n============================== 579 passed, 21 skipped, 1 xfailed in 1.73s ===============================\r\n.pkg: _exit> python /usr/local/lib/python3.12/site-packages/pyproject_api/_backend.py True setuptools.build_meta\r\n  py312: OK (3.44=setup[1.36]+cmd[2.08] seconds)\r\n  congratulations :) (3.53 seconds)\r\n```\r\n\r\n```\r\nroot@0042936aa7c4:/app# python -V\r\nPython 3.12.0b3\r\n```\r\n\r\n",
          "created_at": "2023-06-26T21:11:08Z",
          "type": "comment"
        },
        {
          "author": "davidism",
          "body": "Yes, you can get them to pass that way, but that's not the correct fix. ",
          "created_at": "2023-06-26T21:29:57Z",
          "type": "comment"
        },
        {
          "author": "davidism",
          "body": "Addressed in b5280c608574d867e5e76c8f295c99868f18d763",
          "created_at": "2023-06-27T15:47:56Z",
          "type": "comment"
        }
      ]
    },
    {
      "repository": "pallets/click",
      "issue_number": 2522,
      "issue_title": "`CliRunner`: restrict `mix_stderr` influence to `<output>`; keep `<stderr>` and `<stdout>` stable",
      "issue_url": "https://github.com/pallets/click/issues/2522",
      "closed_at": "2024-11-03T01:52:10Z",
      "merged_prs": [
        {
          "pr_number": 2523,
          "pr_title": "Keep track of `<stderr>` and `<stdout>` mix in `CliRunner` results",
          "pr_url": "https://github.com/pallets/click/pull/2523",
          "merged_at": "2024-11-03T01:52:09Z",
          "base_commit": {
            "sha": "948d7a707a0abda8ce0a1b39ba87390f11ffcd5e",
            "ref": "main"
          }
        }
      ],
      "discussion": [
        {
          "author": "kdeldycke",
          "body": "Let's start with the current behaviour of `CliRunner` regarding [its `mix_stderr` option](https://click.palletsprojects.com/en/8.1.x/api/#click.testing.CliRunner).\r\n\r\nHere is a simple CLI:\r\n```python\r\nfrom click import command, echo\r\nfrom click.testing import CliRunner\r\n\r\n\r\n@command()\r\ndef hello():\r\n    echo(\"1 - Hello world\")\r\n    echo(\"2 - Hello error\", err=True)\r\n    echo(\"3 - Good bye world\")\r\n    echo(\"4 - Good bye error\", err=True)\r\n\r\n\r\nif __name__ == \"__main__\":\r\n\r\n    print(\"\\n*** mix_stderr=True (default) ***\\n\")\r\n    runner = CliRunner(mix_stderr=True)\r\n    result = runner.invoke(hello)\r\n    print(f\"--- <stdout> ---\\n{result.stdout}\")\r\n    print(f\"--- <stderr> ---\\n(raises error)\\n\")\r\n    print(f\"--- <output> ---\\n{result.output}\")\r\n\r\n    print(\"\\n*** mix_stderr=False ***\\n\")\r\n    runner = CliRunner(mix_stderr=False)\r\n    result = runner.invoke(hello)\r\n    print(f\"--- <stdout> ---\\n{result.stdout}\")\r\n    print(f\"--- <stderr> ---\\n{result.stderr}\")\r\n    print(f\"--- <output> ---\\n{result.output}\")\r\n\r\n```\r\n\r\nWhen called, the CLI above produces:\r\n```shell-session\r\n$ python ./cli_runner_stderr_test.py\r\n\r\n*** mix_stderr=True (default) ***\r\n\r\n--- <stdout> ---\r\n1 - Hello world\r\n2 - Hello error\r\n3 - Good bye world\r\n4 - Good bye error\r\n\r\n--- <stderr> ---\r\n(raises error)\r\n\r\n--- <output> ---\r\n1 - Hello world\r\n2 - Hello error\r\n3 - Good bye world\r\n4 - Good bye error\r\n\r\n\r\n*** mix_stderr=False ***\r\n\r\n--- <stdout> ---\r\n1 - Hello world\r\n3 - Good bye world\r\n\r\n--- <stderr> ---\r\n2 - Hello error\r\n4 - Good bye error\r\n\r\n--- <output> ---\r\n1 - Hello world\r\n3 - Good bye world\r\n```\r\n\r\nWhat I'd like to propose is to instead have `CliRunner` produce this result:\r\n```shell-session\r\n$ python ./cli_runner_stderr_test.py\r\n\r\n*** mix_stderr=True (default) ***\r\n\r\n--- <stdout> ---\r\n1 - Hello world\r\n3 - Good bye world\r\n\r\n--- <stderr> ---\r\n2 - Hello error\r\n4 - Good bye error\r\n\r\n--- <output> ---\r\n1 - Hello world\r\n2 - Hello error\r\n3 - Good bye world\r\n4 - Good bye error\r\n\r\n\r\n*** mix_stderr=False ***\r\n\r\n--- <stdout> ---\r\n1 - Hello world\r\n3 - Good bye world\r\n\r\n--- <stderr> ---\r\n2 - Hello error\r\n4 - Good bye error\r\n\r\n--- <output> ---\r\n1 - Hello world\r\n3 - Good bye world\r\n```\r\n\r\nSo what I propose is to streamline the semantics of `result.stdout`, `result.stderr` and `result.output`:\r\n- Let `result.stdout` always contain the pure output to `<stdout>`. Never mangle `<stderr>` in it.\r\n- Let `result.stderr` always contain the pure output to `<stderr>`. Never raise an error.\r\n- Use `result.output` as the content the user is expected to see:\r\n  - let it be a proxy of `<stdout>` if `mix_stderr=False`\r\n  - have it produce a mix of `<stdout>` and `<stderr>` if `mix_stderr=True`\r\n\r\nThe advantage of this is we could properly check the individual `<stdout>` and `<stderr>` streams, and check for the user output by inspecting `<output>`.\r\n\r\nThe raised exception in `<stderr>` has been introduced in `7.0` for backward compatibility, because the code prior to `7.0` wasn't returning the `stderr`/`stderr` split output (see #868). It's from 2017 so we can safely change that behaviour by now.\r\n\r\nNote that I explicitely numbered each `echo()` statement to highlight the print order. If a refactor is attempted, I am anticipating some edge-cases around the preservation of order, so it's good to have simple code to test that.",
          "type": "issue"
        },
        {
          "author": "kdeldycke",
          "body": "I just finished a PR at: https://github.com/pallets/click/pull/2523\r\n\r\nIt is ready to be reviewed and/or merged upstream.",
          "created_at": "2023-05-30T13:00:23Z",
          "type": "comment"
        }
      ]
    },
    {
      "repository": "pallets/click",
      "issue_number": 2516,
      "issue_title": "Split extra help item computing with help record rendering",
      "issue_url": "https://github.com/pallets/click/issues/2516",
      "closed_at": "2024-11-02T23:35:58Z",
      "merged_prs": [
        {
          "pr_number": 2517,
          "pr_title": "Split generation of help extra items and rendering",
          "pr_url": "https://github.com/pallets/click/pull/2517",
          "merged_at": "2024-11-02T23:35:57Z",
          "base_commit": {
            "sha": "a6e0d2936891030f5092c9869c7391104f6721d9",
            "ref": "main"
          }
        }
      ],
      "discussion": [
        {
          "author": "kdeldycke",
          "body": "I maintain [Click Extra, a drop-in replacement for Click which adds colorization](https://github.com/kdeldycke/click-extra/tree/main#readme) of the help screen.\r\n\r\nI am currently relying on finicky regular expressions to identify and match the extra items that are displayed at the end of each option's help. These extra items are rendered in square brackets and looks like:\r\n- `[default: None]`\r\n- `[default: (unlimited)]`\r\n- `[env var: COLOR_CLI8_TIME; default: no-time]`\r\n- and a variety of other formats.\r\n\r\nThe problem is that the generation of these extra items are deeply embedded within Click and are impossible to fetch independently.\r\n\r\nThat's why I propose a simple refactor of the `Option.get_help_record()` method, and split it in two:\r\n- a new method to compute the values of these extra items\r\n- keep the original `get_help_record()` as-is, but dedicated to help message rendering only\r\n\r\nI have a PR that is ready at #2517.",
          "type": "issue"
        },
        {
          "author": "kdeldycke",
          "body": "Just wanted to ping @janluke on that issue, as he also maintain a Click-based extension that is also deep into help screen customization and coloring.",
          "created_at": "2023-05-16T14:14:49Z",
          "type": "comment"
        },
        {
          "author": "kdeldycke",
          "body": "I've also heard rumors of upcoming big refactors regarding help screen generation, so I propose this small, un intrusive one as a small step towards the big one.",
          "created_at": "2023-05-16T14:17:26Z",
          "type": "comment"
        }
      ]
    },
    {
      "repository": "pallets/click",
      "issue_number": 2500,
      "issue_title": "Empty string default values are not displayed",
      "issue_url": "https://github.com/pallets/click/issues/2500",
      "closed_at": "2024-05-21T22:24:21Z",
      "merged_prs": [
        {
          "pr_number": 2724,
          "pr_title": "Fix printing of default option value to handle empty strings",
          "pr_url": "https://github.com/pallets/click/pull/2724",
          "merged_at": "2024-05-21T22:24:08Z",
          "base_commit": {
            "sha": "c021f05c838c1d0401ebc340d1de9b663c7fb578",
            "ref": "8.1.x"
          }
        }
      ],
      "discussion": [
        {
          "author": "m-freiberg",
          "body": "If an option has a default value of `\"\"`, the `show_default` option does not display anything. \r\n\r\nReproducible example:\r\n```\r\nimport click\r\n\r\n@click.group()\r\ndef test_cli() -> None:\r\n    pass \r\n\r\n\r\n@test_cli.command(help=\"Test CLI\")\r\n@click.option(\"--test_value\", type=str, default=\"\", show_default=True)\r\ndef test_function(\r\n    test_value: str\r\n) -> None:\r\n    print(test_value)\r\n\r\n\r\n@click.group()\r\ndef cli() -> None:\r\n    pass\r\n\r\n\r\ncli.add_command(test_cli)\r\ncli()\r\n```\r\n\r\nExpected to see a default displayed. Actual behavior:\r\n<img width=\"653\" alt=\"image\" src=\"https://user-images.githubusercontent.com/53453358/235223998-5e387b8b-45ac-41bd-af56-59ac177991fc.png\">\r\n\r\nEnvironment:\r\n\r\n- Python version: 3.11.3\r\n- Click version: 8.0.3\r\n",
          "type": "issue"
        },
        {
          "author": "johongo",
          "body": "I solved this by using the trick found under [Dynamic Defaults for Prompts](https://click.palletsprojects.com/en/8.1.x/options/#dynamic-defaults-for-prompts) but I don't think the documentation mentions elsewhere that `show_default` can be a non-boolean value. Regardless, it still doesn't show for prompts, where the only visual signifier is the empty pair of brackets.\r\n\r\n",
          "created_at": "2023-08-10T15:47:02Z",
          "type": "comment"
        },
        {
          "author": "stefmolin",
          "body": "I'm working on this at the PyCon US 2024 sprints.",
          "created_at": "2024-05-20T15:55:41Z",
          "type": "comment"
        }
      ]
    },
    {
      "repository": "pallets/click",
      "issue_number": 2489,
      "issue_title": "Test failure under pytest 7.3.0",
      "issue_url": "https://github.com/pallets/click/issues/2489",
      "closed_at": "2023-05-07T02:34:36Z",
      "merged_prs": [
        {
          "pr_number": 2508,
          "pr_title": "Update dependencies using pip-compile-multi",
          "pr_url": "https://github.com/pallets/click/pull/2508",
          "merged_at": "2023-05-03T15:16:59Z",
          "base_commit": {
            "sha": "9c6f032681e38a60ce526335f2abf166191f692d",
            "ref": "8.1.x"
          }
        }
      ],
      "discussion": [
        {
          "author": "bluetech",
          "body": "Hi, pytest dev here. We've recently released version 7.3.0. We've had a report that the click test suite fails under 7.3.0. See https://github.com/pytest-dev/pytest/issues/10897 for my analysis. Would love to have your thoughts there.\r\n\r\n- Click version: main (1de080b90a82c0ae4e34ba187bc3e945e8a85563)\r\n",
          "type": "issue"
        },
        {
          "author": "davidism",
          "body": "I'm fine with fixing Click. In general, there are a number of open issues with how Click's test runner interacts/conflicts with Pytest output handling, PDB, etc. However, I'm not really clear what the issue is, so if you can point to a more self-contained example that demonstrates the issue, or otherwise make a suggestion for a fix, that would be helpful.",
          "created_at": "2023-04-11T21:33:03Z",
          "type": "comment"
        },
        {
          "author": "bluetech",
          "body": "The problem is in this line:\r\n\r\nhttps://github.com/pallets/click/blob/1de080b90a82c0ae4e34ba187bc3e945e8a85563/tests/test_arguments.py#L89\r\n\r\nwhich tries to temporarily patch `sys.stdin.encoding` to `utf-8`, but `sys.stdin.encoding` is readonly so it fails.\r\n\r\npytest output capturing (activate by default, turned off with `-s` switch) replaces `sys.stdin` with its own class. Before 7.3.0, that class allowed `sys.stdin.encoding` to be changed, but in 7.3.0 it was changed to match the real `sys.stdin.encoding` to be readonly.\r\n\r\nAs for fixing the test, I'm didn't try to understand what exactly it's testing, but if it really does want to patch `sys.stdin.encoding`, it's always possible to \"force\" it like this:\r\n\r\n```diff\r\ndiff --git a/tests/test_arguments.py b/tests/test_arguments.py\r\nindex 735df4b..3395c55 100644\r\n--- a/tests/test_arguments.py\r\n+++ b/tests/test_arguments.py\r\n@@ -1,4 +1,5 @@\r\n import sys\r\n+from unittest import mock\r\n \r\n import pytest\r\n \r\n@@ -86,9 +87,12 @@ def test_bytes_args(runner, monkeypatch):\r\n         ), \"UTF-8 encoded argument should be implicitly converted to Unicode\"\r\n \r\n     # Simulate empty locale environment variables\r\n-    monkeypatch.setattr(sys.stdin, \"encoding\", \"utf-8\")\r\n     monkeypatch.setattr(sys, \"getfilesystemencoding\", lambda: \"utf-8\")\r\n     monkeypatch.setattr(sys, \"getdefaultencoding\", lambda: \"utf-8\")\r\n+    # sys.stdin.encoding is readonly, needs some extra effort to patch.\r\n+    stdin = mock.Mock(wraps=sys.stdin)\r\n+    stdin.encoding = \"utf-8\"\r\n+    monkeypatch.setattr(sys, \"stdin\", stdin)\r\n \r\n     runner.invoke(\r\n         from_bytes,\r\n```",
          "created_at": "2023-04-11T21:55:43Z",
          "type": "comment"
        },
        {
          "author": "hroncok",
          "body": "I can confirm that the patch above makes it work with pytest 7.2.x and 7.3.0.",
          "created_at": "2023-04-12T14:37:48Z",
          "type": "comment"
        },
        {
          "author": "saroad2",
          "body": "This issue as solved in #2508",
          "created_at": "2023-05-07T02:34:36Z",
          "type": "comment"
        }
      ]
    },
    {
      "repository": "pallets/click",
      "issue_number": 2469,
      "issue_title": "use venv in quickstart instead of virtualenv",
      "issue_url": "https://github.com/pallets/click/issues/2469",
      "closed_at": "2023-06-30T20:15:38Z",
      "merged_prs": [
        {
          "pr_number": 2539,
          "pr_title": "Use python3 venv module instead of needing virtualenv",
          "pr_url": "https://github.com/pallets/click/pull/2539",
          "merged_at": "2023-06-30T20:15:28Z",
          "base_commit": {
            "sha": "8ee2f2e7abdec862e3ab74daea063bb5ecf961f7",
            "ref": "8.1.x"
          }
        }
      ],
      "discussion": [
        {
          "author": "soxofaan",
          "body": "Is there any particular reason that the quickstart docs (https://click.palletsprojects.com/en/8.1.x/quickstart/) suggest usage of the virtualenv package instead of venv from the python standard library?\r\nI'd think venv is  good enough nowadays for most purposes and use cases.\r\nReplacing virtualenv with venv would eliminate a couple of those annoying platform dependent  paragraphs about installing virtualenv from the quickstart docs.",
          "type": "issue"
        }
      ]
    },
    {
      "repository": "pallets/click",
      "issue_number": 2461,
      "issue_title": "bash completion not working in git-for-windows",
      "issue_url": "https://github.com/pallets/click/issues/2461",
      "closed_at": "2023-06-29T19:30:02Z",
      "merged_prs": [
        {
          "pr_number": 2462,
          "pr_title": "quote `BASH_VERSION` to avoid special characters on Windows",
          "pr_url": "https://github.com/pallets/click/pull/2462",
          "merged_at": "2023-06-29T19:29:54Z",
          "base_commit": {
            "sha": "936b47708cbe90fff491a24b43809bf506eaa716",
            "ref": "8.1.x"
          }
        }
      ],
      "discussion": [
        {
          "author": "liooil",
          "body": "<!--\r\nThis issue tracker is a tool to address bugs in Click itself. Please use\r\nPallets Discord or Stack Overflow for questions about your own code.\r\n\r\nReplace this comment with a clear outline of what the bug is.\r\n-->\r\n\r\n<!--\r\nDescribe how to replicate the bug.\r\n\r\nInclude a minimal reproducible example that demonstrates the bug.\r\nInclude the full traceback if there was an exception.\r\n-->\r\n\r\n<!--\r\nDescribe the expected behavior that should have happened but didn't.\r\n-->\r\n\r\nEnvironment:\r\n\r\n- Python version: 3.8.10\r\n- Click version: 8.1.3\r\n- Git for Windows version: 2.39.2\r\n- Bash version: 5.2.12(1)-release\r\n\r\nStep to replicate:\r\n\r\n1. build a command line executable aaa.exe with click\r\n2. add `eval \"$(_CCM_COMPLETE=bash_source ccm)\"` to ~/.bashrc\r\n3. start a new bash session\r\n4. see error reported\r\n\r\nError reported:\r\n\r\n```\r\ne/bin/bash: -c: line 0: syntax error near unexpected token `('\r\n/bin/bash: -c: line 0: `echo 5.2.12(1)-release'\r\nTraceback (most recent call last):\r\n  File \"C:\\Python38\\lib\\runpy.py\", line 194, in _run_module_as_main\r\n    return _run_code(code, main_globals, None,\r\n  File \"C:\\Python38\\lib\\runpy.py\", line 87, in _run_code\r\n    exec(code, run_globals)\r\n  File \"C:\\Python38\\Scripts\\aaa.exe\\__main__.py\", line 7, in <module>\r\n  File \"C:\\Python38\\lib\\site-packages\\click\\core.py\", line 1130, in __call__\r\n    return self.main(*args, **kwargs)\r\n  File \"C:\\Python38\\lib\\site-packages\\click\\core.py\", line 1050, in main\r\n    self._main_shell_completion(extra, prog_name, complete_var)\r\n  File \"C:\\Python38\\lib\\site-packages\\click\\core.py\", line 1125, in _main_shell_completion\r\n    rv = shell_complete(self, ctx_args, prog_name, complete_var, instruction)\r\n  File \"C:\\Python38\\lib\\site-packages\\click\\shell_completion.py\", line 45, in shell_complete\r\n    echo(comp.source())\r\n  File \"C:\\Python38\\lib\\site-packages\\click\\shell_completion.py\", line 326, in source\r\n    self._check_version()\r\n  File \"C:\\Python38\\lib\\site-packages\\click\\shell_completion.py\", line 321, in _check_version\r\n    raise RuntimeError(\r\nRuntimeError: Couldn't detect Bash version, shell completion is not supported.\r\n```\r\n",
          "type": "issue"
        },
        {
          "author": "davidism",
          "body": "Nice catch, and thanks for the PR.",
          "created_at": "2023-03-03T02:06:53Z",
          "type": "comment"
        }
      ]
    },
    {
      "repository": "pallets/click",
      "issue_number": 2452,
      "issue_title": "Error message \"Could not determine name for option\" is not descriptive",
      "issue_url": "https://github.com/pallets/click/issues/2452",
      "closed_at": "2024-12-04T17:16:39Z",
      "merged_prs": [
        {
          "pr_number": 2453,
          "pr_title": "core.py: Make error messages more verbose",
          "pr_url": "https://github.com/pallets/click/pull/2453",
          "merged_at": "2024-10-26T15:38:39Z",
          "base_commit": {
            "sha": "8c842a43e884c5e69032223563649f4389e37dd8",
            "ref": "stable"
          }
        }
      ],
      "discussion": [
        {
          "author": "jaseg",
          "body": "The error message \"Could not determine name for option\" from core.py does not tell the use which `@click.option` was at fault. The stacktrace points to the command wrapper itself, not to the decorator since the error is only thrown later.\r\n\r\nAn example for an invalid option is `@click.option('--foo,--bar')`\r\n\r\nThe error message should include the offending declaration.\r\n\r\nMR incoming.\r\n\r\nEnvironment:\r\n\r\n- Python version: 3.10\r\n- Click version: 8.1.3\r\n",
          "type": "issue"
        }
      ]
    },
    {
      "repository": "pallets/click",
      "issue_number": 2444,
      "issue_title": "Transition docs from setup.py to pyproject.toml",
      "issue_url": "https://github.com/pallets/click/issues/2444",
      "closed_at": "2023-06-28T18:52:26Z",
      "merged_prs": [
        {
          "pr_number": 2543,
          "pr_title": "switch to flit build backend",
          "pr_url": "https://github.com/pallets/click/pull/2543",
          "merged_at": "2023-06-28T18:52:24Z",
          "base_commit": {
            "sha": "2de3b317733f3510d18143328124202ff3d46670",
            "ref": "main"
          }
        }
      ],
      "discussion": [
        {
          "author": "BrennanBarker",
          "body": "Is there any issue transitioning the \"Setuptools Integration\" doc section from referencing a notional `setup.py` to instead reference a `pyproject.toml`?  I can submit a PR if there's no objection.\r\n",
          "type": "issue"
        },
        {
          "author": "swills1",
          "body": "Just an FYI, @BrennanBarker is referring to this - https://github.com/pallets/click/blob/main/docs/setuptools.rst.\r\n\r\nWhich probably is antiquated at this point like they say.",
          "created_at": "2023-05-21T20:50:59Z",
          "type": "comment"
        }
      ]
    },
    {
      "repository": "pallets/click",
      "issue_number": 2416,
      "issue_title": "Cannot use parameterless command decorator with custom command_class",
      "issue_url": "https://github.com/pallets/click/issues/2416",
      "closed_at": "2023-06-30T19:29:23Z",
      "merged_prs": [
        {
          "pr_number": 2417,
          "pr_title": "Fix parameterless command with custom class",
          "pr_url": "https://github.com/pallets/click/pull/2417",
          "merged_at": "2023-06-30T19:29:14Z",
          "base_commit": {
            "sha": "e4066e1f325088ee42ae7bc0bc6c2e47533ff2c3",
            "ref": "8.1.x"
          }
        }
      ],
      "discussion": [
        {
          "author": "ewilliamson-patreon",
          "body": "\r\nClick throws an assertion error if you try to use the parameterless command decorator on a group with a command_class defined. The error is due to the command_class being added to kwargs before the assertion for no kwargs.\r\n\r\n\r\n# minimal repro\r\n```\r\nimport click\r\n\r\nclass CustomCommand(click.Command):\r\n    pass\r\n\r\nclass CustomGroup(click.Group):\r\n    command_class = CustomCommand\r\n\r\n@click.group(cls=CustomGroup)\r\ndef grp():\r\n    pass\r\n\r\n@grp.command\r\ndef cli():\r\n    click.echo(\"hello custom command class\")\r\n```\r\n## error\r\n\r\n```\r\newilliamson@ip-192-168-50-39 ~ % python minimal_repro.py\r\nTraceback (most recent call last):\r\n  File \"/Users/ewilliamson/minimal_repro.py\", line 14, in <module>\r\n    def cli():\r\n  File \"/Users/ewilliamson/.pyenv/versions/3.10.7/lib/python3.10/site-packages/click/core.py\", line 1847, in command\r\n    assert (\r\nAssertionError: Use 'command(**kwargs)(callable)' to provide arguments.\r\n```\r\n\r\n## expected\r\nThe `@grp.command` would be successfully parsed the same as without using `CustomGroup`\r\n\r\n<!--\r\nDescribe the expected behavior that should have happened but didn't.\r\n-->\r\n\r\nEnvironment:\r\n\r\n- Python version: `Python 3.10.7`\r\n- Click version: `click==8.1.3`\r\n",
          "type": "issue"
        }
      ]
    },
    {
      "repository": "pallets/click",
      "issue_number": 2415,
      "issue_title": "Error in click.utils.echo() when console is unavailable",
      "issue_url": "https://github.com/pallets/click/issues/2415",
      "closed_at": "2023-07-06T17:05:39Z",
      "merged_prs": [
        {
          "pr_number": 2555,
          "pr_title": "echo doesn't fail with no streams",
          "pr_url": "https://github.com/pallets/click/pull/2555",
          "merged_at": "2023-07-06T17:05:33Z",
          "base_commit": {
            "sha": "9a536eebd958558c2cd24c17fb66fac112f1ac91",
            "ref": "8.1.x"
          }
        }
      ],
      "discussion": [
        {
          "author": "rokm",
          "body": "The `click.utils.echo()` function does not seem to account for the case when the console is not available on Windows, i.e., when running under `pythonw.exe` interpreter instead of the `python.exe` one.\r\n\r\nMinimal example: \r\n\r\n```python\r\n# program.py\r\nimport sys\r\nimport os\r\n\r\ntry:\r\n    import click\r\n    click.utils.echo(\"Hello world\")\r\nexcept Exception:\r\n    import traceback\r\n    error_file = os.path.join(os.path.dirname(__file__), \"error_log.txt\")\r\n    with open(error_file, \"w\") as fp:\r\n        traceback.print_exc(file=fp)\r\n```\r\n\r\nRunning this program with `pythonw.exe program.py` produces the `error_log.txt`:\r\n``` \r\nTraceback (most recent call last):\r\n  File \"C:\\Users\\Rok\\Development\\pyi-click\\program.py\", line 6, in <module>\r\n    click.utils.echo(\"Hello world\")\r\n  File \"C:\\Users\\Rok\\Development\\pyi-click\\venv\\lib\\site-packages\\click\\utils.py\", line 299, in echo\r\n    file.write(out)  # type: ignore\r\nAttributeError: 'NoneType' object has no attribute 'write'\r\n```\r\n\r\nIn contrast, standard `print()` function gracefully handles situations when console is unavailable and `sys.stdout` and `sys.stderr` are `None`.\r\n\r\nThis attempt at retrieving stdout/stderr:\r\nhttps://github.com/pallets/click/blob/c65c6ad18471448c0fcc59ef53088787288c02cc/src/click/utils.py#L250-L254\r\nshould be followed by another `None` check, and if the stream is unavailable, the function should become a no-op (exit immediately).\r\n\r\nEnvironment:\r\n\r\n- OS: Windows\r\n- Python version: any\r\n- Click version: 8.1.3 (and earlier)\r\n",
          "type": "issue"
        },
        {
          "author": "blinxen",
          "body": "A workaround for this problem is setting `stdout` and `stdin` to `/dev/null`, here is an example that works for linux and windows:\r\n\r\n```\r\nimport os\r\nimport sys\r\nf = open(os.devnull, 'w')\r\nsys.stdin = f\r\nsys.stdout = f\r\n```",
          "created_at": "2022-12-19T12:47:47Z",
          "type": "comment"
        }
      ]
    },
    {
      "repository": "pallets/click",
      "issue_number": 2398,
      "issue_title": "Type hints: public API uses generic hints without parameters",
      "issue_url": "https://github.com/pallets/click/issues/2398",
      "closed_at": "2023-06-29T19:08:24Z",
      "merged_prs": [
        {
          "pr_number": 2401,
          "pr_title": "Types: don't leave generic types without a parameter",
          "pr_url": "https://github.com/pallets/click/pull/2401",
          "merged_at": "2023-01-20T00:37:13Z",
          "base_commit": {
            "sha": "a6c7ee060b02eaa62fd15264a669220914cfad4c",
            "ref": "8.1.x"
          }
        }
      ],
      "discussion": [
        {
          "author": "mjpieters",
          "body": "There are several methods in the click API that uses generic types that  leave out the parameter. To name two specific examples:\r\n\r\n```\r\n# click/decorators.py\r\ndef make_pass_decorator(\r\n    object_type: t.Type, ensure: bool = False\r\n) -> \"t.Callable[[F], F]\":\r\n```\r\n\r\n```\r\n# click/utils.py\r\nclass KeepOpenFile:\r\n    def __init__(self, file: t.IO) -> None:\r\n```\r\n\r\n`Type` and `IO` are generic types here, both take a single parameter.\r\n\r\nAnyone using the pyright type checker _in strict mode_ can't easily use these functions or classes as the type hints are incomplete:\r\n\r\n```\r\nimport click\r\n\r\nclass Foo:\r\n    pass\r\n\r\npass_foo = click.make_pass_decorator(Foo)\r\n# Type of \"make_pass_decorator\" is partially unknown\r\n# Type of \"make_pass_decorator\" is \"(object_type: Unknown, ensure: bool = False) -> ((F@make_pass_decorator) -> F@make_pass_decorator)\"\r\n```\r\n\r\nPlease fill in generic parameters wherever possible, even if it is just `Any`.\r\n\r\nEnvironment:\r\n\r\n- Python version: 3.10\r\n- Click version: 8.1.3\r\n",
          "type": "issue"
        },
        {
          "author": "davidism",
          "body": "To be honest, I'm pretty much over trying to support pyright and mypy in strict mode based on the support I've gotten when I've reported issues doing that. And what's weird is we run mypy with a very strict set of options in our own tests, and those pass.\r\n\r\nI'm happy to accept a PR that fixes this, but it's not a priority for me to look into personally.",
          "created_at": "2022-11-08T20:29:20Z",
          "type": "comment"
        },
        {
          "author": "mjpieters",
          "body": "> I'm happy to accept a PR that fixes this, but it's not a priority for me to look into personally.\r\n\r\nI already have a commit I can throw up as a PR right now; my worry is how to test for this. I'm hoping there's a mypy configuration that lets you find these.\r\n\r\nI don't really have the bandwidth right now to figure out why mypy is okay with these. It's not as if there are default values for the parameters, after all.",
          "created_at": "2022-11-08T22:09:37Z",
          "type": "comment"
        },
        {
          "author": "davidism",
          "body": "Don't worry about typing tests for now. In Flask, we started testing type annotations by adding files with known valid uses of the library and checking that mypy passes them. But that's a good task for a sprint (or other contributor), no need to do that yourself.",
          "created_at": "2022-11-08T22:16:16Z",
          "type": "comment"
        },
        {
          "author": "mjpieters",
          "body": "I found `disallow_any_generics`, setting that to True lets me find the same issues with mypy:\r\n\r\n```\r\nsrc/click/_compat.py:53: error: Missing type parameters for generic type \"IO\"  [type-arg]\r\nsrc/click/_compat.py:156: error: Missing type parameters for generic type \"IO\"  [type-arg]\r\nsrc/click/_compat.py:165: error: Missing type parameters for generic type \"IO\"  [type-arg]\r\nsrc/click/_compat.py:178: error: Missing type parameters for generic type \"IO\"  [type-arg]\r\nsrc/click/_compat.py:196: error: Missing type parameters for generic type \"IO\"  [type-arg]\r\nsrc/click/_compat.py:244: error: Missing type parameters for generic type \"IO\"  [type-arg]\r\nsrc/click/_compat.py:247: error: Missing type parameters for generic type \"IO\"  [type-arg]\r\nsrc/click/_compat.py:248: error: Missing type parameters for generic type \"IO\"  [type-arg]\r\nsrc/click/_compat.py:290: error: Missing type parameters for generic type \"IO\"  [type-arg]\r\nsrc/click/_compat.py:306: error: Missing type parameters for generic type \"IO\"  [type-arg]\r\nsrc/click/_compat.py:370: error: Missing type parameters for generic type \"PathLike\"  [type-arg]\r\nsrc/click/_compat.py:374: error: Missing type parameters for generic type \"IO\"  [type-arg]\r\nsrc/click/_compat.py:388: error: Missing type parameters for generic type \"IO\"  [type-arg]\r\nsrc/click/_compat.py:459: error: Missing type parameters for generic type \"IO\"  [type-arg]\r\nsrc/click/_compat.py:463: error: Missing type parameters for generic type \"IO\"  [type-arg]\r\nsrc/click/_compat.py:497: error: Missing type parameters for generic type \"IO\"  [type-arg]\r\nsrc/click/_compat.py:505: error: Missing type parameters for generic type \"IO\"  [type-arg]\r\nsrc/click/_compat.py:579: error: Missing type parameters for generic type \"IO\"  [type-arg]\r\nsrc/click/utils.py:123: error: Missing type parameters for generic type \"IO\"  [type-arg]\r\nsrc/click/utils.py:144: error: Missing type parameters for generic type \"IO\"  [type-arg]\r\nsrc/click/utils.py:186: error: Missing type parameters for generic type \"IO\"  [type-arg]\r\nsrc/click/utils.py:343: error: Missing type parameters for generic type \"IO\"  [type-arg]\r\nsrc/click/utils.py:373: error: Missing type parameters for generic type \"IO\"  [type-arg]\r\nsrc/click/utils.py:378: error: Missing type parameters for generic type \"IO\"  [type-arg]\r\nsrc/click/utils.py:384: error: Missing type parameters for generic type \"PathLike\"  [type-arg]\r\nsrc/click/utils.py:461: error: Missing type parameters for generic type \"IO\"  [type-arg]\r\nsrc/click/exceptions.py:39: error: Missing type parameters for generic type \"IO\"  [type-arg]\r\nsrc/click/exceptions.py:62: error: Missing type parameters for generic type \"IO\"  [type-arg]\r\nsrc/click/_termui_impl.py:96: error: Missing type parameters for generic type \"ProgressBar\"  [type-arg]\r\nsrc/click/types.py:400: error: Missing type parameters for generic type \"t.Type\"  [type-arg]\r\nsrc/click/types.py:705: error: Missing type parameters for generic type \"IO\"  [type-arg]\r\nsrc/click/types.py:706: error: Missing type parameters for generic type \"IO\"  [type-arg]\r\nsrc/click/types.py:797: error: Missing type parameters for generic type \"t.Type\"  [type-arg]\r\nsrc/click/types.py:947: error: Missing type parameters for generic type \"t.Type\"  [type-arg]\r\nsrc/click/core.py:1844: error: Missing type parameters for generic type \"t.Callable\"  [type-arg]\r\nsrc/click/core.py:1892: error: Missing type parameters for generic type \"t.Callable\"  [type-arg]\r\nsrc/click/core.py:2263: error: Missing type parameters for generic type \"Iterator\"  [type-arg]\r\nsrc/click/core.py:2280: error: Missing type parameters for generic type \"t.Tuple\"  [type-arg]\r\nsrc/click/core.py:2285: error: Missing type parameters for generic type \"t.Tuple\"  [type-arg]\r\nsrc/click/decorators.py:44: error: Missing type parameters for generic type \"t.Type\"  [type-arg]\r\nsrc/click/testing.py:82: error: Missing type parameters for generic type \"IO\"  [type-arg]\r\nsrc/click/testing.py:86: error: Missing type parameters for generic type \"IO\"  [type-arg]\r\nsrc/click/testing.py:209: error: Missing type parameters for generic type \"IO\"  [type-arg]\r\nsrc/click/testing.py:304: error: Missing type parameters for generic type \"IO\"  [type-arg]\r\nsrc/click/testing.py:353: error: Missing type parameters for generic type \"IO\"  [type-arg]\r\nsrc/click/testing.py:452: error: Missing type parameters for generic type \"PathLike\"  [type-arg]\r\nFound 46 errors in 8 files (checked 16 source files)\r\n```\r\n\r\n(this is with `platform = linux` added too, as otherwise there are a few `unreachable` errors too where a `sys.platform` test ends the function early when running mypy on a Mac).\r\n\r\nMy patch was a little smaller, I'll expand it tomorrow.",
          "created_at": "2022-11-08T22:19:01Z",
          "type": "comment"
        },
        {
          "author": "mjpieters",
          "body": "I was closer than I thought; I'll add a changelog entry and fix the hint syntax for 3.7 / 3.8 tomorrow.",
          "created_at": "2022-11-08T22:28:19Z",
          "type": "comment"
        },
        {
          "author": "mjpieters",
          "body": "I naturally dove in far deeper than I intended to and addressed a few more type hint improvements that I could see.\r\n\r\nThere are quite a few places type hinting could be further improved but that'd require making various core click types _generic_, which means that users of the library that are already using type hints are going to be affected. Plus, that's a lot more work to get right, and I don't have the time to follow through on that right now.\r\n\r\nThen there are what look to me outright bugs being papered over by `# type: ignore` in the codebase (places where a variable can be `None`, but the callable won't accept None are the most common), and one place where the return value of `sys.exc_info()` (`tuple[None, None, None]` or `tuple[type[BaseException], BaseException, TracebackType]`) is being treated as `Optional[tuple[type[BaseException], BaseException, TracebackType]]`. I'm not sure how much those are actual bugs or bugs in the type hints, so I'm leaving those.",
          "created_at": "2022-11-09T17:17:47Z",
          "type": "comment"
        },
        {
          "author": "DanielNoord",
          "body": "Would it be possible to do a patch release with some of the fixes from this issue already? There are some nice fixes on `master` (specifically for `progressbar`) that we'd like to use in our projects. The last release is (almost) one year ago.",
          "created_at": "2023-04-26T10:11:21Z",
          "type": "comment"
        }
      ]
    },
    {
      "repository": "pallets/click",
      "issue_number": 2396,
      "issue_title": "Issue UserWarning when overriding Parameter name",
      "issue_url": "https://github.com/pallets/click/issues/2396",
      "closed_at": "2024-11-03T14:12:00Z",
      "merged_prs": [
        {
          "pr_number": 2397,
          "pr_title": "Give a UserWarning when Parameter is overriden by name",
          "pr_url": "https://github.com/pallets/click/pull/2397",
          "merged_at": "2024-11-03T14:11:59Z",
          "base_commit": {
            "sha": "fcd85032cff78aa536a6d2b455fb83bfcc02b228",
            "ref": "main"
          }
        }
      ],
      "discussion": [
        {
          "author": "edrogers",
          "body": "When a command is given multiple parameters that use the same name, a UserWarning should be fired to highlight the conflict. Currently, the command will quietly allow one parameter to override the names of another.\r\n\r\n(This is a slightly different problem than https://github.com/pallets/click/issues/1465. In that issue, True and False values were given the same names within a single parameter.)\r\n\r\n**Example of the issue:**\r\n\r\n```python\r\n@click.command()\r\n@click.option(\"-a\", \"--aardvark\", is_flag=True)\r\n@click.option(\"-a\", \"--avocado\", is_flag=True)\r\ndef cli(aardvark: bool = False, avocado: bool = False):\r\n    if aardvark:\r\n        print(\"Animal\")\r\n    if avocado:\r\n        print(\"Fruit\")\r\n```\r\n\r\nIn this scenario, the short-name, `-a`, appears ambiguous. A warning would help the user realize the conflict they've introduced.\r\n\r\nI'll also provide a pull request for consideration.",
          "type": "issue"
        }
      ]
    },
    {
      "repository": "pallets/click",
      "issue_number": 2395,
      "issue_title": " click.format_filename regression in click 8 for non-unicode paths",
      "issue_url": "https://github.com/pallets/click/issues/2395",
      "closed_at": "2023-07-05T18:33:14Z",
      "merged_prs": [
        {
          "pr_number": 2553,
          "pr_title": "`format_filename` replaces invalid bytes",
          "pr_url": "https://github.com/pallets/click/pull/2553",
          "merged_at": "2023-07-05T18:33:06Z",
          "base_commit": {
            "sha": "0c8f301d2a28b67451eef872e327ef67e3993ec6",
            "ref": "8.1.x"
          }
        }
      ],
      "discussion": [
        {
          "author": "RazerM",
          "body": "## Summary\r\n\r\nOn non-Windows platforms, Python uses the `\"surrogateescape\"` error handler by default for filesystem encoding (`sys.getfilesystemencodeerrors()`).\r\n\r\nThe docstring for `format_filename` says this (emphasis mine)\r\n\r\n> Formats a filename for user display. The main purpose of this function is to **ensure that the filename can be displayed at all**. This will decode the filename to unicode if necessary in a way that it will not fail. Optionally, it can shorten the filename to not include the full path to the filename.\r\n\r\nand under [Printing Filenames](https://click.palletsprojects.com/en/8.1.x/utils/?highlight=format_filename#printing-filenames) (emphasis mine):\r\n\r\n> Because filenames might not be Unicode, formatting them can be a bit tricky.\r\n>\r\n> The way this works with click is through the [format_filename()](https://click.palletsprojects.com/en/8.1.x/api/#click.format_filename) function. It does a best-effort conversion of the filename to Unicode and will never fail. This makes it possible to use **these filenames in the context of a full Unicode string.**\r\n\r\nBut on Click 8, `format_filename` will always return a string with surrogates intact. Strings in this form are destined for functions which have to operate on the file like `open`, not for printing to the user. When you try to do so, you get a UnicodeEncodeError.\r\n\r\n## Reproducer\r\n\r\n**You have to run this example on an OS like Linux which allows non-unicode filenames.**\r\n\r\nThis script \r\n\r\n```python\r\nimport os\r\nimport click\r\n\r\n@click.command()\r\n@click.argument('path', type=click.Path(), required=False)\r\ndef cli(path):\r\n    if path is not None:\r\n        click.echo(f\"printing {path!r} as {click.format_filename(path)}\")\r\n\r\n    filename_bytes = b'foo\\xe9'\r\n    filename_str = os.fsdecode(filename_bytes)\r\n\r\n    # We can open filename_bytes or filename_str, the result is the same.\r\n    # When filename_str (which contains surrogates) is given, Python encodes\r\n    # it back using os.fsencode to get the original bytes.\r\n    with open(filename_str, 'w') as fp:\r\n        fp.write('Hello, world!')\r\n\r\n    # I'm just using scandir to demonstrate that paths come from the standard\r\n    # library in this surrogateescaped form.\r\n    #\r\n    # This is equivalent to click.echo(click.format_filename(filename_str))\r\n    for entry in os.scandir('.'):\r\n        if entry.name != filename_str:\r\n            continue\r\n        click.echo(click.format_filename(entry.name))\r\n\r\nif __name__ == '__main__':\r\n    cli()\r\n```\r\n\r\nSave this file as `cli.py` and run it:\r\n\r\n```\r\npython cli.py\r\n```\r\n\r\nOn Click 8 you get an exception:\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"cli.py\", line 25, in <module>\r\n    cli()\r\n  File \"<redacted>/python3.7/site-packages/click/core.py\", line 1130, in __call__\r\n    return self.main(*args, **kwargs)\r\n  File \"<redacted>/python3.7/site-packages/click/core.py\", line 1055, in main\r\n    rv = self.invoke(ctx)\r\n  File \"<redacted>/python3.7/site-packages/click/core.py\", line 1404, in invoke\r\n    return ctx.invoke(self.callback, **ctx.params)\r\n  File \"<redacted>/python3.7/site-packages/click/core.py\", line 760, in invoke\r\n    return __callback(*args, **kwargs)\r\n  File \"cli.py\", line 22, in cli\r\n    click.echo(click.format_filename(entry.name))\r\n  File \"<redacted>/python3.7/site-packages/click/utils.py\", line 299, in echo\r\n    file.write(out)  # type: ignore\r\nUnicodeEncodeError: 'utf-8' codec can't encode character '\\udce9' in position 3: surrogates not allowed\r\n```\r\n\r\nOn Click 7 you get the expected output:\r\n\r\n```\r\nfoo�\r\n```\r\n\r\nYou can also run it with a filename argument to see how it passes through click.Path. Using shell completion to complete the filename is the easiest thing to do, in case this escape sequence is unique to my shell (probably not, but I'm not sure).\r\n\r\n```\r\npython cli.py 'foo'$'\\351'\r\n```\r\n\r\nEnvironment:\r\n\r\n- Python version: 3.7 and 3.10 tested\r\n- Click version: 8.1.3\r\n- OS: Linux\r\n\r\n## Cause\r\n\r\nImplementation on Click 7.1.2:\r\n\r\nhttps://github.com/pallets/click/blob/1784558ed7c75c65764d2a434bd9cbb206ca939d/src/click/_compat.py#L470-L475\r\n\r\nImplementation on Click 8:\r\n\r\nhttps://github.com/pallets/click/blob/9c6f4c8e1bb8670ce827c98559f57f6ee5935cd0/src/click/utils.py#L400\r\n\r\nThis means that on Click 8, `format_filename` is a no-op, since `os.fsdecode` returns strings unchanged.\r\n\r\n## Other issues\r\n\r\nUnder [File Path Arguments](https://click.palletsprojects.com/en/8.1.x/arguments#file-path-arguments) (emphasis mine):\r\n\r\n> In the previous example, the files were opened immediately. But what if we just want the filename? The naïve way is to use the default string argument type. However, remember that Click is Unicode-based, so the string will always be a Unicode value. Unfortunately, filenames can be Unicode or bytes depending on which operating system is being used. As such, the type is insufficient.\r\n>\r\n> Instead, you should be using the [Path](https://click.palletsprojects.com/en/8.1.x/api/#click.Path) type, which **automatically handles this ambiguity**. Not only will **it return either bytes or Unicode depending on what makes more sense**, but it will also be able to do some basic checks for you such as existence checks.\r\n\r\n`click.Path` always returns `str` as far as I can tell, unless you explicitly give `type=bytes` so I'm not sure which automatic handling this is referring to. I tried all the way back to Click 1 and didn't see it ever returning bytes. Maybe it's something related to Python 2 and the docs are outdated?\r\n\r\n---\r\n\r\nThese should use fspath. fsdecode calls fspath for you but the decoding part is a no-op since the input is a str.\r\n\r\nhttps://github.com/pallets/click/blob/9c6f4c8e1bb8670ce827c98559f57f6ee5935cd0/src/click/_compat.py#L391-L393\r\n\r\nhttps://github.com/pallets/click/blob/8.1.3/src/click/types.py#L853\r\n\r\n---\r\n\r\nThis fsdecode is a no-op if the `filename: str` type annotation is correct. The `!r` conversion means it gets printed with surrogate escape sequences visible which probably isn't what we want (I think it's probably better to print a replacement character — this is arguable because a technical user could in principle use the repr in Python).\r\n\r\nhttps://github.com/pallets/click/blob/9c6f4c8e1bb8670ce827c98559f57f6ee5935cd0/src/click/exceptions.py#L264-L268\r\n\r\nclick.File doesn't use the repr:\r\n\r\nhttps://github.com/pallets/click/blob/9c6f4c8e1bb8670ce827c98559f57f6ee5935cd0/src/click/types.py#L734\r\n\r\nThis works because sys.stderr.errors defaults to `\"backslashreplace\"`. If you caught this exception and tried to print it to stdout, it would cause a UnicodeEncodeError\r\n\r\n\r\n",
          "type": "issue"
        },
        {
          "author": "RazerM",
          "body": "I'd like to contribute a fix here if you agree it's an issue",
          "created_at": "2023-04-06T20:56:40Z",
          "type": "comment"
        },
        {
          "author": "davidism",
          "body": "> This means that on Click 8, `format_filename` is a no-op, since `os.fsdecode` returns strings unchanged.\r\n\r\nSeems like it should always do that `encode(surrogate).decode()` instead?\r\n\r\n> Maybe it's something related to Python 2 and the docs are outdated?\r\n\r\nYes. In general anything str/bytes related that looks confusing is due to adding Python 3 support then later dropping Python 2 support. It all needs to be cleaned up, and is a huge job.\r\n\r\n> The `!r` conversion means it gets printed with surrogate escape sequences visible\r\n\r\nUsing `!r` everywhere was a mistaken way to put quotes around values in messages. It should use quotes explicitly instead `f\"file '{filename}'\"`.\r\n\r\n> I'd like to contribute a fix here if you agree it's an issue\r\n\r\nSure!\r\n\r\nThat said, I'm in the middle of a massive str/bytes/encoding refactor in Werkzeug right now, so I won't have time to also reason about how Click is doing things or review a PR for a while.",
          "created_at": "2023-04-06T21:08:21Z",
          "type": "comment"
        }
      ]
    },
    {
      "repository": "pallets/click",
      "issue_number": 2379,
      "issue_title": "Unable to see EOFError exception in the traceback with disabled standalone mode",
      "issue_url": "https://github.com/pallets/click/issues/2379",
      "closed_at": "2023-06-30T19:19:56Z",
      "merged_prs": [
        {
          "pr_number": 2380,
          "pr_title": "Do not suppress EOFError/KeyboardInterrupt when standalone is disabled",
          "pr_url": "https://github.com/pallets/click/pull/2380",
          "merged_at": "2023-06-30T19:19:42Z",
          "base_commit": {
            "sha": "df9ad4085d60710b507b54c8fc369ee186eb1d64",
            "ref": "8.1.x"
          }
        }
      ],
      "discussion": [
        {
          "author": "atugushev",
          "body": "According to the [docs](https://click.palletsprojects.com/en/8.0.x/exceptions/?highlight=standalone%20mode#what-if-i-don-t-want-that) disabled standalone mode disables exception handling. However, click still suppresses `EOFError` (as well as `KeyboardInterrupt`) exceptions from the stack trace due to the `raise ... from None` construction, see:\r\n\r\nhttps://github.com/pallets/click/blob/0aec1168ac591e159baf6f61026d6ae322c53aaf/src/click/core.py#L1066-L1068\r\n\r\nI'd suggest changing the [line](https://github.com/pallets/click/blob/0aec1168ac591e159baf6f61026d6ae322c53aaf/src/click/core.py#L1068) to `raise Abort() from e`, so that users can see the original exception in the stack trace.\r\n\r\nReal world example. I use asyncio streams that can [raise IncompleteReadError](https://github.com/python/cpython/blob/d03acd7270d66ddb8e987f9743405147ecc15087/Lib/asyncio/exceptions.py#L29) which inherited from `EOFError`, but I can't see the exception in the stack trace even with disabled standalone mode which looks like a bug to me. \r\n\r\n**How to replicate the bug:**\r\n\r\n1. Create the following script:\r\n```python\r\n# t.py\r\nimport click\r\n\r\n\r\n@click.command()\r\ndef cli():\r\n    raise EOFError('I want to see this exception')\r\n\r\n\r\nif __name__ == '__main__':\r\n    cli.main(standalone_mode=False)\r\n```\r\n\r\n2. Run module `python -m t`\r\n\r\n**Actual behavior:**\r\n\r\n```python\r\nTraceback (most recent call last):\r\n  File \"/Users/albert/.pyenv/versions/3.10.4/lib/python3.10/runpy.py\", line 196, in _run_module_as_main\r\n    return _run_code(code, main_globals, None,\r\n  File \"/Users/albert/.pyenv/versions/3.10.4/lib/python3.10/runpy.py\", line 86, in _run_code\r\n    exec(code, run_globals)\r\n  File \"/private/var/folders/l0/lnq1ghps5yqc4vkgszlcz92m0000gp/T/tmp.X1tRYLrm/t.py\", line 10, in <module>\r\n    cli.main(standalone_mode=False)\r\n  File \"/private/var/folders/l0/lnq1ghps5yqc4vkgszlcz92m0000gp/T/tmp.X1tRYLrm/.venv/lib/python3.10/site-packages/click/core.py\", line 1068, in main\r\n    raise Abort() from None\r\nclick.exceptions.Abort\r\n```\r\n\r\n**Expected behavior:**\r\n\r\n```python\r\nTraceback (most recent call last):\r\n  File \"/private/var/folders/l0/lnq1ghps5yqc4vkgszlcz92m0000gp/T/tmp.X1tRYLrm/.venv/lib/python3.10/site-packages/click/core.py\", line 1055, in main\r\n    rv = self.invoke(ctx)\r\n  File \"/private/var/folders/l0/lnq1ghps5yqc4vkgszlcz92m0000gp/T/tmp.X1tRYLrm/.venv/lib/python3.10/site-packages/click/core.py\", line 1404, in invoke\r\n    return ctx.invoke(self.callback, **ctx.params)\r\n  File \"/private/var/folders/l0/lnq1ghps5yqc4vkgszlcz92m0000gp/T/tmp.X1tRYLrm/.venv/lib/python3.10/site-packages/click/core.py\", line 760, in invoke\r\n    return __callback(*args, **kwargs)\r\n  File \"/private/var/folders/l0/lnq1ghps5yqc4vkgszlcz92m0000gp/T/tmp.X1tRYLrm/t.py\", line 6, in cli\r\n    raise EOFError('I want to see this exception')\r\nEOFError: I want to see this exception\r\n\r\nThe above exception was the direct cause of the following exception:\r\n\r\nTraceback (most recent call last):\r\n  File \"/Users/albert/.pyenv/versions/3.10.4/lib/python3.10/runpy.py\", line 196, in _run_module_as_main\r\n    return _run_code(code, main_globals, None,\r\n  File \"/Users/albert/.pyenv/versions/3.10.4/lib/python3.10/runpy.py\", line 86, in _run_code\r\n    exec(code, run_globals)\r\n  File \"/private/var/folders/l0/lnq1ghps5yqc4vkgszlcz92m0000gp/T/tmp.X1tRYLrm/t.py\", line 10, in <module>\r\n    cli.main(standalone_mode=False)\r\n  File \"/private/var/folders/l0/lnq1ghps5yqc4vkgszlcz92m0000gp/T/tmp.X1tRYLrm/.venv/lib/python3.10/site-packages/click/core.py\", line 1068, in main\r\n    raise Abort() from e\r\nclick.exceptions.Abort\r\n```\r\n\r\n\r\nEnvironment:\r\n\r\n- Python version: 3.10.4\r\n- Click version: 8.1.3\r\n",
          "type": "issue"
        }
      ]
    },
    {
      "repository": "pallets/click",
      "issue_number": 2368,
      "issue_title": "Spurious empty lines in the help output (regression)",
      "issue_url": "https://github.com/pallets/click/issues/2368",
      "closed_at": "2023-06-30T16:44:02Z",
      "merged_prs": [
        {
          "pr_number": 2369,
          "pr_title": "Don't output spurious lines if the truncated help text is actually empty",
          "pr_url": "https://github.com/pallets/click/pull/2369",
          "merged_at": "2023-06-30T16:43:46Z",
          "base_commit": {
            "sha": "a4f5450a2541e2f2f8cacf57f50435eb78422f99",
            "ref": "8.1.x"
          }
        }
      ],
      "discussion": [
        {
          "author": "pocek",
          "body": "Click since version 8.1.0 doesn't properly account for a scenario that the callback's docstring can have no \"help text\" part, like so:\r\n\r\n```python\r\n@click.command()\r\ndef callback():\r\n    \"\"\"\r\n    \\f\r\n    More stuff.\r\n    \"\"\"\r\n```\r\nThis results in empty lines in the output:\r\n\r\n```\r\n% python3 test --help\r\nUsage: test [OPTIONS]\r\n\r\n\r\n\r\nOptions:\r\n  --help  Show this message and exit.\r\n```\r\n\r\nBefore 8.1.0:\r\n```\r\n% python3 test --help\r\nUsage: test [OPTIONS]\r\n\r\nOptions:\r\n  --help  Show this message and exit.\r\n```\r\n\r\nEnvironment:\r\n\r\n- Python version: 3.9.2\r\n- Click version: 8.1.3\r\n",
          "type": "issue"
        }
      ]
    },
    {
      "repository": "pallets/click",
      "issue_number": 2356,
      "issue_title": "`show_choices=False` seems to have no effect",
      "issue_url": "https://github.com/pallets/click/issues/2356",
      "closed_at": "2024-11-02T22:45:05Z",
      "merged_prs": [
        {
          "pr_number": 2365,
          "pr_title": "Fix metavar for Choice options when show_choices=False",
          "pr_url": "https://github.com/pallets/click/pull/2365",
          "merged_at": "2024-11-02T22:45:04Z",
          "base_commit": {
            "sha": "02046e7a19480f85fff7e4577486518abe47e401",
            "ref": "main"
          }
        }
      ],
      "discussion": [
        {
          "author": "zmoon",
          "body": "I noticed when using Typer that even if you pass `show_choices=False`, the choices still get shown in the help. It seems that this is related to Click.\r\n\r\nExample:\r\n```python\r\nimport click\r\n\r\n@click.command()\r\n@click.option('-s', '--string-to-echo', type=click.Choice(['hello', 'world']), show_choices=False)\r\ndef echo(string):\r\n    click.echo(string)\r\n\r\nif __name__ == \"__main__\":\r\n    echo()\r\n```\r\n```\r\nUsage: ... [OPTIONS]\r\n\r\nOptions:\r\n  -s, --string-to-echo [hello|world]\r\n  --help                          Show this message and exit.\r\n```\r\n\r\nI guess it isn't documented what `show_choices` does for `Option` (if anything) in the non-prompt case, but I expected `show_choices=False` to disable showing the choices in the help.\r\n\r\nEnvironment:\r\n\r\n- Python version: 3.9.13\r\n- Click version: 8.1.3\r\n",
          "type": "issue"
        },
        {
          "author": "nachovizzo",
          "body": "I have the same problem",
          "created_at": "2022-09-21T16:12:14Z",
          "type": "comment"
        },
        {
          "author": "nachovizzo",
          "body": "It's somehow strange that there is even a test for this case, but for some reason looks not to be failing\r\n\r\nhttps://github.com/pallets/click/blob/fb4327216543d751e2654a0d3bf6ce3d31c435cc/tests/test_termui.py#L198",
          "created_at": "2022-09-21T16:24:45Z",
          "type": "comment"
        },
        {
          "author": "mrmups",
          "body": "It looks like the `show_choices` option is intended to suppress choices from being displayed inline when `click.prompt()` is used. It's available to `click.option()` because an option can act like a prompt if the `prompt=True` is used.\r\n\r\nAdding `prompt=True` to the option in the original example and running it with no options will result in:\r\n```bash\r\nmups@docker:~$ demoecho\r\nString to echo:\r\n```\r\n\r\nWhere as setting `show_choices=True` would result in:\r\n```bash\r\nmups@docker:~$ demoecho\r\nString to echo (hello, world):\r\n```\r\n\r\nThe help text is showing the metavar of a Choice object. The `Choice.get_metavar()` method could be updated to to check for the `show_choices` param and either return `None` or an empty string. \r\n\r\nThe `None` option would cause the param type to be shown, which would look something like this:\r\n```bash\r\nmups@docker:~$ demoecho --help         \r\nUsage: demoecho [OPTIONS]\r\n\r\nOptions:\r\n  -s, --string-to-echo CHOICE  The string echoed back to stdout.\r\n  --help                       Show this message and exit.\r\n```\r\nBut I think the better option in this case would be to return an empty string which would look like this:\r\n```bash\r\nmups@docker:~$ demoecho --help         \r\nUsage: demoecho [OPTIONS]\r\n\r\nOptions:\r\n  -s, --string-to-echo   The string echoed back to stdout.\r\n  --help                 Show this message and exit.\r\n```\r\n\r\nWhich do you prefer?",
          "created_at": "2022-09-30T01:41:33Z",
          "type": "comment"
        },
        {
          "author": "zmoon",
          "body": "Hi @mrmups . I think better would be `-s, --string-to-echo TEXT` or somesuch would be better actually. `-s, --string-to-echo` by itself kind of suggests boolean flag.",
          "created_at": "2022-09-30T17:37:32Z",
          "type": "comment"
        },
        {
          "author": "mrmups",
          "body": "@zmoon Good point. In fact, it should probably just create a set of metavars based on the `ParamType` of each choice value.\r\nThis would result in this for the original example:\r\n```bash\r\nmups@docker:~$ demoecho --help         \r\nUsage: demoecho [OPTIONS]\r\n\r\nOptions:\r\n  -s, --string [TEXT]  This value echoed back to stdout.\r\n  --help                       Show this message and exit.\r\n```\r\nand if we added the choice `123`:\r\n\r\n```bash\r\nmups@docker:~$ demoecho --help         \r\nUsage: demoecho [OPTIONS]\r\n\r\nOptions:\r\n  -s, --string [TEXT|INTEGER]  This value echoed back to stdout.\r\n  --help                       Show this message and exit.\r\n```",
          "created_at": "2022-10-02T03:18:16Z",
          "type": "comment"
        }
      ]
    },
    {
      "repository": "pallets/click",
      "issue_number": 2355,
      "issue_title": "Incorrect platform detection when using MSYS2 MINGW64",
      "issue_url": "https://github.com/pallets/click/issues/2355",
      "closed_at": "2023-07-06T15:50:10Z",
      "merged_prs": [
        {
          "pr_number": 2554,
          "pr_title": "remove msys2 and app engine detection",
          "pr_url": "https://github.com/pallets/click/pull/2554",
          "merged_at": "2023-07-06T15:50:03Z",
          "base_commit": {
            "sha": "af1e8d44d64181484a60dd63044da706bcc13439",
            "ref": "8.1.x"
          }
        }
      ],
      "discussion": [
        {
          "author": "dlly11",
          "body": "### Description:\r\nWhen running click in MSYS2 MINGW64 Python environment, click is trying to import tty. This fails due to termios not being a package supported by Windows.\r\nThis happens because of the platform detection in _compat.py. The following code detects the platform as being MSYS2 which then tries to use MSYS2 compatible packages: \r\n`MSYS2 = sys.platform.startswith(\"win\") and (\"GCC\" in sys.version)`\r\n\r\nThis does not work when using python packaged with MINGW64 as it still detects the platform as being MSYS2.\r\n\r\n### Reproduce:\r\nOpen a progress bar in MSYS2 MINGW64 Python3 i.e.  \r\n`with click.progressbar(length=10, label=\"Downloading\") as pbar:`\r\n\r\nTraceback (most recent call last):\r\n  File \"C:\\msys64\\mingw64\\lib\\python3.10\\site-packages\\apio\\managers\\installer.py\", line 200, in install\r\n    dlpath = self._download(platform_download_url)\r\n  File \"C:\\msys64\\mingw64\\lib\\python3.10\\site-packages\\apio\\managers\\installer.py\", line 382, in _download\r\n    filed.start()\r\n  File \"C:\\msys64\\mingw64\\lib\\python3.10\\site-packages\\apio\\managers\\downloader.py\", line 68, in start\r\n    with click.progressbar(length=chunks, label=\"Downloading\") as pbar:\r\n  File \"C:\\msys64\\mingw64\\lib\\python3.10\\site-packages\\click\\termui.py\", line 394, in progressbar\r\n    from ._termui_impl import ProgressBar\r\n  File \"C:\\msys64\\mingw64\\lib\\python3.10\\site-packages\\click\\_termui_impl.py\", line 626, in <module>\r\n    import tty\r\n  File \"C:\\msys64\\mingw64\\lib\\python3.10\\tty.py\", line 5, in <module>\r\n    from termios import *\r\nModuleNotFoundError: No module named 'termios'\r\n\r\n### Expected Behaviour:\r\nExpect the platform detection to detect the platform as Windows and not MSYS2.\r\n\r\n### Environment:\r\n\r\n- Platform: MSYS2 MINGW64 \r\n- Python version: 3.10\r\n- Click version: 7.1.2\r\n",
          "type": "issue"
        },
        {
          "author": "davidism",
          "body": "Happy to review a PR. Note that both mingw and msys are not officially supported platforms by us, and are not guaranteed to work. ",
          "created_at": "2022-09-18T02:12:00Z",
          "type": "comment"
        },
        {
          "author": "dlly11",
          "body": "Thanks, I may have a fix that involves using `platform.system()` instead. Just need to check it across different Windows platforms.\r\n\r\n[This comment](https://github.com/conan-io/conan/issues/2638#issuecomment-377393270) is what I am basing it off. I did just install python in the MSYS2 environment and `sys.platform` is returning cygwin for it so that might mean something has changed with how python is packaged in MSYS.",
          "created_at": "2022-09-18T03:55:07Z",
          "type": "comment"
        },
        {
          "author": "dlly11",
          "body": "@davidism I see that the change introduced [here](https://github.com/pallets/click/pull/1393) is now causing this fail. Simply reverting this change seems to work on MSYS2 MINGW64.\r\n\r\nI ran the Pytests with the regular Windows python 3.10, the MSYS2 python 3.10 and the MINGW64 python 3.10.\r\nWindows and MINGW64 passed. MSYS2 failed before and after the reverted change however there was no difference what failed.\r\n\r\n",
          "created_at": "2022-09-18T04:35:32Z",
          "type": "comment"
        },
        {
          "author": "davidism",
          "body": "Thanks for looking at this. However, the previous issue and PR indicate that it was correct at the time because MSYS2 used Bash. Why is removing this correct now? What has changed, and why?",
          "created_at": "2022-09-18T13:03:10Z",
          "type": "comment"
        },
        {
          "author": "dlly11",
          "body": "Hi, I'll have to look through the changes in the MSYS2 repo to see if anything has changed. \n\nI'm seeing python report sys.platform on MSYS as being cygwin so maybe the package maintainers changed how the platform appears to python to resolve issues like this?\n\nI don't think checking for the string GCC is the correct way to go about checking for the platform. Both MSYS and MINGW64 compile python with GCC from what I've gathered. MSYS executables use the POSIX emulation layer but I don't think the MINGW ones do. I haven't checked the clang repos either.\n\nI'll get back to you with what I can find.",
          "created_at": "2022-09-18T21:18:51Z",
          "type": "comment"
        },
        {
          "author": "3b",
          "body": "Ran into this from platformio/platformio#3597 (not sure why they blamed cygwin) and investigated a bit. I think reverting #1393 is the correct solution. I think #1338 was fixed more correctly by #1135, and #1393 was misguided to start with.\r\n\r\nThere are 2 distinct issues:\r\n* which python (this bug)\r\n* which terminal (#1338)\r\n\r\nFor this bug, the question is whether the running python can or should try to load tty/termios libraries. Msys and cygwin provide a compatibility layer that would make that work, so loading them in a python installed from `msys/python` or from cygwin is valid. Other pythons on windows (in particular `mingw64/mingw-w64-x86_64-python` from msys) don't have that and will fail as above. #1393 doesn't distinguish between `msys/` and `mingw64/` and loads termios on both, so if it were kept more tests would have to be done to do this correctly if you really wanted to load termios on `msys/python`.\r\n\r\nFor #1338, the question is whether `stdout`  is a \"windows console\" as you would get from `conhost.exe` or a few other terminal programs, or if it is a named pipe as you would get from various ports of unix terminals, in particular the `mintty` from msys. That is mostly independent of which python you are using, since you can run msys bash in a windows console, and you can run `cmd.exe` in a msys mintty, or you could run either python directly in either terminal without any shell. Msys users are probably more likely to run unix-like terminals, so there is some correlation, but #1393 still gets that wrong since msys2 also has `ucrt64/mingw-w64-ucrt-x86_64-python` and `clang64/mingw-w64-clang-x86_64-python` which it would miss.  #1135 just directly checks for whether we have a console or not, which seems like a better and more general solution.\r\n\r\nTo complicate it further, on recent win 10 conhost can be made to understand utf8+vt100 instead of using console color API (colorama does this if possible now i think?), and recent mintty uses the ConPTY API to allow it to understand the console APIs. The new windows terminal similarly works with either.  None of that helps with the original reporter using 8.1, but it does make it harder to test things without an actual 8.1 install. Testing in mintty with ConPTY disabled does seem to show that #1338 is still a problem without either #1135 or #1393 though, and that #1135 is enough to fix it.\r\n\r\n",
          "created_at": "2022-11-11T10:48:13Z",
          "type": "comment"
        },
        {
          "author": "davidism",
          "body": "@3b thanks for the detailed analysis. It sounds like we should revert #1393 and make sure #1135 is still intact.\r\n\r\n> Testing in mintty with ConPTY disabled\r\n\r\nCould you describe how to do that?\r\n\r\n---\r\n\r\nI'm not a Windows user or developer, all these additional systems are not familiar to me. From some research, it seems like the modern system is msys2, which uses mingw-w64. I'm not sure how accurate all of the following is, but it's what I found trying to figure out the different ways Python might be available on Windows.\r\n\r\n*   Python's official Windows build is a native Windows program.\r\n    *   `py -c 'import sys, os; print(sys.platform, os.name)'` outputs `win32 nt`.\r\n    *   `py -c 'import tty'` fails.\r\n    *   The Microsoft Store also provides python (and asks to install it if you type `python` instead of `py`). It behaves the same.\r\n*   msys2 provides different environments, which target an architecture and C runtime. It provides packages built for each environment, including Python. It uses mingw-w64 to build those packages.\r\n    *   Install msys2 using `scoop install msys2`.\r\n    *   Run `ucrt64` to get a terminal with the ucrt environment.\r\n    *   Run `pacman -S mingw-w64-ucrt-x86_64-python` to install the `python` command in that environment.\r\n    *   `python -c 'import sys, os; print(sys.platform, os.name)'` outputs `win32 nt`.\r\n    *   `python -c 'import tty'` fails.\r\n*   Git for Windows, and its Git Bash program, use msys2 and mingw-w64.\r\n*   msys2 also has an \"internal\" environment based on cygwin.\r\n    *   Run `msys2` to get a terminal.\r\n    *   Run `pacman -S python` to install the `python` command.\r\n    *   `python -c 'import sys, os; print(sys.platform, os.name)'` outputs `cygwin posix`.\r\n    *   `python -c 'import tty'` does not fail.\r\n*   msys2 is an updated fork of msys, and mingw-w64 is an updated fork of mingw.\r\n    *   Install msys using `scoop install msys`.\r\n    *   Run `msys` to get a terminal.\r\n    *   It's not clear how to install Python with msys and mingw, so I didn't test that.\r\n* cygwin is the oldest project. msys and msys2, and the packages they build, are modified from cygwin.\r\n    *   Install cygwin using `scoop install cygwin`.\r\n    *   From the Start menu, select \"Cygwin Setup\" to get the package installer. Search for \"python3\" and select a version to install.\r\n    *   Run `cygwin` to get a terminal.\r\n    *   `python -c 'import sys, os; print(sys.platform, os.name)'` outputs `cygwin posix`.\r\n    *   `python -c 'import tty'` does not fail.\r\n*   It's possible to run `py` from within all these different environments. It still behaves the same as running from a Windows terminal, `tty` is not available.\r\n*   It looks like Python built with cygwin sees a Linux-like environment, and Python built with mingw-w64 sees a Windows-like environment.",
          "created_at": "2023-07-06T01:42:38Z",
          "type": "comment"
        },
        {
          "author": "davidism",
          "body": "I've confirmed that `click.echo` and `click.progressbar` continue to work after reverting #1393, in both cygwin and win32 environments.",
          "created_at": "2023-07-06T15:02:59Z",
          "type": "comment"
        },
        {
          "author": "3b",
          "body": "> > Testing in mintty with ConPTY disabled\r\n> \r\n> Could you describe how to do that?\r\n\r\nI think i was using `mintty --pcon off`, ",
          "created_at": "2023-07-06T17:41:35Z",
          "type": "comment"
        }
      ]
    },
    {
      "repository": "pallets/click",
      "issue_number": 2344,
      "issue_title": "zsh completion requires pressing tab twice",
      "issue_url": "https://github.com/pallets/click/issues/2344",
      "closed_at": "2023-06-30T18:31:46Z",
      "merged_prs": [
        {
          "pr_number": 2544,
          "pr_title": "fix zsh completion loaded from fpath",
          "pr_url": "https://github.com/pallets/click/pull/2544",
          "merged_at": "2023-06-30T18:31:39Z",
          "base_commit": {
            "sha": "850bffe0b9db27f52f6f3f0a66eb6df432ce8bcd",
            "ref": "8.1.x"
          }
        }
      ],
      "discussion": [
        {
          "author": "Freed-Wu",
          "body": "```\r\n❯ black --<TAB>\r\n# Nothing will happen\r\n❯ black --<TAB>\r\nunsorted\r\n--code                        Format the code passed in as a string.\r\n...\r\n# work after second time\r\n```\r\n\r\nExpected:\r\n\r\n```\r\n❯ black --<TAB>\r\nunsorted\r\n--code                        Format the code passed in as a string.\r\n...\r\n# work after first time\r\n```\r\n\r\n<details><summary>Original investigation</summary>\r\n\r\n```zsh\r\n❯ _BLACK_COMPLETE=zsh_source black\r\n#compdef black\r\n\r\n_black_completion() {\r\n    local -a completions\r\n    local -a completions_with_descriptions\r\n    local -a response\r\n    (( ! $+commands[black] )) && return 1\r\n\r\n    response=(\"${(@f)$(env COMP_WORDS=\"${words[*]}\" COMP_CWORD=$((CURRENT-1)) _BLACK_COMPLETE=zsh_complete black)}\")\r\n\r\n    for type key descr in ${response}; do\r\n        if [[ \"$type\" == \"plain\" ]]; then\r\n            if [[ \"$descr\" == \"_\" ]]; then\r\n                completions+=(\"$key\")\r\n            else\r\n                completions_with_descriptions+=(\"$key\":\"$descr\")\r\n            fi\r\n        elif [[ \"$type\" == \"dir\" ]]; then\r\n            _path_files -/\r\n        elif [[ \"$type\" == \"file\" ]]; then\r\n            _path_files -f\r\n        fi\r\n    done\r\n\r\n    if [ -n \"$completions_with_descriptions\" ]; then\r\n        _describe -V unsorted completions_with_descriptions -U\r\n    fi\r\n\r\n    if [ -n \"$completions\" ]; then\r\n        compadd -U -V unsorted -a completions\r\n    fi\r\n}\r\n\r\ncompdef _black_completion black;\r\n```\r\n\r\nthat is equivalent to\r\n\r\n```zsh\r\n_black() {\r\n  _black_completion() {\r\n      local -a completions\r\n      local -a completions_with_descriptions\r\n      local -a response\r\n      (( ! $+commands[black] )) && return 1\r\n\r\n      response=(\"${(@f)$(env COMP_WORDS=\"${words[*]}\" COMP_CWORD=$((CURRENT-1)) _BLACK_COMPLETE=zsh_complete black)}\")\r\n\r\n      for type key descr in ${response}; do\r\n          if [[ \"$type\" == \"plain\" ]]; then\r\n              if [[ \"$descr\" == \"_\" ]]; then\r\n                  completions+=(\"$key\")\r\n              else\r\n                  completions_with_descriptions+=(\"$key\":\"$descr\")\r\n              fi\r\n          elif [[ \"$type\" == \"dir\" ]]; then\r\n              _path_files -/\r\n          elif [[ \"$type\" == \"file\" ]]; then\r\n              _path_files -f\r\n          fi\r\n      done\r\n\r\n      if [ -n \"$completions_with_descriptions\" ]; then\r\n          _describe -V unsorted completions_with_descriptions -U\r\n      fi\r\n\r\n      if [ -n \"$completions\" ]; then\r\n          compadd -U -V unsorted -a completions\r\n      fi\r\n  }\r\n\r\n  compdef _black_completion black;\r\n}\r\ncompdef _black black  # because first line comment\r\n```\r\n\r\nSo, in the first time, `compdef _black black` tell zsh the completion function is `_black()`, but `_black()` not return any completion items, only define a new function named `_black_completion` and `compdef _black_completion black`. So when the second time, it work.\r\n\r\nThe fix method is remove the nested function definition:\r\n\r\n```zsh\r\n❯ _BLACK_COMPLETE=zsh_source black\r\n#compdef black\r\n\r\nlocal -a completions\r\nlocal -a completions_with_descriptions\r\nlocal -a response\r\n(( ! $+commands[black] )) && return 1\r\n\r\nresponse=(\"${(@f)$(env COMP_WORDS=\"${words[*]}\" COMP_CWORD=$((CURRENT-1)) _BLACK_COMPLETE=zsh_complete black)}\")\r\n\r\nfor type key descr in ${response}; do\r\n    if [[ \"$type\" == \"plain\" ]]; then\r\n        if [[ \"$descr\" == \"_\" ]]; then\r\n            completions+=(\"$key\")\r\n        else\r\n            completions_with_descriptions+=(\"$key\":\"$descr\")\r\n        fi\r\n    elif [[ \"$type\" == \"dir\" ]]; then\r\n        _path_files -/\r\n    elif [[ \"$type\" == \"file\" ]]; then\r\n        _path_files -f\r\n    fi\r\ndone\r\n\r\nif [ -n \"$completions_with_descriptions\" ]; then\r\n    _describe -V unsorted completions_with_descriptions -U\r\nfi\r\n\r\nif [ -n \"$completions\" ]; then\r\n    compadd -U -V unsorted -a completions\r\nfi\r\n```\r\n\r\n</details>",
          "type": "issue"
        },
        {
          "author": "davidism",
          "body": "There is an issue here, but the explanation either isn't correct or is very unclear.\r\n\r\nCompletion works correctly the first time when using the two methods shown in the documentation: `eval \"$(_BLACK_COMPLETE=zsh_source black)\"`, or `_BLACK_COMPLETE=zsh_source > ~/.black-complete.zsh` with `. ~/.black-complete.zsh` in `.zshrc`.\r\n\r\nIt doesn't work with placing the script on `fpath` like `... > ~/.zfunc/_black` for ZSH's autoload. https://unix.stackexchange.com/a/240192 shows that for autoload scripts, you do need to call the script as you do in your PR. But otherwise you need to register it with `compdef` as it's done now.",
          "created_at": "2023-06-30T18:13:08Z",
          "type": "comment"
        }
      ]
    },
    {
      "repository": "pallets/click",
      "issue_number": 2341,
      "issue_title": "Please document how to add help text after the auto-generated command list help",
      "issue_url": "https://github.com/pallets/click/issues/2341",
      "closed_at": "2023-06-30T19:43:58Z",
      "merged_prs": [
        {
          "pr_number": 2545,
          "pr_title": "add documentation example for epilog",
          "pr_url": "https://github.com/pallets/click/pull/2545",
          "merged_at": "2023-06-30T19:43:52Z",
          "base_commit": {
            "sha": "5bdd9546ebc7f2c0c64e5539c8d16523ffcfc813",
            "ref": "8.1.x"
          }
        }
      ],
      "discussion": [
        {
          "author": "sirlark",
          "body": "The documentation covers in decent detail how to add help strings to each your groups, commands, and arguments but does not cover how to add general text to groups or the utility as a whole. I found the `epilog` field on the Group class but as far as I can tell it's entirely undocumented. Also, the indentation semantics are non-obvious. Finally, I can't find an equivalent for the script/app as a whole.\r\n\r\nAs an example of this feature, I wanted to add a usage example list **after** the auto-generated command/argument help text, such as in\r\n\r\n```\r\nUsage: clickdoc [OPTIONS] COMMAND [ARGS]...\r\n\r\n  SQLFluff is a modular SQL linter for humans.\r\n\r\nOptions:\r\n  --version   Show the version and exit.\r\n  -h, --help  Show this message and exit.\r\n\r\nCommands:\r\n  docs  Generate some docs\r\n  version   Show the version of clickdoc.\r\n\r\nExamples:\r\n  clickdoc docs a_path\r\n  clickdoc docs --put-option-here\r\n```",
          "type": "issue"
        }
      ]
    },
    {
      "repository": "pallets/click",
      "issue_number": 2336,
      "issue_title": "`expose_value=false` causes crash when auto-completing.",
      "issue_url": "https://github.com/pallets/click/issues/2336",
      "closed_at": "2023-07-06T18:14:14Z",
      "merged_prs": [
        {
          "pr_number": 2556,
          "pr_title": "completion doesn't fail with `expose_value=False`",
          "pr_url": "https://github.com/pallets/click/pull/2556",
          "merged_at": "2023-07-06T18:14:09Z",
          "base_commit": {
            "sha": "549947111c4af2191dd4b245e1de2c25d20c36d6",
            "ref": "8.1.x"
          }
        }
      ],
      "discussion": [
        {
          "author": "bakhtiary",
          "body": "setting `expose_value=false` for an argument causes crash when auto-completing.\r\n\r\nTo replicate:\r\n\r\n```python\r\n# example.py\r\nimport click\r\n\r\n@click.command\r\n@click.argument('a', expose_value=False)\r\ndef main():\r\n    pass\r\n\r\nmain()\r\n```\r\n\r\n```\r\n$ _EXAMPLE_PY_COMPLETE=zsh_complete COMP_CWORD=1 COMP_WORDS=\"BUG \" python example.py BUG\r\n```\r\n\r\nyou should get something like the following\r\n``` bash\r\n  File \"/home/amir/projects/click/bug\", line 13, in <module>\r\n    gogo()\r\n  File \"/home/amir/projects/click/src/click/core.py\", line 1130, in __call__\r\n    return self.main(*args, **kwargs)\r\n  File \"/home/amir/projects/click/src/click/core.py\", line 1050, in main\r\n    self._main_shell_completion(extra, prog_name, complete_var)\r\n  File \"/home/amir/projects/click/src/click/core.py\", line 1125, in _main_shell_completion\r\n    rv = shell_complete(self, ctx_args, prog_name, complete_var, instruction)\r\n  File \"/home/amir/projects/click/src/click/shell_completion.py\", line 49, in shell_complete\r\n    echo(comp.complete())\r\n  File \"/home/amir/projects/click/src/click/shell_completion.py\", line 291, in complete\r\n    completions = self.get_completions(args, incomplete)\r\n  File \"/home/amir/projects/click/src/click/shell_completion.py\", line 272, in get_completions\r\n    obj, incomplete = _resolve_incomplete(ctx, args, incomplete)\r\n  File \"/home/amir/projects/click/src/click/shell_completion.py\", line 575, in _resolve_incomplete\r\n    if _is_incomplete_argument(ctx, param):\r\n  File \"/home/amir/projects/click/src/click/shell_completion.py\", line 439, in _is_incomplete_argument\r\n    value = ctx.params[param.name]\r\nKeyError: 'a'\r\n```\r\n\r\nI think the correct behavior is that nothing should happen or some thing should be printed to stdout. but it shouldn't crash\r\n\r\nEnvironment:\r\n\r\n- Python version: 3.10\r\n- Click version: main",
          "type": "issue"
        },
        {
          "author": "jcrotts",
          "body": "Changing this [line](https://github.com/pallets/click/blob/c65c6ad18471448c0fcc59ef53088787288c02cc/src/click/shell_completion.py#L439) to `ctx.params.get(param.name)` prints out the helptext for the command instead of the error, maybe preferable to changing `expose_value`.",
          "created_at": "2022-12-05T21:33:40Z",
          "type": "comment"
        }
      ]
    },
    {
      "repository": "pallets/click",
      "issue_number": 2332,
      "issue_title": "Invalid info_name with shiv and pex",
      "issue_url": "https://github.com/pallets/click/issues/2332",
      "closed_at": "2023-06-30T16:04:34Z",
      "merged_prs": [
        {
          "pr_number": 2333,
          "pr_title": "Fix help output for Shiv and PEX",
          "pr_url": "https://github.com/pallets/click/pull/2333",
          "merged_at": "2023-06-30T16:04:28Z",
          "base_commit": {
            "sha": "6e704050f1149b00f3b3e7576e25b1e28c76ccf3",
            "ref": "8.1.x"
          }
        }
      ],
      "discussion": [
        {
          "author": "harkabeeparolus",
          "body": "## Summary\r\n\r\nWhen Click is used inside zipapps produced by Shiv or PEX, it displays an invalid \"Usage\" string. Instead of \"Usage: program\" it says \"Usage: python -m program\".\r\n\r\nI did some digging and found that this is due to *info_name* being guessed incorrectly in the code introduced by #1609. There is a [test for `__package__` being set to `None`](https://github.com/MLH-Fellowship/click/blob/faaec8294eb819e9f8e6f568ae81b711a861ebbe/src/click/utils.py#L470); however, in the case when the script is run inside Shiv or PEX, `__package__` is instead set to the empty string (\"\"). This is allowed by PEP 366:\r\n\r\n> Note that setting __package__ to the empty string explicitly is permitted, and has the effect of disabling all relative imports from that module (since the import machinery will consider it to be a top level module in that case).\r\n\r\n## Reproducing\r\n\r\nFollow the basic [Shiv hello world example](https://shiv.readthedocs.io/en/latest/#hello-world), but add Click:\r\n\r\n_hello.py_:\r\n```python\r\nimport click\r\n\r\n@click.command()\r\ndef main():\r\n    print(\"Hello world\")\r\n\r\nif __name__ == \"__main__\":\r\n    main()\r\n```\r\n\r\n_setup.py_:\r\n```python\r\nfrom setuptools import setup\r\n\r\nsetup(\r\n    name=\"hello-world\",\r\n    version=\"0.0.1\",\r\n    description=\"Greet the world.\",\r\n    py_modules=[\"hello\"],\r\n    entry_points={\r\n        \"console_scripts\": [\"hello=hello:main\"],\r\n    },\r\n    install_requires=['Click==8.1.3'],\r\n)\r\n```\r\n\r\nBuild the executable zipapps and run them:\r\n```text\r\n$ shiv . -c hello -o hello1.pyz\r\n$ pex . -c hello -o hello2.pyz\r\n\r\n$ ./hello1.pyz --help\r\nUsage: python -m hello1 [OPTIONS]\r\n\r\n$ ./hello2.pyz foo\r\nUsage: python -m hello2 [OPTIONS]\r\nTry 'python -m hello2 --help' for help.\r\n```\r\n\r\n## Expected behavior\r\n\r\nClick should not print the Usage string as \"python -m hello\"; it should just be \"hello\".\r\n\r\n## Environment:\r\n\r\n- Python version: 3.10.5\r\n- Click version: 8.1.3\r\n- Shiv version: 1.0.1\r\n- Pex version: 2.1.102",
          "type": "issue"
        },
        {
          "author": "davidism",
          "body": "If you know you're packaging your app with those tools, you can set the program name directly:\r\n\r\n```python\r\nmain(prog_name=\"my-command\")\r\n```",
          "created_at": "2022-08-02T15:42:37Z",
          "type": "comment"
        },
        {
          "author": "harkabeeparolus",
          "body": "> ```python\r\n> main(prog_name=\"my-command\")\r\n> ```\r\n\r\nHey, thanks! I didn't realize that parameter existed. That's good to know. 😊\r\n\r\nHowever, this used to work out of the box until #1609, so I would prefer if we could restore it. This bug has prevented me from upgrading from Click 7 for the longest time, which is why I finally found the energy to fix the problem and create a PR. 😉",
          "created_at": "2022-08-02T16:29:35Z",
          "type": "comment"
        }
      ]
    },
    {
      "repository": "pallets/click",
      "issue_number": 2322,
      "issue_title": "strip \"_command\" suffix when generating command name",
      "issue_url": "https://github.com/pallets/click/issues/2322",
      "closed_at": "2023-09-01T21:17:55Z",
      "merged_prs": [
        {
          "pr_number": 2604,
          "pr_title": "remove suffixes from generated command name",
          "pr_url": "https://github.com/pallets/click/pull/2604",
          "merged_at": "2023-09-01T21:17:53Z",
          "base_commit": {
            "sha": "b63ace28d50b53e74b5260f6cb357ccfe5560133",
            "ref": "main"
          }
        }
      ],
      "discussion": [
        {
          "author": "davidism",
          "body": "You often want a command to have the same name as a function it is wrapping. However, this will cause a name collision, if your command is going to call `init_data` its function can't also be called `init_data`. So instead it's written as `init_data_command`, and then the command name has to be specified manually `@command(\"init-data\")`. Click should remove a `_command` suffix when generating the command name from the function name.\r\n\r\n```python\r\ndef init_data(external=False):\r\n    ...\r\n\r\n@cli.command\r\n@click.option(\"--external/--internal\")\r\ndef init_data_command(external):\r\n    init_data(external=external)\r\n\r\n```\r\n\r\nCurrently this command would be named `init-data-command`. After the change, it would be `init-data`.",
          "type": "issue"
        },
        {
          "author": "bebleo",
          "body": "Hi @davidism, Am I right in assuming the expected behaviour would be that both `_command` and `_cmd` suffixes are dropped?\r\n\r\nAn example using `_cmd` as a suffix:\r\n\r\nhttps://github.com/pallets/click/blob/fb4327216543d751e2654a0d3bf6ce3d31c435cc/examples/imagepipe/imagepipe.py#L74-L98",
          "created_at": "2022-09-10T17:06:50Z",
          "type": "comment"
        }
      ]
    },
    {
      "repository": "pallets/click",
      "issue_number": 2295,
      "issue_title": "can't get list of bools using multiple flag",
      "issue_url": "https://github.com/pallets/click/issues/2295",
      "closed_at": "2023-07-03T16:31:33Z",
      "merged_prs": [
        {
          "pr_number": 2550,
          "pr_title": "allow `multiple=True` with flags",
          "pr_url": "https://github.com/pallets/click/pull/2550",
          "merged_at": "2023-07-03T16:31:19Z",
          "base_commit": {
            "sha": "d34d31f6dde4350f9508f0327698f851c595d91c",
            "ref": "8.1.x"
          }
        }
      ],
      "discussion": [
        {
          "author": "solarmist",
          "body": "I have an option that is a list of `bool`s, but I'm pairing each boolean value with another `multiple` option. So I do actually need a list of booleans and not just a count of values because order matters.\r\nI'm not using `is_flag`, but I assume this translates to the same under the hood.\r\n\r\n```\r\n@click.option(\r\n    \"--collection/--single\",\r\n    \"-c/-s\",\r\n    type=bool,\r\n    default=[False],\r\n    count=True,\r\n    help=(\r\n        \"Is a file a collection of books? Add once for every file included. \"\r\n        \"Consumed in order of files.\"\r\n    ),\r\n)\r\n@click.option(\r\n    \"--file\",\r\n    \"-f\",\r\n    required=True,\r\n    type=click.Path(\r\n        exists=True, readable=True, dir_okay=False, allow_dash=True, path_type=str\r\n    ),\r\n    multiple=True,\r\n    help=(\r\n        \"The path of the input file.  Note: Every file must be paired with a language. \"\r\n        \"And the pairs will be processed left to right.\"\r\n    ),\r\n)\r\n\r\n```\r\n\r\nEnvironment:\r\n\r\nPython version: 3.9.7.1\r\nClick version: 8.1.3\r\n\r\nIs there an alternative way I should be doing this? If not #2246 breaks my code.",
          "type": "issue"
        }
      ]
    },
    {
      "repository": "pallets/click",
      "issue_number": 2294,
      "issue_title": "Parameter decorator factories shouldn't pop `cls` from `attrs`",
      "issue_url": "https://github.com/pallets/click/issues/2294",
      "closed_at": "2023-07-04T01:30:01Z",
      "merged_prs": [
        {
          "pr_number": 2312,
          "pr_title": "Add `cls` to signature of `@argument` and `@option`",
          "pr_url": "https://github.com/pallets/click/pull/2312",
          "merged_at": "2023-07-04T01:29:36Z",
          "base_commit": {
            "sha": "c77966e092edc9b8835e7327294b9177059fc90e",
            "ref": "8.1.x"
          }
        }
      ],
      "discussion": [
        {
          "author": "janluke",
          "body": "Popping `cls` introduces a side-effect that prevents the reuse of the returned decorator. For example, consider the code below. The function `my_shared_argument` is a decorator that is expected to register an argument of type `ArgumentWithHelp`. Instead, what happens is:\r\n- the first time the decorator is used, `cls=ArgumentWithHelp` will be popped from `attrs` -> `attrs` is now modified in-place\r\n- the following times the decorator is used, `cls` won't be in `attrs`.\r\n\r\n```python\r\nimport click\r\n\r\n\r\nclass ArgumentWithHelp(click.Argument):\r\n    def __init__(self, *args, help=None, **attrs):\r\n        super().__init__(*args, **attrs)\r\n        self.help = help\r\n\r\n\r\ndef argument_with_help(*args, cls=ArgumentWithHelp, **kwargs):\r\n    return click.argument(*args, cls=cls, **kwargs)\r\n\r\n\r\nmy_shared_argument = argument_with_help(\"pippo\", help=\"very useful help\")\r\n\r\n\r\n@click.command()\r\n@my_shared_argument\r\ndef foo(pippo):\r\n    print(pippo)\r\n\r\n\r\n@click.command()\r\n@my_shared_argument\r\ndef bar(pippo):\r\n    print(pippo)\r\n```\r\n\r\nRunning this file as it is:\r\n```python\r\nTraceback (most recent call last):\r\n  File \"C:/Users/sboby/AppData/Roaming/JetBrains/PyCharmCE2022.1/scratches/scratch_4.py\", line 27, in <module>\r\n    def bar(pippo):\r\n  File \"H:\\Repo\\unbox\\UnboxTranslate\\venv\\lib\\site-packages\\click\\decorators.py\", line 287, in decorator\r\n    _param_memo(f, ArgumentClass(param_decls, **attrs))\r\n  File \"H:\\Repo\\unbox\\UnboxTranslate\\venv\\lib\\site-packages\\click\\core.py\", line 2950, in __init__\r\n    super().__init__(param_decls, required=required, **attrs)\r\nTypeError: __init__() got an unexpected keyword argument 'help'\r\n\r\nProcess finished with exit code 1\r\n```\r\n\r\n<strike>The `@option`  decorator is affected by the same problem but it won't crash in a similar situation because `click.Option.__init__` ignore extra arguments: it will just silently use `click.Option` as class.</strike>\r\n\r\nThe `@option` decorator is actually not affected because `attrs` is copied. This copy is nonetheless unnecessary, since adding `cls` to the signature of the function would be a more straightforward solution.\r\n\r\nEnvironment:\r\n\r\n- Python version: irrelevant\r\n- Click version: 8.1.3 (but all versions are affected)\r\n",
          "type": "issue"
        },
        {
          "author": "kdeldycke",
          "body": "I can confirm this issue. I encountered it while trying to refactor [`click-extra`](https://github.com/kdeldycke/click-extra) to use the new `params=` feature from click v8.1.0 (see: #2131 & #2203).",
          "created_at": "2022-07-25T17:23:18Z",
          "type": "comment"
        },
        {
          "author": "janluke",
          "body": "@kdeldycke Just in case you missed it, this issue was already fixed in Cloup (see https://github.com/janluke/cloup/pull/124).",
          "created_at": "2022-07-28T12:36:40Z",
          "type": "comment"
        },
        {
          "author": "kdeldycke",
          "body": "@janluke yes! That's perfect and why I've based all my custom option on Cloup's.\r\n\r\nStill, I would be happy to have that bug fixed upstream in Click, so I can promise Click Extra users they can freely mix-n-match their CLI with stuff coming from everywhere as long as they descends from Click's reference implementation.",
          "created_at": "2022-08-09T10:10:05Z",
          "type": "comment"
        }
      ]
    },
    {
      "repository": "pallets/click",
      "issue_number": 2292,
      "issue_title": "Multi-value flags broken by recent change",
      "issue_url": "https://github.com/pallets/click/issues/2292",
      "closed_at": "2023-07-03T16:31:31Z",
      "merged_prs": [
        {
          "pr_number": 2550,
          "pr_title": "allow `multiple=True` with flags",
          "pr_url": "https://github.com/pallets/click/pull/2550",
          "merged_at": "2023-07-03T16:31:19Z",
          "base_commit": {
            "sha": "d34d31f6dde4350f9508f0327698f851c595d91c",
            "ref": "8.1.x"
          }
        }
      ],
      "discussion": [
        {
          "author": "hashstat",
          "body": "A recent change (#2248), introduced in version 8.1.3, breaks a feature that allowed flag options to be used as aliases for multi-value options.\r\n\r\nHere's an example that demonstrates two uses of the feature:\r\n```python3\r\n# feature.py\r\nimport click\r\n\r\n@click.command\r\n@click.option('--bar', 'tags', flag_value='bar', multiple=True, help='Alias for `--tag bar`.')\r\n@click.option('--baz', 'tags', flag_value='baz', multiple=True, help='Alias for `--tag baz`.')\r\n@click.option('--foo', 'tags', flag_value='foo', multiple=True, help='Alias for `--tag foo`.')\r\n@click.option('-m', '--tag', 'tags', type=click.Choice(['foo', 'bar', 'baz']), multiple=True)\r\n@click.option('-q', '--quiet', 'verbosity', is_flag=True, flag_value=-1, multiple=True)\r\n@click.option('-v', '--verbose', 'verbosity', is_flag=True, flag_value=1, multiple=True)\r\ndef main(tags: tuple[str, ...], verbosity: tuple[int, ...]) -> None:\r\n    print(f'tags = {tags}')\r\n    print(f'verbosity = {sum(verbosity)}')\r\n\r\nif __name__ == '__main__':\r\n    main()\r\n```\r\n\r\nAs of version 8.1.3, a TypeError is raised:\r\n```Python Traceback\r\n  File \"feature.py\", line 11, in <module>\r\n    def main(tags: tuple[str, ...], verbosity: tuple[int, ...]) -> None:\r\n  File \"venv/lib/python3.9/site-packages/click/decorators.py\", line 308, in decorator\r\n    _param_memo(f, OptionClass(param_decls, **option_attrs))\r\n  File \"venv/lib/python3.9/site-packages/click/core.py\", line 2584, in __init__\r\n    raise TypeError(\"'multiple' is not valid with 'is_flag', use 'count'.\")\r\nTypeError: 'multiple' is not valid with 'is_flag', use 'count'.\r\n```\r\n\r\nBut it works great in version 8.1.2 and earlier:\r\n```shell\r\n$ python3 feature.py  --tag bar --foo --baz -vvvq\r\ntags = ('bar', 'foo', 'baz')\r\nverbosity = 2\r\n```\r\n\r\nEnvironment:\r\n\r\n- Python version: 3.9.12\r\n- Click version: 8.1.3\r\n",
          "type": "issue"
        },
        {
          "author": "davidism",
          "body": "Happy to review a PR ",
          "created_at": "2022-05-24T17:43:35Z",
          "type": "comment"
        },
        {
          "author": "marcosfelt",
          "body": "Was this fixed?",
          "created_at": "2022-08-17T11:13:27Z",
          "type": "comment"
        },
        {
          "author": "epruesse",
          "body": "@marcosfelt Fix exists in PR #2293 by @hashstat but has not been merged. \r\n\r\n@davidism could you review? It's really concise PR, just being more specific in raising an exception. PR also diligently adds test case for the feature. ",
          "created_at": "2022-10-26T22:06:35Z",
          "type": "comment"
        }
      ]
    },
    {
      "repository": "fastapi/typer",
      "issue_number": 986,
      "issue_title": "Deprecate support for `is_flag` and `flag_value` parameters",
      "issue_url": "https://github.com/fastapi/typer/issues/986",
      "closed_at": "2024-11-07T16:52:31Z",
      "merged_prs": [
        {
          "pr_number": 987,
          "pr_title": "🗑️ Deprecate support for `is_flag` and `flag_value` parameters",
          "pr_url": "https://github.com/fastapi/typer/pull/987",
          "merged_at": "2024-11-07T16:52:30Z",
          "base_commit": {
            "sha": "1823714798c2cdaf4cbda0a639e7cf0aa85bd88a",
            "ref": "master"
          }
        }
      ],
      "discussion": [
        {
          "author": "svlandeg",
          "body": "### Privileged issue\n\n- [X] I'm @tiangolo or he asked me directly to create an issue here.\n\n### Issue Content\n\nTyper's code base currently contains `is_flag` and `flag_value` parameters like Click does. However, the current behaviour is inconsistent with Click's behaviour, and not documented.\r\n\r\nIn discussion with @tiangolo, we've come to the conclusion that these parameters are pretty confusing overall to work with. There are essentially two defaults (one set in code, and one set by `flag_value`) and then an option to set an arbitrary value to something that is a \"flag\". We feel that any behaviour obtained by this combination of parameters can probably be achieved easily with some internal logic and more straightforward (and properly typed) options/arguments.\r\n\r\nAs such, we've decided to remove these options from the code base as they're not really functional right now anyway.",
          "type": "issue"
        },
        {
          "author": "svlandeg",
          "body": "Related discussions:\r\n\r\n- https://github.com/fastapi/typer/discussions/608\r\n- https://github.com/fastapi/typer/discussions/873\r\n- https://github.com/fastapi/typer/pull/872",
          "created_at": "2024-09-13T09:25:22Z",
          "type": "comment"
        }
      ]
    },
    {
      "repository": "fastapi/typer",
      "issue_number": 949,
      "issue_title": "Improve support for autocompletion: `shell_complete` vs `autocompletion`",
      "issue_url": "https://github.com/fastapi/typer/issues/949",
      "closed_at": "2024-12-04T17:21:11Z",
      "merged_prs": [
        {
          "pr_number": 974,
          "pr_title": "🗑️ Deprecate `shell_complete` and continue to use `autocompletion` for CLI parameters",
          "pr_url": "https://github.com/fastapi/typer/pull/974",
          "merged_at": "2024-12-04T17:21:10Z",
          "base_commit": {
            "sha": "5f378eec9d8400960e89a305763572f97237afe4",
            "ref": "master"
          }
        }
      ],
      "discussion": [
        {
          "author": "tiangolo",
          "body": "### Privileged issue\r\n\r\n- [X] I'm @tiangolo or he asked me directly to create an issue here.\r\n\r\n### Issue Content\r\n\r\n## In Short\r\n\r\nWe want a single parameter to handle CLI parameter autocompletion, based on type annotations.\r\n\r\n## Current State\r\n\r\nRight now the Typer docs only talk about the function for the parameter `autocompletion`.\r\n\r\nAnd Typer has (proper) support for that function based on type annotations.\r\n\r\nIt checks the types for a `Context`, `list[str]` for other args, and `str` for the current incomplete args: https://typer.tiangolo.com/tutorial/options-autocompletion/#types-types-everywhere\r\n\r\nThe support for autocompletion is based on the type annotations (like the rest of Typer), not on the order or name of the arguments.\r\n\r\nNow with Click 8.x the underlying parameter `autocompletion` was removed and there's a new one `shell_complete` (https://click.palletsprojects.com/en/8.1.x/api/#click.ParamType.shell_complete).\r\n\r\nIn Typer, `autocompletion` raises a warning already: https://github.com/fastapi/typer/blob/master/typer/core.py#L65\r\n\r\nBut there are no docs nor proper support for `shell_complete` based on type annotations.\r\n\r\n## We Want\r\n\r\nWe want to have support for completion based on type annotations. The parameter should be able to expect a `Context` and a `str` with the incomplete parameter. But I'm not sure of the parameter name for this function.\r\n\r\n**Note**: we probably don't need to support `list[str]` for extra args as that's available from [`context.args`](https://click.palletsprojects.com/en/8.1.x/api/#click.Context.args).\r\n\r\nWe should have that as the main documented feature. We could have a note at the end mentioning that there's a (now deprecated) `autocompletion` parameter, with the basics of how it worked, but the main functionality would be with the new parameter.\r\n\r\n## Hardest Problem in CS: Naming\r\n\r\nWriting this I'm realizing that in Typer I'm using the same parameter name that was available in Click: `autocompletion`, but in reality, it has different semantics.\r\n\r\nIn Click, the meaning of the parameters is based on the position/order.\r\n\r\nIn [Click 7.x](https://click.palletsprojects.com/en/7.x/bashcomplete/#completion-help-strings) it had to be in the exact order of `ctx`, `args`, `incomplete`:\r\n\r\n```Python\r\ndef get_colors(ctx, args, incomplete):\r\n    ...\r\n```\r\n\r\nIn [Click 8.x](https://click.palletsprojects.com/en/8.1.x/shell-completion/#overriding-value-completion) it has to be the exact order of `ctx`, `param`, `incomplete`:\r\n\r\n```Python\r\ndef complete_env_vars(ctx, param, incomplete):\r\n    ...\r\n```\r\n\r\nIn Typer, `autocompletion` it's based on the type annotations, which also means that the order doesn't matter, if all of the parameters are present or not doesn't matter, the name of the parameters doesn't matter. The only thing that matters is the type annotations: https://typer.tiangolo.com/tutorial/options-autocompletion/#types-types-everywhere\r\n\r\nThis means that the name of the parameter `autocompletion` is the same as in Click, but the semantics are actually not the same. :thinking: \r\n\r\nThat makes me think that maybe the parameter should have a different name, so that people don't get confused with it assuming it's the same as in Click, and it really is not, at least not in the same way.\r\n\r\nMaybe we should just keep the same name `autocompletion` just because that's the main name we've had documented in Typer. :thinking: \r\n\r\nMy original thought was to support a parameter `shell_complete` (like the one in Click) but based on type annotations. But now thinking about it, I think maybe it makes more sense to have a different name (or just keep the old `autocompletion` name). And have it based on type annotations.\r\n\r\nI think the new/final parameter should be able to request (via type annotations) the `Context` and the `incomplete` `str`. I don't think we should support it requesting the `param` Click `Parameter` until we find a reason to do so (I can't find any yet).\r\n\r\nThe other thing is, the old Click `autocompletion` supported returning `str` values or tuples. The new `shell_complete` expects objects of type `CompletionItem`, but I wouldn't think requiring users to import that class and create instances of it would be a great developer experience, so I would prefer to keep supporting the older syntax too.\r\n\r\n## Note on `CompletionItem`\r\n\r\nFrom the source, I understand that the main thing it provides apart from the previously supported data is a new `type` that tells the completion parts if the thing to complete is a directory or file... I'm not sure in which cases that type is useful, maybe internally, but not sure for completion functions. And also, if there's a use case where that makes sense, we can probably know the type from the type annotation (e.g. `Path`).",
          "type": "issue"
        },
        {
          "author": "bckohan",
          "body": "After reviewing click 7/8 and how I'm using shell_complete downstream I have the following recommendations:\r\n\r\n1) **Allow completer functions to return lists of CompletionItems, strings or 2-tuples of completions and helps**. CompletionItem may change over time and there's no harm in passing them through if user functions return them. (my downstream functions already do return these)\r\n\r\n2) **Deprecate args in favor of click.core.Parameter.** The parameter class is helpful for defining generic completer \r\nfunctions that otherwise would not know which parameter they are attached to. [I'm using the parameter class downstream](https://github.com/bckohan/django-typer/blob/main/django_typer/completers.py) to weed out duplicates in multi value argument completions and to know if the parameter value was a default or not:\r\n\r\n```python\r\n        if (\r\n            not allow_duplicates\r\n            and param.name\r\n            and ctx.get_parameter_source(param.name) is not ParameterSource.DEFAULT\r\n        ):\r\n            present = [value for value in (ctx.params.get(param.name) or [])]\r\n```\r\n \r\n**I think args is already not backwards compatible with how it behaved in Click 7** It was also not very useful in Click 7. It resolved to the list of arguments passed through the environment variables used by the different shell completion entry point scripts and was also subject to additional ad hoc processing depending on the shell. Reverting it to the Click 7 behavior would be difficult and also probably not worth it because again, it wasn't very useful. It is also not equivalent to ctx.args. \r\n\r\nThe Parameter class in concert with the Context however gives you access to how click interpreted the complete CLI parameters before the incomplete string.\r\n\r\nI think the best thing to do would be to allow completer functions to specify `args: List[str] and/or param: click.core.Parameter`, but throw a deprecation warning if args is present and pass an empty list. I really doubt theres a lot of existing code making use of args out there because its not very useful (you'd have to do a lot of manual processing in many cases) and also I think its already broken and nobody seems to be complaining. Parameter on the other hand is much more useful. So following this recommendation would not break existing code more than it already is and allow graceful transition to using Parameter instead.\r\n\r\n",
          "created_at": "2024-09-12T00:56:59Z",
          "type": "comment"
        },
        {
          "author": "bckohan",
          "body": "There is a way to support the old ``args: List[str]`` parameter. This and the other suggestions (minus the deprecation warning) are submitted here: https://github.com/svlandeg/typer/pull/1",
          "created_at": "2024-09-18T00:42:37Z",
          "type": "comment"
        },
        {
          "author": "tiangolo",
          "body": "The main issue here was handled in https://github.com/fastapi/typer/pull/974, we can now continue the conversation for https://github.com/fastapi/typer/pull/1006 in that PR. :nerd_face: ",
          "created_at": "2024-12-04T17:29:32Z",
          "type": "comment"
        }
      ]
    },
    {
      "repository": "fastapi/typer",
      "issue_number": 933,
      "issue_title": "Show help items in order of definition, not alphabetically",
      "issue_url": "https://github.com/fastapi/typer/issues/933",
      "closed_at": "2024-08-26T09:21:34Z",
      "merged_prs": [
        {
          "pr_number": 944,
          "pr_title": "✨ Show help items in order of definition",
          "pr_url": "https://github.com/fastapi/typer/pull/944",
          "merged_at": "2024-08-26T09:21:33Z",
          "base_commit": {
            "sha": "29d1d1fafe92d27b37462c90d67ce8687bab0341",
            "ref": "master"
          }
        }
      ],
      "discussion": [
        {
          "author": "tiangolo",
          "body": "### Privileged issue\n\n- [X] I'm @tiangolo or he asked me directly to create an issue here.\n\n### Issue Content\n\nShow help items in order of definition, not alphabetically\r\n\r\nFor example:\r\n\r\n```Python\r\nimport typer\r\n\r\napp = typer.Typer()\r\n\r\n\r\n@app.command()\r\ndef first(word: str | None = None):\r\n    \"\"\"\r\n    First declared command should show up first.\r\n    \"\"\"\r\n    print(f\"first {word}\")\r\n\r\n\r\n@app.command()\r\ndef after(word: str | None = None):\r\n    \"\"\"\r\n    Last declared command should show up last, not alphabetically.\r\n    \"\"\"\r\n    print(f\"after {word}\")\r\n```\r\n\r\nThis is the current output:\r\n\r\n```console\r\n$ typer demo.py run --help\r\n                                                                            \r\n Usage: typer [PATH_OR_MODULE] run [OPTIONS] COMMAND [ARGS]...              \r\n                                                                            \r\n Run the provided Typer app.                                                \r\n                                                                            \r\n╭─ Options ────────────────────────────────────────────────────────────────╮\r\n│ --help          Show this message and exit.                              │\r\n╰──────────────────────────────────────────────────────────────────────────╯\r\n╭─ Commands ───────────────────────────────────────────────────────────────╮\r\n│ after   Last declared command should show up last, not alphabetically.   │\r\n│ first   First declared command should show up first.                     │\r\n╰──────────────────────────────────────────────────────────────────────────╯\r\n```\r\n\r\nThis is the ideal output:\r\n\r\n```console\r\n$ typer demo.py run --help\r\n                                                                            \r\n Usage: typer [PATH_OR_MODULE] run [OPTIONS] COMMAND [ARGS]...              \r\n                                                                            \r\n Run the provided Typer app.                                                \r\n                                                                            \r\n╭─ Options ────────────────────────────────────────────────────────────────╮\r\n│ --help          Show this message and exit.                              │\r\n╰──────────────────────────────────────────────────────────────────────────╯\r\n╭─ Commands ───────────────────────────────────────────────────────────────╮\r\n│ first   First declared command should show up first.                     │\r\n│ after   Last declared command should show up last, not alphabetically.   │\r\n╰──────────────────────────────────────────────────────────────────────────╯\r\n```\r\n\r\n",
          "type": "issue"
        }
      ]
    },
    {
      "repository": "fastapi/typer",
      "issue_number": 822,
      "issue_title": "Rich markup in Zsh completion help lines",
      "issue_url": "https://github.com/fastapi/typer/issues/822",
      "closed_at": "2024-11-18T22:14:34Z",
      "merged_prs": [
        {
          "pr_number": 877,
          "pr_title": "✨ Remove Rich tags when showing completion text",
          "pr_url": "https://github.com/fastapi/typer/pull/877",
          "merged_at": "2024-11-18T22:14:33Z",
          "base_commit": {
            "sha": "20d4e5c76739ddb21e78d3f3166d6f73a09f5aad",
            "ref": "master"
          }
        }
      ],
      "discussion": [
        {
          "author": "tiangolo",
          "body": "### Discussed in https://github.com/tiangolo/typer/discussions/821\r\n\r\n<div type='discussions-op-text'>\r\n\r\n<sup>Originally posted by **tiangolo** May  2, 2024</sup>\r\n### First Check\r\n\r\n- [X] I added a very descriptive title here.\r\n- [X] I used the GitHub search to find a similar question and didn't find it.\r\n- [X] I searched the Typer documentation, with the integrated search.\r\n- [X] I already searched in Google \"How to X in Typer\" and didn't find any information.\r\n- [X] I already read and followed all the tutorials in the docs and didn't find an answer.\r\n- [X] I already checked if it is not related to Typer but to [Click](https://github.com/pallets/click).\r\n\r\n### Commit to Help\r\n\r\n- [X] I commit to help with one of those options 👆\r\n\r\n### Example Code\r\n\r\n```python\r\nimport typer\r\nfrom typing_extensions import Annotated\r\n\r\napp = typer.Typer(rich_markup_mode=\"rich\")\r\n\r\n\r\n@app.command()\r\ndef hello(\r\n    name: Annotated[\r\n        str, typer.Option(help=\"The [bold]cool[/bold] name of the [green]user[/green]\")\r\n    ],\r\n):\r\n    \"\"\"\r\n    Say [bold]hi[/bold] to the user.\r\n    \"\"\"\r\n    print(f\"Hello {name}\")\r\n\r\n\r\n@app.command()\r\ndef goodbye(\r\n    name: Annotated[\r\n        str, typer.Option(help=\"The [bold]cool[/bold] name of the [green]user[/green]\")\r\n    ],\r\n):\r\n    \"\"\"\r\n    Say [bold]goodbye[/bold] to the user.\r\n    \"\"\"\r\n    print(f\"Goodbye {name}\")\r\n\r\nif __name__ == \"__main__\":\r\n    app()\r\n```\r\n\r\n\r\n### Description\r\n\r\n* Create this script in `main.py`\r\n* In Zsh, start running it with the `typer` command, start typing: `typer main.py run `, then hit <kbd>tab</kbd> to trigger autocompletion, it shows the two commands, which is correct:\r\n\r\n* `goodbye`\r\n* `hello`\r\n\r\nBut their Zsh help string includes the Rich markup content:\r\n\r\n```\r\n$ typer main.py run <tab>\r\n\r\ngoodbye  -- Say [bold]goodbye[/bold] to the user.\r\nhello    -- Say [bold]hi[/bold] to the user.\r\n```\r\n\r\n![Screenshot from 2024-05-02 15-12-44](https://github.com/tiangolo/typer/assets/1326112/e0f6ad09-6a2a-496f-b1c5-7184f302b8b1)\r\n\r\nIt should show plaintext without `[bold]` markup parts... or better, it should render those parts and show them in actual green color (using the terminal color codes, etc, the stuff Rich does).\r\n\r\n### Operating System\r\n\r\nLinux, macOS\r\n\r\n### Operating System Details\r\n\r\nThis applies mainly to Zsh, the behavior might be similar or different in PowerShell. It only applies in shells that can show autocompletion of commands with help sections.\r\n\r\n### Typer Version\r\n\r\nTyper version: 0.12.3\r\n\r\n### Python Version\r\n\r\nany\r\n\r\n### Additional Context\r\n\r\n_No response_</div>",
          "type": "issue"
        },
        {
          "author": "svlandeg",
          "body": "Looking into this! It took me a little while to get started, because I couldn't get autocompletion to work in `zsh` with Git bash for Windows. It works now thanks to https://github.com/tiangolo/typer/pull/237, so I'm looking into this next 🙂 ",
          "created_at": "2024-07-01T13:07:27Z",
          "type": "comment"
        },
        {
          "author": "svlandeg",
          "body": "PR up for review: https://github.com/fastapi/typer/pull/877",
          "created_at": "2024-08-27T08:27:51Z",
          "type": "comment"
        }
      ]
    },
    {
      "repository": "fastapi/typer",
      "issue_number": 819,
      "issue_title": "Rich markup in generated Markdown docs",
      "issue_url": "https://github.com/fastapi/typer/issues/819",
      "closed_at": "2024-11-18T17:51:56Z",
      "merged_prs": [
        {
          "pr_number": 847,
          "pr_title": "✨ Render Rich markup as HTML in Markdown docs",
          "pr_url": "https://github.com/fastapi/typer/pull/847",
          "merged_at": "2024-11-18T17:51:55Z",
          "base_commit": {
            "sha": "fda56d00be573d22dc761174895e26a0a1d12e78",
            "ref": "master"
          }
        }
      ],
      "discussion": [
        {
          "author": "tiangolo",
          "body": "### Discussed in https://github.com/tiangolo/typer/discussions/818\r\n\r\n<div type='discussions-op-text'>\r\n\r\n<sup>Originally posted by **tiangolo** May  2, 2024</sup>\r\n### First Check\r\n\r\n- [X] I added a very descriptive title here.\r\n- [X] I used the GitHub search to find a similar question and didn't find it.\r\n- [X] I searched the Typer documentation, with the integrated search.\r\n- [X] I already searched in Google \"How to X in Typer\" and didn't find any information.\r\n- [X] I already read and followed all the tutorials in the docs and didn't find an answer.\r\n- [X] I already checked if it is not related to Typer but to [Click](https://github.com/pallets/click).\r\n\r\n### Commit to Help\r\n\r\n- [X] I commit to help with one of those options 👆\r\n\r\n### Example Code\r\n\r\n```python\r\nimport typer\r\nfrom typing_extensions import Annotated\r\n\r\napp = typer.Typer(rich_markup_mode=\"rich\")\r\n\r\n\r\n@app.command()\r\ndef hello(\r\n    name: Annotated[\r\n        str, typer.Option(help=\"The [bold]cool[/bold] name of the [green]user[/green]\")\r\n    ],\r\n):\r\n    print(f\"Hello {name}\")\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    app()\r\n```\r\n\r\n\r\n### Description\r\n\r\n* Create this script in `main.py`\r\n* Generate a README with `typer main.py utils docs --output demo.md`\r\n\r\nThe output is:\r\n\r\n````Markdown\r\n# `hello`\r\n\r\n**Usage**:\r\n\r\n```console\r\n$ hello [OPTIONS]\r\n```\r\n\r\n**Options**:\r\n\r\n* `--name TEXT`: The [bold]cool[/bold] name of the [green]user[/green]  [required]\r\n* `--install-completion`: Install completion for the current shell.\r\n* `--show-completion`: Show completion for the current shell, to copy it or customize the installation.\r\n* `--help`: Show this message and exit.\r\n````\r\n\r\nIt includes the sections with `[green[user[/green]` verbatim, those are rendered by Rich in the terminal, but not in the generated Markdown, they look like this:\r\n\r\n<details>\r\n<summary>Rendered Markdown</summary>\r\n\r\n# `hello`\r\n\r\n**Usage**:\r\n\r\n```console\r\n$ hello [OPTIONS]\r\n```\r\n\r\n**Options**:\r\n\r\n* `--name TEXT`: The [bold]cool[/bold] name of the [green]user[/green]  [required]\r\n* `--install-completion`: Install completion for the current shell.\r\n* `--show-completion`: Show completion for the current shell, to copy it or customize the installation.\r\n* `--help`: Show this message and exit.\r\n\r\n</details>\r\n\r\nIt might be possible to generate the HTML that would be rendered by Markdown for those sections with Rich's [`export_html()`](https://rich.readthedocs.io/en/stable/reference/console.html#rich.console.Console.export_html) or maybe `export_text()`. Not sure but might work.\r\n\r\n### Operating System\r\n\r\nLinux, Windows, macOS\r\n\r\n### Operating System Details\r\n\r\nI tried it on Linux but it's independent of OS.\r\n\r\n### Typer Version\r\n\r\nTyper version: 0.12.3\r\n\r\n### Python Version\r\n\r\nany\r\n\r\n### Additional Context\r\n\r\n_No response_</div>",
          "type": "issue"
        },
        {
          "author": "svlandeg",
          "body": "Update: working on this and definitely seems feasible, current rendering on my branch:\r\n\r\n![image](https://github.com/tiangolo/typer/assets/8796347/baf3478f-2e6a-4a08-954e-8c038bef545d)\r\n\r\nThis is using `export_html` with a custom HTML template. There's still an issue with escaping non-Rich tags like `[required]`, which I'm looking into now.\r\n\r\nHope to get the PR in good shape next week!\r\n\r\n\r\n[Update]: fixed the `required` bit:\r\n\r\n![image](https://github.com/tiangolo/typer/assets/8796347/c149b3fe-e995-4826-b568-e9923a7523f9)\r\n",
          "created_at": "2024-05-23T17:08:09Z",
          "type": "comment"
        },
        {
          "author": "svlandeg",
          "body": "PR up for review: https://github.com/fastapi/typer/pull/847",
          "created_at": "2024-08-27T08:27:26Z",
          "type": "comment"
        }
      ]
    },
    {
      "repository": "fastapi/typer",
      "issue_number": 790,
      "issue_title": "🐛 Upgrading from `typer<0.12.0` to `typer==0.12.0` breaks the install by partially removing the package/module files",
      "issue_url": "https://github.com/fastapi/typer/issues/790",
      "closed_at": "2024-04-05T00:42:32Z",
      "merged_prs": [
        {
          "pr_number": 791,
          "pr_title": "🐛 Fix broken installation when upgrading from `typer <0.12.0` to `typer >=0.12.0`, make `typer` independent of `typer-slim`, include `typer` command in `typer` package",
          "pr_url": "https://github.com/fastapi/typer/pull/791",
          "merged_at": "2024-04-05T00:29:30Z",
          "base_commit": {
            "sha": "8bac8213aab544442b4f59ecc5eac45f4c208c63",
            "ref": "master"
          }
        }
      ],
      "discussion": [
        {
          "author": "tiangolo",
          "body": "This is reproduced and being worked on right now. :nerd_face: \r\n\r\n### Discussed in https://github.com/tiangolo/typer/discussions/784\r\n\r\n<div type='discussions-op-text'>\r\n\r\n<sup>Originally posted by **brianmedigate** March 31, 2024</sup>\r\n### First Check\r\n\r\n- [X] I added a very descriptive title here.\r\n- [X] I used the GitHub search to find a similar question and didn't find it.\r\n- [X] I searched the Typer documentation, with the integrated search.\r\n- [X] I already searched in Google \"How to X in Typer\" and didn't find any information.\r\n- [X] I already read and followed all the tutorial in the docs and didn't find an answer.\r\n- [X] I already checked if it is not related to Typer but to [Click](https://github.com/pallets/click).\r\n\r\n### Commit to Help\r\n\r\n- [X] I commit to help with one of those options 👆\r\n\r\n### Example Code\r\n\r\n```python\r\n$ python3.8 -m virtualenv venv\r\n$ . venv/bin/activate\r\n$ pip install typer==0.9.0\r\n$ pip install typer==0.12.0\r\n$ ll venv/lib/python3.8/site-packages/typer/\r\ntotal 36\r\ndrwxrwxr-x  3 brianm brianm 4096 Mar 31 17:52 ./\r\ndrwxrwxr-x 28 brianm brianm 4096 Mar 31 17:52 ../\r\n-rw-rw-r--  1 brianm brianm 9149 Mar 31 17:52 cli.py\r\n-rw-rw-r--  1 brianm brianm 6689 Mar 31 17:52 _completion_classes.py\r\n-rw-rw-r--  1 brianm brianm   30 Mar 31 17:52 __main__.py\r\ndrwxrwxr-x  2 brianm brianm 4096 Mar 31 17:52 __pycache__/\r\n```\r\n\r\n\r\n### Description\r\n\r\nAfter upgrading typer 0.9.0 to 0.12.0 in an existing virtual environment, the `typer` directory in site packages doesn't contain the expected code of typer. It looks like it only contains typer-cli or something like that. I'm guessing it has something to do with the recent packaging changes in https://github.com/tiangolo/typer/pull/780.\r\n\r\n### Operating System\r\n\r\nLinux\r\n\r\n### Operating System Details\r\n\r\nUbuntu 22.04.3\r\n\r\n### Typer Version\r\n\r\n0.12.0\r\n\r\n### Python Version\r\n\r\n3.8.18\r\n\r\n### Additional Context\r\n\r\n_No response_</div>",
          "type": "issue"
        },
        {
          "author": "lone17",
          "body": "Minor typo in the title: should be `typer<0.12.0` 😄",
          "created_at": "2024-04-04T05:51:42Z",
          "type": "comment"
        },
        {
          "author": "bckohan",
          "body": "Yes - I ran into this problem here: https://github.com/bckohan/django-typer/issues/47\r\n\r\nI think its a bug in pip. I would expect this to work.\r\n\r\n**In my case, since my downstream users did not need the cli, changing the dependency from typer to typer-slim allowed the updates to work. I tested this using normal pip upgrades and poetry updates**",
          "created_at": "2024-04-04T17:47:43Z",
          "type": "comment"
        },
        {
          "author": "tiangolo",
          "body": "This was fixed in https://github.com/tiangolo/typer/pull/791, released in Typer `0.12.1` :rocket: :tada: ",
          "created_at": "2024-04-05T00:42:32Z",
          "type": "comment"
        },
        {
          "author": "washeck",
          "body": "Is this really solved?\r\n\r\n```\r\n$ pip3 list | grep typer\r\ntyper                    0.12.1\r\n$ python3\r\nPython 3.11.6 (main, Nov 30 2023, 18:14:11) [GCC 12.2.0] on linux\r\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\r\n>>> import typer\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\nModuleNotFoundError: No module named 'typer'\r\n```\r\nI have typer installed via pipenv as a dependency of `safety`.\r\n",
          "created_at": "2024-04-05T11:01:35Z",
          "type": "comment"
        }
      ]
    },
    {
      "repository": "fastapi/typer",
      "issue_number": 535,
      "issue_title": "TAB completion is giving local directory files where command is called.",
      "issue_url": "https://github.com/fastapi/typer/issues/535",
      "closed_at": "2024-08-17T01:34:26Z",
      "merged_prs": [
        {
          "pr_number": 237,
          "pr_title": "🐛 Fix `zsh` autocompletion installation",
          "pr_url": "https://github.com/fastapi/typer/pull/237",
          "merged_at": "2024-08-17T01:34:24Z",
          "base_commit": {
            "sha": "90f3e61d0858eb80926dbd547fcd509726e219a0",
            "ref": "master"
          }
        }
      ],
      "discussion": [
        {
          "author": "Karthik1610",
          "body": "### First Check\r\n\r\n- [X] I added a very descriptive title to this issue.\r\n- [X] I used the GitHub search to find a similar issue and didn't find it.\r\n- [X] I searched the Typer documentation, with the integrated search.\r\n- [X] I already searched in Google \"How to X in Typer\" and didn't find any information.\r\n- [X] I already read and followed all the tutorial in the docs and didn't find an answer.\r\n- [X] I already checked if it is not related to Typer but to [Click](https://github.com/pallets/click).\r\n\r\n### Commit to Help\r\n\r\n- [X] I commit to help with one of those options 👆\r\n\r\n### Example Code\r\n\r\n```python\r\n#!/usr/bin/env python3\r\nimport typer\r\n\r\nmgmt_ip_cfg_app = typer.Typer(help=\"Management Interface Configuration\", no_args_is_help=True)\r\n\r\n@mgmt_ip_cfg_app.command(\"Ipv4\",\r\n    no_args_is_help=True)\r\ndef ipv4_cfg(\r\n            ip: str = typer.Argument(...),\r\n            gateway: str = typer.Argument(...),\r\n            prefixlen: str = typer.Argument(...)):\r\n    pass\r\n\r\n\r\n@mgmt_ip_cfg_app.command(\"Ipv6\",\r\n    no_args_is_help=True)\r\ndef ipv6_cfg(\r\n            ip: str = typer.Argument(...),\r\n            gateway: str = typer.Argument(...),\r\n            prefixlen: str = typer.Argument(...)):\r\n    pass\r\n\r\ndef main():\r\n    mgmt_ip_cfg_app()\r\n\r\nif __name__ == '__main__':\r\n    main()\r\n```\r\n\r\n\r\n### Description\r\n\r\nHi,\r\n\r\nI am new to typer. Kindly point me to doc/issue if this issue is already resolved.\r\nI have written a small cli completion code tmp.py and executed \"./tmp.py --install-completion bash\".\r\n\r\nWhen i tried to do tab completion , if no files are there tmp.py is repeating \"**./tmp.py Ipv4 tmp.py tmp.py**\" or if any files is there, they are getting displayed in the directory where i am calling this script. Could you please help me to resolve this. I am expecting if the last command is reached it should either display help on TAB or dont display anything so that user will enter to get help.\r\n\r\n```\r\nIf there are local files, TAB after Ipv4, they are getting displayed.\r\n[root@Linux]# ./tmp.py Ipv4\r\n1       tmp.py\r\n```\r\n\r\n### Operating System\r\n\r\nLinux\r\n\r\n### Operating System Details\r\n\r\n_No response_\r\n\r\n### Typer Version\r\n\r\n0.7.0\r\n\r\n### Python Version\r\n\r\n3.6.8\r\n\r\n### Additional Context\r\n\r\n_No response_",
          "type": "issue"
        },
        {
          "author": "relativityhd",
          "body": "Hi,\r\nI had the same issue. I had the wrong order of zsh-completion commands in my `.zshrc`. Try to add this to your `.zshrc`:\r\n\r\n```sh\r\nautoload -Uz compinit\r\nzstyle ':completion:*' menu select\r\nfpath+=~/.zfunc\r\ncompinit\r\n```\r\n\r\nThanks @shelper https://github.com/tiangolo/typer/issues/54#issuecomment-901209114\r\n",
          "created_at": "2023-06-23T11:28:10Z",
          "type": "comment"
        },
        {
          "author": "roniel-rhack",
          "body": "Same issue, not resolved yet  ",
          "created_at": "2023-12-26T19:13:55Z",
          "type": "comment"
        },
        {
          "author": "svlandeg",
          "body": "Thanks for the report! For the `zsh` shell, this should be fixed with https://github.com/tiangolo/typer/pull/237, which essentially contains the same fix as @relativityhd mentioned here.",
          "created_at": "2024-07-01T09:34:05Z",
          "type": "comment"
        },
        {
          "author": "Zhang-Zelong",
          "body": "I've tried the #237, but not resolved yet. Version: typer == 0.12.3\r\nHere is my .zshrc about completion.\r\n\r\n```zsh\r\nautoload -Uz compinit\r\nzstyle ':completion:*' menu select\r\nfpath+=~/.zfunc\r\ncompinit\r\n```\r\n\r\nWhen I do same thing with the [document](https://typer.tiangolo.com/tutorial/options-autocompletion/), my shell can only dispaly the file in current dictory after pressing `[tab] [tab]`\r\n\r\n",
          "created_at": "2024-08-05T06:46:00Z",
          "type": "comment"
        },
        {
          "author": "svlandeg",
          "body": "@Zhang-Zelong: can you remove the second line from your `.zshrc` (take a backup first), restart the console, and try again? The file should look like this:\r\n\r\n```\r\nautoload -Uz compinit\r\nfpath+=~/.zfunc\r\ncompinit\r\n```",
          "created_at": "2024-08-05T10:13:20Z",
          "type": "comment"
        },
        {
          "author": "Zhang-Zelong",
          "body": "Okay! That works for me, thank you.\r\nSo is it a special case or a common bug？ Should we fix this snippets in this file `typer/_completion_shared.py` ?",
          "created_at": "2024-08-06T01:17:03Z",
          "type": "comment"
        },
        {
          "author": "svlandeg",
          "body": "It's a known bug that has already been fixed by PR https://github.com/tiangolo/typer/pull/237, but requires a final review before it will be merged into `master` and released with the next Typer update.",
          "created_at": "2024-08-06T07:17:23Z",
          "type": "comment"
        },
        {
          "author": "tiangolo",
          "body": "Thanks all! This was handled in https://github.com/fastapi/typer/pull/237, it will be available in Typer `0.12.4`, released in the next hours. :tada:",
          "created_at": "2024-08-17T01:36:47Z",
          "type": "comment"
        }
      ]
    },
    {
      "repository": "fastapi/typer",
      "issue_number": 533,
      "issue_title": "Using `some_type | None` syntax for type annotations causes error in python 3.11",
      "issue_url": "https://github.com/fastapi/typer/issues/533",
      "closed_at": "2024-10-23T14:46:10Z",
      "merged_prs": [
        {
          "pr_number": 548,
          "pr_title": "🐛 Fix support for `UnionType` (e.g. `str | None`) with Python 3.11",
          "pr_url": "https://github.com/fastapi/typer/pull/548",
          "merged_at": "2024-08-17T02:22:43Z",
          "base_commit": {
            "sha": "fda56d00be573d22dc761174895e26a0a1d12e78",
            "ref": "master"
          }
        },
        {
          "pr_number": 664,
          "pr_title": "🐛 Fix default value of `None` for CLI Parameters when the type is `list | None` and the default value is `None`",
          "pr_url": "https://github.com/fastapi/typer/pull/664",
          "merged_at": "2024-03-23T17:17:14Z",
          "base_commit": {
            "sha": "74433d22b489d13fe1a0bb1f6729127cfa942996",
            "ref": "master"
          }
        }
      ],
      "discussion": [
        {
          "author": "PhilReinhold",
          "body": "### First Check\n\n- [X] I added a very descriptive title to this issue.\n- [X] I used the GitHub search to find a similar issue and didn't find it.\n- [X] I searched the Typer documentation, with the integrated search.\n- [X] I already searched in Google \"How to X in Typer\" and didn't find any information.\n- [X] I already read and followed all the tutorial in the docs and didn't find an answer.\n- [X] I already checked if it is not related to Typer but to [Click](https://github.com/pallets/click).\n\n### Commit to Help\n\n- [X] I commit to help with one of those options 👆\n\n### Example Code\n\n```python\nimport typer\r\nfrom datetime import datetime\r\nprint(typer.__version__)\r\n\r\napp = typer.Typer()\r\n\r\n@app.command()\r\ndef f(x: datetime | None = None):\r\n    print(x)\r\n\r\nif __name__ == \"__main__\":\r\n    app()\n```\n\n\n### Description\n\nIn python 3.10 this script runs as expected, but on 3.11 I get the following error\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"/Users/pcrein/qdash/test.py\", line 16, in <module>\r\n    app()\r\n  File \"/Users/pcrein/.pyenv/versions/qdash-3.11.0/lib/python3.11/site-packages/typer/main.py\", line 328, in __call__\r\n    raise e\r\n  File \"/Users/pcrein/.pyenv/versions/qdash-3.11.0/lib/python3.11/site-packages/typer/main.py\", line 311, in __call__\r\n    return get_command(self)(*args, **kwargs)\r\n           ^^^^^^^^^^^^^^^^^\r\n  File \"/Users/pcrein/.pyenv/versions/qdash-3.11.0/lib/python3.11/site-packages/typer/main.py\", line 364, in get_command\r\n    click_command = get_command_from_info(\r\n                    ^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/Users/pcrein/.pyenv/versions/qdash-3.11.0/lib/python3.11/site-packages/typer/main.py\", line 577, in get_command_from_info\r\n    ) = get_params_convertors_ctx_param_name_from_function(command_info.callback)\r\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/Users/pcrein/.pyenv/versions/qdash-3.11.0/lib/python3.11/site-packages/typer/main.py\", line 553, in get_params_convertors_ctx_param_name_from_function\r\n    click_param, convertor = get_click_param(param)\r\n                             ^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/Users/pcrein/.pyenv/versions/qdash-3.11.0/lib/python3.11/site-packages/typer/main.py\", line 844, in get_click_param\r\n    parameter_type = get_click_type(\r\n                     ^^^^^^^^^^^^^^^\r\n  File \"/Users/pcrein/.pyenv/versions/qdash-3.11.0/lib/python3.11/site-packages/typer/main.py\", line 773, in get_click_type\r\n    raise RuntimeError(f\"Type not yet supported: {annotation}\")  # pragma no cover\r\n    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\nRuntimeError: Type not yet supported: datetime.datetime | None\r\n```\n\n### Operating System\n\nmacOS\n\n### Operating System Details\n\n_No response_\n\n### Typer Version\n\n0.7.0\n\n### Python Version\n\n3.11.0\n\n### Additional Context\n\nI believe the issue is that for some reason, `typing.get_type_hints` is no longer converting the `UnionType` into a `Union`. I would suggest as a fix that `get_click_param` use `typing.get_origin/get_args` instead of `__args__` and `__origin__` attributes.",
          "type": "issue"
        },
        {
          "author": "domef",
          "body": "I'm having the same issue. Using `Union[type1, type2]` with `from typing import Union` leads to the same error.",
          "created_at": "2023-01-13T10:45:26Z",
          "type": "comment"
        },
        {
          "author": "raminqaf",
          "body": "@tiangolo, Any updates on this feature? ",
          "created_at": "2023-04-04T11:04:41Z",
          "type": "comment"
        },
        {
          "author": "johnthagen",
          "body": "Related to\r\n\r\n- #348",
          "created_at": "2023-05-01T18:50:51Z",
          "type": "comment"
        },
        {
          "author": "pdonorio",
          "body": "Hi and thanks a lot for this great library!\r\n\r\nI've run into this issue as well. May someone provide some guidance on what should be fixed, \r\nin case someone would like to contribute to solve it?",
          "created_at": "2023-06-28T20:50:09Z",
          "type": "comment"
        },
        {
          "author": "renardeinside",
          "body": "I have the same issue with Python 3.10. Any advisory on how to fix this?",
          "created_at": "2023-07-18T21:01:39Z",
          "type": "comment"
        },
        {
          "author": "lucasgadams",
          "body": "Switching from `str | None = None` to `Optional[str] = None` worked for me.",
          "created_at": "2023-08-06T16:00:40Z",
          "type": "comment"
        },
        {
          "author": "toppk",
          "body": "> Switching from `str | None = None` to `Optional[str] = None` worked for me.\r\n\r\nThat is a pretty good workaround, but for me it means that I have to configure my linters one way for modules that use typer and another way for the rest of the code.\r\n",
          "created_at": "2023-08-06T21:15:06Z",
          "type": "comment"
        },
        {
          "author": "roganartu",
          "body": "> > Switching from `str | None = None` to `Optional[str] = None` worked for me.\r\n> \r\n> That is a pretty good workaround, but for me it means that I have to configure my linters one way for modules that use typer and another way for the rest of the code.\r\n\r\npyupgrade will respect type aliases, as will typer. It's unwieldy, but this means you can do the following without having to configure pyupgrade to keep runtime types:\r\n\r\n```\r\nOptionalStr = Optional[str]\r\n\r\nmain(\r\n    foo: OptionalStr = typer.Argument(None),\r\n) -> None:\r\n    ...\r\n```",
          "created_at": "2023-08-07T18:50:09Z",
          "type": "comment"
        },
        {
          "author": "johnthagen",
          "body": "For me, I'd rather use `Optional[str]` than making an alias named `OptionalStr` (that someone then has to look up to know exactly how it was defined).\r\n\r\nI think the idea here is that we ideally want to use `str | None` as is the new, preferred style, that pyupgrade/Ruff also lint for.",
          "created_at": "2023-08-07T19:00:35Z",
          "type": "comment"
        },
        {
          "author": "albertotb",
          "body": "> For me, I'd rather use `Optional[str]` than making an alias named `OptionalStr` (that someone then has to look up to know exactly how it was defined).\r\n> \r\n> I think the idea here is that we ideally want to use `str | None` as is the new, preferred style, that pyupgrade/Ruff also lint for.\r\n\r\nAgree, for now I've just disabled linting in that specific line, in Ruff you can do it with `#noqa: UP007`",
          "created_at": "2023-12-11T14:21:45Z",
          "type": "comment"
        },
        {
          "author": "exislow",
          "body": "It would be great to use `str | None` instead of `Optional[]`. @tiangolo: Any plans to implement this to support >= Python3.11?",
          "created_at": "2024-01-12T09:40:24Z",
          "type": "comment"
        },
        {
          "author": "dolfandringa",
          "body": "I am stuck between Typer not supporting the new python syntax with `|None=None`  and pyupgrade refusing to add an option to skip code for a specific line.  I guess I'll try this solution.....\r\n\r\n> > > Switching from `str | None = None` to `Optional[str] = None` worked for me.\r\n> > \r\n> > \r\n> > That is a pretty good workaround, but for me it means that I have to configure my linters one way for modules that use typer and another way for the rest of the code.\r\n> \r\n> pyupgrade will respect type aliases, as will typer. It's unwieldy, but this means you can do the following without having to configure pyupgrade to keep runtime types:\r\n> \r\n> ```\r\n> OptionalStr = Optional[str]\r\n> \r\n> main(\r\n>     foo: OptionalStr = typer.Argument(None),\r\n> ) -> None:\r\n>     ...\r\n> ```\r\n\r\n",
          "created_at": "2024-02-21T14:12:01Z",
          "type": "comment"
        },
        {
          "author": "funkindy",
          "body": "Any updates on this?",
          "created_at": "2024-07-24T10:57:15Z",
          "type": "comment"
        },
        {
          "author": "johnthagen",
          "body": "@funkindy Waiting for @tiangolo to have time to review the MRs listed here\r\n\r\n- https://github.com/tiangolo/typer/issues/678#issuecomment-2090423535",
          "created_at": "2024-07-24T11:45:12Z",
          "type": "comment"
        },
        {
          "author": "hongqn",
          "body": "> @funkindy Waiting for @tiangolo to have time to review the MRs listed here\n> \n> - https://github.com/tiangolo/typer/issues/678#issuecomment-2090423535\n\nObviously @tiangolo either has no time, or has no will.",
          "created_at": "2024-07-25T06:00:26Z",
          "type": "comment"
        },
        {
          "author": "tiangolo",
          "body": "Hello all! Thanks for the feedback. :coffee: \r\n\r\nThis should have been fixed by https://github.com/fastapi/typer/pull/548\r\n\r\nIt is now available in Typer `0.12.4` :rocket: ",
          "created_at": "2024-08-17T03:41:38Z",
          "type": "comment"
        },
        {
          "author": "tonjo",
          "body": "> Hello all! Thanks for the feedback. ☕\r\n> \r\n> This should have been fixed by #548\r\n> \r\n> It is now available in Typer `0.12.4` 🚀\r\n\r\nJust upgraded to Typer 0.12.4 but still same error:\r\n\r\n`TypeError: unsupported operand type(s) for |: 'str' and 'NoneType'`",
          "created_at": "2024-08-22T17:01:27Z",
          "type": "comment"
        },
        {
          "author": "tiangolo",
          "body": "@tonjo please create a new discussion filling all the form data, including a minimal reproducible example we can copy and run to see your error.\r\n\r\nDoing it with the original issue seems solved, so there's probably something different in your use case.",
          "created_at": "2024-08-23T20:06:06Z",
          "type": "comment"
        },
        {
          "author": "pdonorio",
          "body": "> > Hello all! Thanks for the feedback. ☕\r\n> > This should have been fixed by #548\r\n> > It is now available in Typer `0.12.4` 🚀\r\n> \r\n> Just upgraded to Typer 0.12.4 but still same error:\r\n> \r\n> `TypeError: unsupported operand type(s) for |: 'str' and 'NoneType'`\r\n\r\nHey @tonjo have you created a new issue?\r\n\r\nI'm getting the same issue if I try the operand inside \"Annotated\"\r\n\r\n```python\r\napp.command('some')\r\ndef some(\r\n  option: Annotated[list | str, typer.Option()] = None,\r\n):\r\n   ...\r\n```\r\n\r\nIn case I can open a new Issue if you didn't do it yet",
          "created_at": "2024-08-29T11:00:52Z",
          "type": "comment"
        },
        {
          "author": "pypae",
          "body": "@tonjo \r\nAre you on Python 3.10+? [Union type expressions were added in 3.10](https://docs.python.org/3/library/stdtypes.html#union-type).\r\n\r\nIf you're getting the following error, you're probably on an earlier version:\r\n\r\n> `TypeError: unsupported operand type(s) for |: 'str' and 'NoneType'`\r\n\r\n--- \r\n@pdonorio \r\nI think there are two issues with your example:\r\n\r\n- If I understand correctly, `typer` does still not support all Union types, only Optional `X | None` using the 3.10+ syntax. The wording in the release notes were not very clear about that.\r\n- `list` cannot be used without a specific type for the list items. e.g. `list[str]`\r\n\r\n\r\n```\r\napp.command('some')\r\ndef some(\r\n  option: Annotated[list | str, typer.Option()] = None,  # the following would work: option: Annotated[list[str] | None, typer.Option()] \r\n):\r\n   ...\r\n```",
          "created_at": "2024-08-29T12:59:08Z",
          "type": "comment"
        },
        {
          "author": "pdonorio",
          "body": "\r\n> * If I understand correctly, `typer` does still not support all Union types, only Optional `X | None` using the 3.10+ syntax. The wording in the release notes were not very clear about that.\r\n> * `list` cannot be used without a specific type for the list items. e.g. `list[str]`\r\n\r\nThanks, using `list[str]` on the latest works @pypae 🙏 ",
          "created_at": "2024-08-29T14:48:26Z",
          "type": "comment"
        },
        {
          "author": "tonjo",
          "body": "@pypae  I'm using python 3.12.\r\n\r\nNot using `typer` directly, though, it's an issue with `sqlmodel`, when defining an optional\r\nfield using a string (because that model is not defined yet), that error is thrown.\r\n\r\nBut maybe it is not the right place to comment to, as @tiangolo  suggested.\r\n",
          "created_at": "2024-08-29T16:27:21Z",
          "type": "comment"
        },
        {
          "author": "TiansuYu",
          "body": "Somehow still broken under python 3.10, typer 0.12.5. \r\n\r\n```python\r\nmax_tokens: Annotated[int | None, typer.Option(help=\"Max tokens\")] = None,\r\n```\r\n```shell\r\nmax_tokens\r\n  Input should be a valid integer [type=int_type, input_value=None, input_type=NoneType]\r\n    For further information visit https://errors.pydantic.dev/2.9/v/int_type\r\n```\r\nSomehow the validation did not pass to pydantic correctly ",
          "created_at": "2024-09-19T17:34:09Z",
          "type": "comment"
        },
        {
          "author": "NikosAlexandris",
          "body": "``` bash\r\n❯ python --version\r\nPython 3.11.9\r\n```\r\nand\r\n```\r\n❯ ipython -c \"import typer; print(typer.__version__)\"\r\n0.12.5\r\n```\r\nor indeed version 0.12.4 as well, I still get \r\n\r\n``` python\r\nAssertionError: Typer Currently doesn't support Union types\r\n```\r\n\r\nDowngrading back to 0.12.3 complains then about \r\n```\r\nRuntimeError: Type not yet supported: float | None\r\n```\r\n\r\nThough, I have more \"unions\", also in the form of `X | Y | None`. ",
          "created_at": "2024-10-09T06:32:30Z",
          "type": "comment"
        },
        {
          "author": "NikosAlexandris",
          "body": "> Somehow still broken under python 3.10, typer 0.12.5.\r\n> \r\n> ```python\r\n> max_tokens: Annotated[int | None, typer.Option(help=\"Max tokens\")] = None,\r\n> ```\r\n> \r\n> ```shell\r\n> max_tokens\r\n>   Input should be a valid integer [type=int_type, input_value=None, input_type=NoneType]\r\n>     For further information visit https://errors.pydantic.dev/2.9/v/int_type\r\n> ```\r\n> \r\n> Somehow the validation did not pass to pydantic correctly\r\n\r\nThis means you are bound to Python 3.10 ? In 3.11 (which is how this thread begun) it works.",
          "created_at": "2024-10-09T07:23:15Z",
          "type": "comment"
        },
        {
          "author": "TiansuYu",
          "body": "If I remember correctly, the `<type> | None` syntax is introduced in [3.10](https://peps.python.org/pep-0604/). Therefore Typer should test it against 3.10 as well IMO. But it seems that withTyper 0.12.5, I no longer has this issue any more. ",
          "created_at": "2024-10-09T11:25:28Z",
          "type": "comment"
        },
        {
          "author": "NikosAlexandris",
          "body": "> ```shell\r\n> ❯ python --version\r\n> Python 3.11.9\r\n> ```\r\n> \r\n> and\r\n> \r\n> ```\r\n> ❯ ipython -c \"import typer; print(typer.__version__)\"\r\n> 0.12.5\r\n> ```\r\n> \r\n> or indeed version 0.12.4 as well, I still get\r\n> \r\n> ```python\r\n> AssertionError: Typer Currently doesn't support Union types\r\n> ```\r\n> \r\n> Downgrading back to 0.12.3 complains then about\r\n> \r\n> ```\r\n> RuntimeError: Type not yet supported: float | None\r\n> ```\r\n> \r\n> Though, I have more \"unions\", also in the form of `X | Y | None`.\r\n\r\nIndeed the problem here is more complex unions. I removed these for now and it works. But why not add support for it ?",
          "created_at": "2024-10-09T14:08:51Z",
          "type": "comment"
        },
        {
          "author": "TiansuYu",
          "body": "> Indeed the problem here is more complex unions. I removed these for now and it works. But why not add support for it ?\r\n\r\nIndeed, i think Typer should support it (at least for all current python type annotations). In the future, i would hope that it supports all pydantic basemodel types as well. \r\n",
          "created_at": "2024-10-09T15:47:23Z",
          "type": "comment"
        },
        {
          "author": "NikosAlexandris",
          "body": "I think a \"fix\" would need to go around https://github.com/fastapi/typer/blob/master/typer/main.py#L844-L852.",
          "created_at": "2024-10-09T18:17:11Z",
          "type": "comment"
        },
        {
          "author": "svlandeg",
          "body": "Closing this issue as the original topic/problem has been addressed by https://github.com/fastapi/typer/pull/548. Thanks for all the discussion! If there are remaining/related issues, please open a new discussion thread - it's easier to have one specific topic per thread 🙏 ",
          "created_at": "2024-10-23T14:46:10Z",
          "type": "comment"
        }
      ]
    },
    {
      "repository": "fastapi/typer",
      "issue_number": 413,
      "issue_title": "0.5.0: pytest is failing",
      "issue_url": "https://github.com/fastapi/typer/issues/413",
      "closed_at": "2024-11-07T16:55:45Z",
      "merged_prs": [
        {
          "pr_number": 995,
          "pr_title": "✅ Only run completion installation tests when the env var `_TYPER_RUN_INSTALL_COMPLETION_TESTS` is set",
          "pr_url": "https://github.com/fastapi/typer/pull/995",
          "merged_at": "2024-11-07T16:55:44Z",
          "base_commit": {
            "sha": "c04c5554ec246e2a85ff9736c2434e03676c24c0",
            "ref": "master"
          }
        }
      ],
      "discussion": [
        {
          "author": "kloczek",
          "body": "### First Check\n\n- [X] I added a very descriptive title to this issue.\n- [X] I used the GitHub search to find a similar issue and didn't find it.\n- [X] I searched the Typer documentation, with the integrated search.\n- [X] I already searched in Google \"How to X in Typer\" and didn't find any information.\n- [X] I already read and followed all the tutorial in the docs and didn't find an answer.\n- [ ] I already checked if it is not related to Typer but to [Click](https://github.com/pallets/click).\n\n### Commit to Help\n\n- [ ] I commit to help with one of those options 👆\n\n### Example Code\n\n```python\nNot examplw code.\n```\n\n\n### Description\n\nI'm packaging your module as the rpm package. So I'm using the typical PEP517 based build, install and test cycle used on building packages from non-root account.\r\n- `python3 -sBm build -w --no-isolation`\r\n- because I'm calling `build` with `--no-isolation` I'm using during all processes only locally installed modules\r\n- install .whl file in </install/prefix>\r\n- run pytest with PYTHONPATH pointing to sitearch and sitelib inside </install/prefix>\r\n\r\nLooks like ltwo unist are tring to modify my ~/.bashrc\r\n\r\nHere is pytest output:\r\n<details>\r\n\r\n```console\r\n+ PYTHONPATH=/home/tkloczko/rpmbuild/BUILDROOT/python-typer-0.5.0-2.fc35.x86_64/usr/lib64/python3.8/site-packages:/home/tkloczko/rpmbuild/BUILDROOT/python-typer-0.5.0-2.fc35.x86_64/usr/lib/python3.8/site-packages\r\n+ /usr/bin/pytest -ra\r\n=========================================================================== test session starts ============================================================================\r\nplatform linux -- Python 3.8.13, pytest-7.1.2, pluggy-1.0.0\r\nrootdir: /home/tkloczko/rpmbuild/BUILD/typer-0.5.0\r\nplugins: cov-3.0.0\r\ncollected 507 items\r\n\r\ndocs_src/testing/app01/test_main.py .                                                                                                                                [  0%]\r\ndocs_src/testing/app02/test_main.py .                                                                                                                                [  0%]\r\ndocs_src/testing/app03/test_main.py .                                                                                                                                [  0%]\r\ntests/test_others.py ...........                                                                                                                                     [  2%]\r\ntests/test_prog_name.py .                                                                                                                                            [  2%]\r\ntests/test_tracebacks.py F..                                                                                                                                         [  3%]\r\ntests/test_type_conversion.py ..........                                                                                                                             [  5%]\r\ntests/test_compat/test_option_get_help.py ...                                                                                                                        [  6%]\r\ntests/test_completion/test_completion.py FF........                                                                                                                  [  8%]\r\ntests/test_completion/test_completion_complete.py ..........                                                                                                         [ 10%]\r\ntests/test_completion/test_completion_complete_no_help.py ....                                                                                                       [ 10%]\r\ntests/test_completion/test_completion_install.py .F...                                                                                                               [ 11%]\r\ntests/test_completion/test_completion_show.py ......                                                                                                                 [ 13%]\r\ntests/test_tutorial/test_arguments/test_default/test_tutorial001.py ....                                                                                             [ 13%]\r\ntests/test_tutorial/test_arguments/test_default/test_tutorial002.py ....                                                                                             [ 14%]\r\ntests/test_tutorial/test_arguments/test_envvar/test_tutorial001.py .....                                                                                             [ 15%]\r\ntests/test_tutorial/test_arguments/test_envvar/test_tutorial002.py .....                                                                                             [ 16%]\r\ntests/test_tutorial/test_arguments/test_envvar/test_tutorial003.py .....                                                                                             [ 17%]\r\ntests/test_tutorial/test_arguments/test_help/test_tutorial001.py ...                                                                                                 [ 18%]\r\ntests/test_tutorial/test_arguments/test_help/test_tutorial002.py ...                                                                                                 [ 18%]\r\ntests/test_tutorial/test_arguments/test_help/test_tutorial003.py ...                                                                                                 [ 19%]\r\ntests/test_tutorial/test_arguments/test_help/test_tutorial004.py ...                                                                                                 [ 19%]\r\ntests/test_tutorial/test_arguments/test_help/test_tutorial005.py ...                                                                                                 [ 20%]\r\ntests/test_tutorial/test_arguments/test_help/test_tutorial006.py ...                                                                                                 [ 21%]\r\ntests/test_tutorial/test_arguments/test_help/test_tutorial007.py ...                                                                                                 [ 21%]\r\ntests/test_tutorial/test_arguments/test_optional/test_tutorial001.py ...                                                                                             [ 22%]\r\ntests/test_tutorial/test_arguments/test_optional/test_tutorial002.py ....                                                                                            [ 23%]\r\ntests/test_tutorial/test_commands/test_arguments/test_tutorial001.py .....                                                                                           [ 24%]\r\ntests/test_tutorial/test_commands/test_callback/test_tutorial001.py .......                                                                                          [ 25%]\r\ntests/test_tutorial/test_commands/test_callback/test_tutorial002.py ..                                                                                               [ 25%]\r\ntests/test_tutorial/test_commands/test_callback/test_tutorial003.py ...                                                                                              [ 26%]\r\ntests/test_tutorial/test_commands/test_callback/test_tutorial004.py ...                                                                                              [ 27%]\r\ntests/test_tutorial/test_commands/test_context/test_tutorial001.py ...                                                                                               [ 27%]\r\ntests/test_tutorial/test_commands/test_context/test_tutorial002.py ....                                                                                              [ 28%]\r\ntests/test_tutorial/test_commands/test_context/test_tutorial003.py ....                                                                                              [ 29%]\r\ntests/test_tutorial/test_commands/test_context/test_tutorial004.py ..                                                                                                [ 29%]\r\ntests/test_tutorial/test_commands/test_help/test_tutorial001.py ............                                                                                         [ 31%]\r\ntests/test_tutorial/test_commands/test_help/test_tutorial002.py ......                                                                                               [ 33%]\r\ntests/test_tutorial/test_commands/test_index/test_tutorial001.py ...                                                                                                 [ 33%]\r\ntests/test_tutorial/test_commands/test_index/test_tutorial002.py ....                                                                                                [ 34%]\r\ntests/test_tutorial/test_commands/test_name/test_tutorial001.py ....                                                                                                 [ 35%]\r\ntests/test_tutorial/test_commands/test_one_or_multiple/test_tutorial001.py ...                                                                                       [ 35%]\r\ntests/test_tutorial/test_commands/test_one_or_multiple/test_tutorial002.py ...                                                                                       [ 36%]\r\ntests/test_tutorial/test_commands/test_options/test_tutorial001.py .........                                                                                         [ 38%]\r\ntests/test_tutorial/test_first_steps/test_tutorial001.py ..                                                                                                          [ 38%]\r\ntests/test_tutorial/test_first_steps/test_tutorial002.py ...                                                                                                         [ 39%]\r\ntests/test_tutorial/test_first_steps/test_tutorial003.py ...                                                                                                         [ 39%]\r\ntests/test_tutorial/test_first_steps/test_tutorial004.py ......                                                                                                      [ 41%]\r\ntests/test_tutorial/test_first_steps/test_tutorial005.py ......                                                                                                      [ 42%]\r\ntests/test_tutorial/test_first_steps/test_tutorial006.py ......                                                                                                      [ 43%]\r\ntests/test_tutorial/test_multiple_values/test_arguments_with_multiple_values/test_tutorial001.py ..                                                                  [ 43%]\r\ntests/test_tutorial/test_multiple_values/test_arguments_with_multiple_values/test_tutorial002.py .....                                                               [ 44%]\r\ntests/test_tutorial/test_multiple_values/test_multiple_options/test_tutorial001.py ....                                                                              [ 45%]\r\ntests/test_tutorial/test_multiple_values/test_multiple_options/test_tutorial002.py ....                                                                              [ 46%]\r\ntests/test_tutorial/test_multiple_values/test_options_with_multiple_values/test_tutorial001.py .....                                                                 [ 47%]\r\ntests/test_tutorial/test_options/test_callback/test_tutorial001.py ...                                                                                               [ 47%]\r\ntests/test_tutorial/test_options/test_callback/test_tutorial003.py ....                                                                                              [ 48%]\r\ntests/test_tutorial/test_options/test_callback/test_tutorial004.py ....                                                                                              [ 49%]\r\ntests/test_tutorial/test_options/test_completion/test_tutorial002.py ...                                                                                             [ 50%]\r\ntests/test_tutorial/test_options/test_completion/test_tutorial003.py ...                                                                                             [ 50%]\r\ntests/test_tutorial/test_options/test_completion/test_tutorial004.py ...                                                                                             [ 51%]\r\ntests/test_tutorial/test_options/test_completion/test_tutorial007.py ...                                                                                             [ 51%]\r\ntests/test_tutorial/test_options/test_completion/test_tutorial008.py ...                                                                                             [ 52%]\r\ntests/test_tutorial/test_options/test_completion/test_tutorial009.py ...                                                                                             [ 53%]\r\ntests/test_tutorial/test_options/test_help/test_tutorial001.py .....                                                                                                 [ 54%]\r\ntests/test_tutorial/test_options/test_help/test_tutorial002.py ...                                                                                                   [ 54%]\r\ntests/test_tutorial/test_options/test_name/test_tutorial001.py ...                                                                                                   [ 55%]\r\ntests/test_tutorial/test_options/test_name/test_tutorial002.py ....                                                                                                  [ 56%]\r\ntests/test_tutorial/test_options/test_name/test_tutorial003.py ...                                                                                                   [ 56%]\r\ntests/test_tutorial/test_options/test_name/test_tutorial004.py ....                                                                                                  [ 57%]\r\ntests/test_tutorial/test_options/test_name/test_tutorial005.py ......                                                                                                [ 58%]\r\ntests/test_tutorial/test_options/test_prompt/test_tutorial001.py ....                                                                                                [ 59%]\r\ntests/test_tutorial/test_options/test_prompt/test_tutorial002.py ....                                                                                                [ 60%]\r\ntests/test_tutorial/test_options/test_prompt/test_tutorial003.py .....                                                                                               [ 61%]\r\ntests/test_tutorial/test_options/test_required/test_tutorial002.py ....                                                                                              [ 61%]\r\ntests/test_tutorial/test_options/test_version/test_tutorial003.py .....                                                                                              [ 62%]\r\ntests/test_tutorial/test_parameter_types/test_bool/test_tutorial001.py .....                                                                                         [ 63%]\r\ntests/test_tutorial/test_parameter_types/test_bool/test_tutorial002.py ......                                                                                        [ 65%]\r\ntests/test_tutorial/test_parameter_types/test_bool/test_tutorial003.py ....                                                                                          [ 65%]\r\ntests/test_tutorial/test_parameter_types/test_bool/test_tutorial004.py .....                                                                                         [ 66%]\r\ntests/test_tutorial/test_parameter_types/test_datetime/test_tutorial001.py ....                                                                                      [ 67%]\r\ntests/test_tutorial/test_parameter_types/test_datetime/test_tutorial002.py ...                                                                                       [ 68%]\r\ntests/test_tutorial/test_parameter_types/test_enum/test_tutorial001.py ....                                                                                          [ 69%]\r\ntests/test_tutorial/test_parameter_types/test_enum/test_tutorial002.py ...                                                                                           [ 69%]\r\ntests/test_tutorial/test_parameter_types/test_file/test_tutorial001.py ..                                                                                            [ 70%]\r\ntests/test_tutorial/test_parameter_types/test_file/test_tutorial002.py ..                                                                                            [ 70%]\r\ntests/test_tutorial/test_parameter_types/test_file/test_tutorial003.py ..                                                                                            [ 70%]\r\ntests/test_tutorial/test_parameter_types/test_file/test_tutorial004.py ..                                                                                            [ 71%]\r\ntests/test_tutorial/test_parameter_types/test_file/test_tutorial005.py ..                                                                                            [ 71%]\r\ntests/test_tutorial/test_parameter_types/test_index/test_tutorial001.py ....                                                                                         [ 72%]\r\ntests/test_tutorial/test_parameter_types/test_number/test_tutorial001.py .......                                                                                     [ 73%]\r\ntests/test_tutorial/test_parameter_types/test_number/test_tutorial002.py ...                                                                                         [ 74%]\r\ntests/test_tutorial/test_parameter_types/test_number/test_tutorial003.py .......                                                                                     [ 75%]\r\ntests/test_tutorial/test_parameter_types/test_path/test_tutorial001.py .....                                                                                         [ 76%]\r\ntests/test_tutorial/test_parameter_types/test_path/test_tutorial002.py ....                                                                                          [ 77%]\r\ntests/test_tutorial/test_parameter_types/test_uuid/test_tutorial001.py ...                                                                                           [ 78%]\r\ntests/test_tutorial/test_prompt/test_tutorial001.py ..                                                                                                               [ 78%]\r\ntests/test_tutorial/test_prompt/test_tutorial002.py ...                                                                                                              [ 79%]\r\ntests/test_tutorial/test_prompt/test_tutorial003.py ...                                                                                                              [ 79%]\r\ntests/test_tutorial/test_subcommands/test_tutorial001.py .........                                                                                                   [ 81%]\r\ntests/test_tutorial/test_subcommands/test_tutorial002.py .........                                                                                                   [ 83%]\r\ntests/test_tutorial/test_subcommands/test_tutorial003.py ................                                                                                            [ 86%]\r\ntests/test_tutorial/test_subcommands/test_callback_override/test_tutorial001.py ..                                                                                   [ 86%]\r\ntests/test_tutorial/test_subcommands/test_callback_override/test_tutorial002.py ..                                                                                   [ 87%]\r\ntests/test_tutorial/test_subcommands/test_callback_override/test_tutorial003.py ...                                                                                  [ 87%]\r\ntests/test_tutorial/test_subcommands/test_callback_override/test_tutorial004.py ...                                                                                  [ 88%]\r\ntests/test_tutorial/test_subcommands/test_name_help/test_tutorial001.py ....                                                                                         [ 89%]\r\ntests/test_tutorial/test_subcommands/test_name_help/test_tutorial002.py ....                                                                                         [ 89%]\r\ntests/test_tutorial/test_subcommands/test_name_help/test_tutorial003.py ....                                                                                         [ 90%]\r\ntests/test_tutorial/test_subcommands/test_name_help/test_tutorial004.py ....                                                                                         [ 91%]\r\ntests/test_tutorial/test_subcommands/test_name_help/test_tutorial005.py ....                                                                                         [ 92%]\r\ntests/test_tutorial/test_subcommands/test_name_help/test_tutorial006.py ....                                                                                         [ 93%]\r\ntests/test_tutorial/test_subcommands/test_name_help/test_tutorial007.py ....                                                                                         [ 93%]\r\ntests/test_tutorial/test_subcommands/test_name_help/test_tutorial008.py ....                                                                                         [ 94%]\r\ntests/test_tutorial/test_terminating/test_tutorial001.py ...                                                                                                         [ 95%]\r\ntests/test_tutorial/test_terminating/test_tutorial002.py ...                                                                                                         [ 95%]\r\ntests/test_tutorial/test_terminating/test_tutorial003.py ...                                                                                                         [ 96%]\r\ntests/test_tutorial/test_testing/test_app01.py ...                                                                                                                   [ 97%]\r\ntests/test_tutorial/test_testing/test_app02.py ...                                                                                                                   [ 97%]\r\ntests/test_tutorial/test_testing/test_app03.py ...                                                                                                                   [ 98%]\r\ntests/test_tutorial/test_using_click/test_tutorial003.py ....                                                                                                        [ 99%]\r\ntests/test_tutorial/test_using_click/test_tutorial004.py .....                                                                                                       [100%]\r\n\r\n================================================================================= FAILURES =================================================================================\r\n___________________________________________________________________________ test_traceback_rich ____________________________________________________________________________\r\n\r\n    def test_traceback_rich():\r\n        file_path = Path(__file__).parent / \"assets/type_error_rich.py\"\r\n        result = subprocess.run(\r\n            [\"coverage\", \"run\", str(file_path)],\r\n            stdout=subprocess.PIPE,\r\n            stderr=subprocess.PIPE,\r\n            encoding=\"utf-8\",\r\n        )\r\n        assert \"return get_command(self)(*args, **kwargs)\" not in result.stderr\r\n\r\n        assert \"typer.run(main)\" in result.stderr\r\n        assert \"print(name + 3)\" in result.stderr\r\n\r\n        # TODO: when deprecating Python 3.6, remove second option\r\n        assert (\r\n            'TypeError: can only concatenate str (not \"int\") to str' in result.stderr\r\n            or \"TypeError: must be str, not int\" in result.stderr\r\n        )\r\n>       assert \"name = 'morty'\" in result.stderr\r\nE       assert \"name = 'morty'\" in 'Traceback (most recent call last):\\n\\n  File \"/home/tkloczko/rpmbuild/BUILD/typer-0.5.0/tests/assets/type_error_rich....ype_error_rich.py\", line 5, in main\\n    print(name + 3)\\n\\nTypeError: can only concatenate str (not \"int\") to str\\n\\n'\r\nE        +  where 'Traceback (most recent call last):\\n\\n  File \"/home/tkloczko/rpmbuild/BUILD/typer-0.5.0/tests/assets/type_error_rich....ype_error_rich.py\", line 5, in main\\n    print(name + 3)\\n\\nTypeError: can only concatenate str (not \"int\") to str\\n\\n' = CompletedProcess(args=['coverage', 'run', '/home/tkloczko/rpmbuild/BUILD/typer-0.5.0/tests/assets/type_error_rich.py']...pe_error_rich.py\", line 5, in main\\n    print(name + 3)\\n\\nTypeError: can only concatenate str (not \"int\") to str\\n\\n').stderr\r\n\r\ntests/test_tracebacks.py:23: AssertionError\r\n___________________________________________________________________________ test_show_completion ___________________________________________________________________________\r\n\r\n    def test_show_completion():\r\n        result = subprocess.run(\r\n            [\r\n                \"bash\",\r\n                \"-c\",\r\n                f\"{sys.executable}  -m coverage run {mod.__file__} --show-completion\",\r\n            ],\r\n            stdout=subprocess.PIPE,\r\n            stderr=subprocess.PIPE,\r\n            encoding=\"utf-8\",\r\n            env={**os.environ, \"SHELL\": \"/bin/bash\", \"_TYPER_COMPLETE_TESTING\": \"True\"},\r\n        )\r\n>       assert \"_TUTORIAL001.PY_COMPLETE=complete_bash\" in result.stdout\r\nE       AssertionError: assert '_TUTORIAL001.PY_COMPLETE=complete_bash' in ''\r\nE        +  where '' = CompletedProcess(args=['bash', '-c', '/usr/bin/python3  -m coverage run /home/tkloczko/rpmbuild/BUILD/typer-0.5.0/docs_src/first_steps/tutorial001.py --show-completion'], returncode=1, stdout='', stderr='Shell sh not supported.\\n').stdout\r\n\r\ntests/test_completion/test_completion.py:21: AssertionError\r\n_________________________________________________________________________ test_install_completion __________________________________________________________________________\r\n\r\n    def test_install_completion():\r\n        bash_completion_path: Path = Path.home() / \".bashrc\"\r\n        text = \"\"\r\n        if bash_completion_path.is_file():  # pragma: nocover\r\n            text = bash_completion_path.read_text()\r\n        result = subprocess.run(\r\n            [\r\n                \"bash\",\r\n                \"-c\",\r\n                f\"{sys.executable} -m coverage run {mod.__file__} --install-completion\",\r\n            ],\r\n            stdout=subprocess.PIPE,\r\n            stderr=subprocess.PIPE,\r\n            encoding=\"utf-8\",\r\n            env={**os.environ, \"SHELL\": \"/bin/bash\", \"_TYPER_COMPLETE_TESTING\": \"True\"},\r\n        )\r\n        new_text = bash_completion_path.read_text()\r\n>       bash_completion_path.write_text(text)\r\n\r\ntests/test_completion/test_completion.py:41:\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n/usr/lib64/python3.8/pathlib.py:1255: in write_text\r\n    with self.open(mode='w', encoding=encoding, errors=errors) as f:\r\n/usr/lib64/python3.8/pathlib.py:1222: in open\r\n    return io.open(self, mode, buffering, encoding, errors, newline,\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\nself = PosixPath('/home/tkloczko/.bashrc'), name = '/home/tkloczko/.bashrc', flags = 524865, mode = 438\r\n\r\n    def _opener(self, name, flags, mode=0o666):\r\n        # A stub for the opener argument to built-in open()\r\n>       return self._accessor.open(self, flags, mode)\r\nE       PermissionError: [Errno 13] Permission denied: '/home/tkloczko/.bashrc'\r\n\r\n/usr/lib64/python3.8/pathlib.py:1078: PermissionError\r\n_______________________________________________________________________ test_completion_install_bash _______________________________________________________________________\r\n\r\n    def test_completion_install_bash():\r\n        bash_completion_path: Path = Path.home() / \".bashrc\"\r\n        text = \"\"\r\n        if bash_completion_path.is_file():\r\n            text = bash_completion_path.read_text()\r\n        result = subprocess.run(\r\n            [\"coverage\", \"run\", mod.__file__, \"--install-completion\", \"bash\"],\r\n            stdout=subprocess.PIPE,\r\n            stderr=subprocess.PIPE,\r\n            encoding=\"utf-8\",\r\n            env={\r\n                **os.environ,\r\n                \"_TYPER_COMPLETE_TESTING\": \"True\",\r\n                \"_TYPER_COMPLETE_TEST_DISABLE_SHELL_DETECTION\": \"True\",\r\n            },\r\n        )\r\n        new_text = bash_completion_path.read_text()\r\n>       bash_completion_path.write_text(text)\r\n\r\ntests/test_completion/test_completion_install.py:53:\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n/usr/lib64/python3.8/pathlib.py:1255: in write_text\r\n    with self.open(mode='w', encoding=encoding, errors=errors) as f:\r\n/usr/lib64/python3.8/pathlib.py:1222: in open\r\n    return io.open(self, mode, buffering, encoding, errors, newline,\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\nself = PosixPath('/home/tkloczko/.bashrc'), name = '/home/tkloczko/.bashrc', flags = 524865, mode = 438\r\n\r\n    def _opener(self, name, flags, mode=0o666):\r\n        # A stub for the opener argument to built-in open()\r\n>       return self._accessor.open(self, flags, mode)\r\nE       PermissionError: [Errno 13] Permission denied: '/home/tkloczko/.bashrc'\r\n\r\n/usr/lib64/python3.8/pathlib.py:1078: PermissionError\r\n============================================================================= warnings summary =============================================================================\r\ntests/test_tutorial/test_options/test_completion/test_tutorial002.py::test_1\r\ntests/test_tutorial/test_options/test_completion/test_tutorial003.py::test_1\r\ntests/test_tutorial/test_options/test_completion/test_tutorial004.py::test_1\r\ntests/test_tutorial/test_options/test_completion/test_tutorial007.py::test_1\r\ntests/test_tutorial/test_options/test_completion/test_tutorial008.py::test_1\r\ntests/test_tutorial/test_options/test_completion/test_tutorial009.py::test_1\r\n  /home/tkloczko/rpmbuild/BUILDROOT/python-typer-0.5.0-2.fc35.x86_64/usr/lib/python3.8/site-packages/typer/core.py:270: DeprecationWarning: 'autocompletion' is renamed to 'shell_complete'. The old name is deprecated and will be removed in Click 8.1. See the docs about 'Parameter' for information about new behavior.\r\n    _typer_param_setup_autocompletion_compat(\r\n\r\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\r\n========================================================================= short test summary info ==========================================================================\r\nFAILED tests/test_tracebacks.py::test_traceback_rich - assert \"name = 'morty'\" in 'Traceback (most recent call last):\\n\\n  File \"/home/tkloczko/rpmbuild/BUILD/typer-0.5....\r\nFAILED tests/test_completion/test_completion.py::test_show_completion - AssertionError: assert '_TUTORIAL001.PY_COMPLETE=complete_bash' in ''\r\nFAILED tests/test_completion/test_completion.py::test_install_completion - PermissionError: [Errno 13] Permission denied: '/home/tkloczko/.bashrc'\r\nFAILED tests/test_completion/test_completion_install.py::test_completion_install_bash - PermissionError: [Errno 13] Permission denied: '/home/tkloczko/.bashrc'\r\n================================================================ 4 failed, 503 passed, 6 warnings in 35.40s ================================================================\r\n```\r\n</details>\r\n\n\n### Wanted Solution\n\npytest shopuld be working and test suite should not be fidling in user ~/,bashrc\n\n### Wanted Code\n\n```python\nNot applicable\n```\n\n\n### Alternatives\n\n_No response_\n\n### Operating System\n\nLinux\n\n### Operating System Details\n\n_No response_\n\n### Typer Version\n\n0.5.0\n\n### Python Version\n\n3.8.13\n\n### Additional Context\n\nNot applicable",
          "type": "issue"
        },
        {
          "author": "musicinmybrain",
          "body": "@kloczek, I don’t want to hijack this upstream issue, but I want to make sure you know that I’ve been maintaining a [python-typer](https://src.fedoraproject.org/rpms/python-typer) package in Fedora Linux. I would be happy if that fact can help with whatever you’re trying to do. I also welcome co-maintainers.",
          "created_at": "2022-07-06T23:21:33Z",
          "type": "comment"
        },
        {
          "author": "kloczek",
          "body": "Feel free to add my Fedora account kloczek to list co-maintainers.",
          "created_at": "2022-07-07T02:06:21Z",
          "type": "comment"
        },
        {
          "author": "kloczek",
          "body": "Just tested and looks like this version is failing in yet another new unit \r\n<details>\r\n\r\n```console\r\n+ PYTHONPATH=/home/tkloczko/rpmbuild/BUILDROOT/python-typer-0.6.1-2.fc35.x86_64/usr/lib64/python3.8/site-packages:/home/tkloczko/rpmbuild/BUILDROOT/python-typer-0.6.1-2.fc35.x86_64/usr/lib/python3.8/site-packages\r\n+ /usr/bin/pytest -ra --deselect tests/test_tracebacks.py::test_traceback_rich --deselect tests/test_completion/test_completion.py::test_show_completion --deselect tests/test_completion/test_completion.py::test_install_completion --deselect tests/test_completion/test_completion_install.py::test_completion_install_bash\r\n=========================================================================== test session starts ============================================================================\r\nplatform linux -- Python 3.8.13, pytest-7.1.2, pluggy-1.0.0\r\nrootdir: /home/tkloczko/rpmbuild/BUILD/typer-0.6.1\r\nplugins: cov-3.0.0\r\ncollected 567 items / 3 deselected / 564 selected\r\n\r\ndocs_src/testing/app01/test_main.py .                                                                                                                                [  0%]\r\ndocs_src/testing/app02/test_main.py .                                                                                                                                [  0%]\r\ndocs_src/testing/app03/test_main.py .                                                                                                                                [  0%]\r\ntests/test_exit_errors.py ...                                                                                                                                        [  1%]\r\ntests/test_others.py ...........                                                                                                                                     [  3%]\r\ntests/test_prog_name.py .                                                                                                                                            [  3%]\r\ntests/test_rich_utils.py .                                                                                                                                           [  3%]\r\ntests/test_tracebacks.py ...                                                                                                                                         [  3%]\r\ntests/test_type_conversion.py ..........                                                                                                                             [  5%]\r\ntests/test_compat/test_option_get_help.py ....                                                                                                                       [  6%]\r\ntests/test_completion/test_completion.py ........                                                                                                                    [  7%]\r\ntests/test_completion/test_completion_complete.py ..........                                                                                                         [  9%]\r\ntests/test_completion/test_completion_complete_no_help.py ....                                                                                                       [ 10%]\r\ntests/test_completion/test_completion_install.py ....                                                                                                                [ 10%]\r\ntests/test_completion/test_completion_show.py ......                                                                                                                 [ 12%]\r\ntests/test_tutorial/test_arguments/test_default/test_tutorial001.py ....                                                                                             [ 12%]\r\ntests/test_tutorial/test_arguments/test_default/test_tutorial002.py ....                                                                                             [ 13%]\r\ntests/test_tutorial/test_arguments/test_envvar/test_tutorial001.py ......                                                                                            [ 14%]\r\ntests/test_tutorial/test_arguments/test_envvar/test_tutorial002.py .....                                                                                             [ 15%]\r\ntests/test_tutorial/test_arguments/test_envvar/test_tutorial003.py .....                                                                                             [ 16%]\r\ntests/test_tutorial/test_arguments/test_help/test_tutorial001.py ....                                                                                                [ 17%]\r\ntests/test_tutorial/test_arguments/test_help/test_tutorial002.py ...                                                                                                 [ 17%]\r\ntests/test_tutorial/test_arguments/test_help/test_tutorial003.py ...                                                                                                 [ 18%]\r\ntests/test_tutorial/test_arguments/test_help/test_tutorial004.py ...                                                                                                 [ 18%]\r\ntests/test_tutorial/test_arguments/test_help/test_tutorial005.py ...                                                                                                 [ 19%]\r\ntests/test_tutorial/test_arguments/test_help/test_tutorial006.py ...                                                                                                 [ 19%]\r\ntests/test_tutorial/test_arguments/test_help/test_tutorial007.py ...                                                                                                 [ 20%]\r\ntests/test_tutorial/test_arguments/test_help/test_tutorial008.py ....                                                                                                [ 20%]\r\ntests/test_tutorial/test_arguments/test_optional/test_tutorial001.py .....                                                                                           [ 21%]\r\ntests/test_tutorial/test_arguments/test_optional/test_tutorial002.py ....                                                                                            [ 22%]\r\ntests/test_tutorial/test_commands/test_arguments/test_tutorial001.py .....                                                                                           [ 23%]\r\ntests/test_tutorial/test_commands/test_callback/test_tutorial001.py ........                                                                                         [ 24%]\r\ntests/test_tutorial/test_commands/test_callback/test_tutorial002.py ..                                                                                               [ 25%]\r\ntests/test_tutorial/test_commands/test_callback/test_tutorial003.py ...                                                                                              [ 25%]\r\ntests/test_tutorial/test_commands/test_callback/test_tutorial004.py ...                                                                                              [ 26%]\r\ntests/test_tutorial/test_commands/test_context/test_tutorial001.py ...                                                                                               [ 26%]\r\ntests/test_tutorial/test_commands/test_context/test_tutorial002.py ....                                                                                              [ 27%]\r\ntests/test_tutorial/test_commands/test_context/test_tutorial003.py ....                                                                                              [ 28%]\r\ntests/test_tutorial/test_commands/test_context/test_tutorial004.py ..                                                                                                [ 28%]\r\ntests/test_tutorial/test_commands/test_help/test_tutorial001.py ............                                                                                         [ 30%]\r\ntests/test_tutorial/test_commands/test_help/test_tutorial002.py ......                                                                                               [ 31%]\r\ntests/test_tutorial/test_commands/test_help/test_tutorial003.py ....                                                                                                 [ 32%]\r\ntests/test_tutorial/test_commands/test_help/test_tutorial004.py ......                                                                                               [ 33%]\r\ntests/test_tutorial/test_commands/test_help/test_tutorial005.py ......                                                                                               [ 34%]\r\ntests/test_tutorial/test_commands/test_help/test_tutorial006.py ...                                                                                                  [ 35%]\r\ntests/test_tutorial/test_commands/test_help/test_tutorial007.py ....                                                                                                 [ 35%]\r\ntests/test_tutorial/test_commands/test_help/test_tutorial008.py ...                                                                                                  [ 36%]\r\ntests/test_tutorial/test_commands/test_index/test_tutorial001.py ...                                                                                                 [ 36%]\r\ntests/test_tutorial/test_commands/test_index/test_tutorial002.py ....                                                                                                [ 37%]\r\ntests/test_tutorial/test_commands/test_name/test_tutorial001.py ....                                                                                                 [ 38%]\r\ntests/test_tutorial/test_commands/test_one_or_multiple/test_tutorial001.py ...                                                                                       [ 38%]\r\ntests/test_tutorial/test_commands/test_one_or_multiple/test_tutorial002.py ...                                                                                       [ 39%]\r\ntests/test_tutorial/test_commands/test_options/test_tutorial001.py .........                                                                                         [ 40%]\r\ntests/test_tutorial/test_exceptions/test_tutorial001.py ...                                                                                                          [ 41%]\r\ntests/test_tutorial/test_exceptions/test_tutorial002.py ...                                                                                                          [ 42%]\r\ntests/test_tutorial/test_exceptions/test_tutorial003.py ..                                                                                                           [ 42%]\r\ntests/test_tutorial/test_exceptions/test_tutorial004.py ..                                                                                                           [ 42%]\r\ntests/test_tutorial/test_first_steps/test_tutorial001.py ..                                                                                                          [ 43%]\r\ntests/test_tutorial/test_first_steps/test_tutorial002.py ...                                                                                                         [ 43%]\r\ntests/test_tutorial/test_first_steps/test_tutorial003.py ...                                                                                                         [ 44%]\r\ntests/test_tutorial/test_first_steps/test_tutorial004.py ......                                                                                                      [ 45%]\r\ntests/test_tutorial/test_first_steps/test_tutorial005.py ......                                                                                                      [ 46%]\r\ntests/test_tutorial/test_first_steps/test_tutorial006.py ......                                                                                                      [ 47%]\r\ntests/test_tutorial/test_multiple_values/test_arguments_with_multiple_values/test_tutorial001.py ..                                                                  [ 47%]\r\ntests/test_tutorial/test_multiple_values/test_arguments_with_multiple_values/test_tutorial002.py .....                                                               [ 48%]\r\ntests/test_tutorial/test_multiple_values/test_multiple_options/test_tutorial001.py ....                                                                              [ 49%]\r\ntests/test_tutorial/test_multiple_values/test_multiple_options/test_tutorial002.py ....                                                                              [ 50%]\r\ntests/test_tutorial/test_multiple_values/test_options_with_multiple_values/test_tutorial001.py .....                                                                 [ 50%]\r\ntests/test_tutorial/test_options/test_callback/test_tutorial001.py ...                                                                                               [ 51%]\r\ntests/test_tutorial/test_options/test_callback/test_tutorial003.py ....                                                                                              [ 52%]\r\ntests/test_tutorial/test_options/test_callback/test_tutorial004.py ....                                                                                              [ 52%]\r\ntests/test_tutorial/test_options/test_completion/test_tutorial002.py ...                                                                                             [ 53%]\r\ntests/test_tutorial/test_options/test_completion/test_tutorial003.py ...                                                                                             [ 53%]\r\ntests/test_tutorial/test_options/test_completion/test_tutorial004.py ...                                                                                             [ 54%]\r\ntests/test_tutorial/test_options/test_completion/test_tutorial007.py ...                                                                                             [ 54%]\r\ntests/test_tutorial/test_options/test_completion/test_tutorial008.py ...                                                                                             [ 55%]\r\ntests/test_tutorial/test_options/test_completion/test_tutorial009.py ...                                                                                             [ 56%]\r\ntests/test_tutorial/test_options/test_help/test_tutorial001.py .....                                                                                                 [ 56%]\r\ntests/test_tutorial/test_options/test_help/test_tutorial002.py ....                                                                                                  [ 57%]\r\ntests/test_tutorial/test_options/test_help/test_tutorial003.py ...                                                                                                   [ 58%]\r\ntests/test_tutorial/test_options/test_name/test_tutorial001.py ...                                                                                                   [ 58%]\r\ntests/test_tutorial/test_options/test_name/test_tutorial002.py ....                                                                                                  [ 59%]\r\ntests/test_tutorial/test_options/test_name/test_tutorial003.py ...                                                                                                   [ 59%]\r\ntests/test_tutorial/test_options/test_name/test_tutorial004.py ....                                                                                                  [ 60%]\r\ntests/test_tutorial/test_options/test_name/test_tutorial005.py ......                                                                                                [ 61%]\r\ntests/test_tutorial/test_options/test_prompt/test_tutorial001.py ....                                                                                                [ 62%]\r\ntests/test_tutorial/test_options/test_prompt/test_tutorial002.py ....                                                                                                [ 63%]\r\ntests/test_tutorial/test_options/test_prompt/test_tutorial003.py .....                                                                                               [ 64%]\r\ntests/test_tutorial/test_options/test_required/test_tutorial002.py .....                                                                                             [ 64%]\r\ntests/test_tutorial/test_options/test_version/test_tutorial003.py .....                                                                                              [ 65%]\r\ntests/test_tutorial/test_parameter_types/test_bool/test_tutorial001.py .....                                                                                         [ 66%]\r\ntests/test_tutorial/test_parameter_types/test_bool/test_tutorial002.py .......                                                                                       [ 67%]\r\ntests/test_tutorial/test_parameter_types/test_bool/test_tutorial003.py ....                                                                                          [ 68%]\r\ntests/test_tutorial/test_parameter_types/test_bool/test_tutorial004.py .....                                                                                         [ 69%]\r\ntests/test_tutorial/test_parameter_types/test_datetime/test_tutorial001.py ....                                                                                      [ 70%]\r\ntests/test_tutorial/test_parameter_types/test_datetime/test_tutorial002.py ...                                                                                       [ 70%]\r\ntests/test_tutorial/test_parameter_types/test_enum/test_tutorial001.py ....                                                                                          [ 71%]\r\ntests/test_tutorial/test_parameter_types/test_enum/test_tutorial002.py ...                                                                                           [ 71%]\r\ntests/test_tutorial/test_parameter_types/test_file/test_tutorial001.py ..                                                                                            [ 72%]\r\ntests/test_tutorial/test_parameter_types/test_file/test_tutorial002.py ..                                                                                            [ 72%]\r\ntests/test_tutorial/test_parameter_types/test_file/test_tutorial003.py ..                                                                                            [ 73%]\r\ntests/test_tutorial/test_parameter_types/test_file/test_tutorial004.py ..                                                                                            [ 73%]\r\ntests/test_tutorial/test_parameter_types/test_file/test_tutorial005.py ..                                                                                            [ 73%]\r\ntests/test_tutorial/test_parameter_types/test_index/test_tutorial001.py ....                                                                                         [ 74%]\r\ntests/test_tutorial/test_parameter_types/test_number/test_tutorial001.py ........                                                                                    [ 75%]\r\ntests/test_tutorial/test_parameter_types/test_number/test_tutorial002.py ...                                                                                         [ 76%]\r\ntests/test_tutorial/test_parameter_types/test_number/test_tutorial003.py .......                                                                                     [ 77%]\r\ntests/test_tutorial/test_parameter_types/test_path/test_tutorial001.py .....                                                                                         [ 78%]\r\ntests/test_tutorial/test_parameter_types/test_path/test_tutorial002.py F...                                                                                          [ 79%]\r\ntests/test_tutorial/test_parameter_types/test_uuid/test_tutorial001.py ...                                                                                           [ 79%]\r\ntests/test_tutorial/test_prompt/test_tutorial001.py ..                                                                                                               [ 80%]\r\ntests/test_tutorial/test_prompt/test_tutorial002.py ...                                                                                                              [ 80%]\r\ntests/test_tutorial/test_prompt/test_tutorial003.py ...                                                                                                              [ 81%]\r\ntests/test_tutorial/test_subcommands/test_tutorial001.py .........                                                                                                   [ 82%]\r\ntests/test_tutorial/test_subcommands/test_tutorial002.py .........                                                                                                   [ 84%]\r\ntests/test_tutorial/test_subcommands/test_tutorial003.py ................                                                                                            [ 87%]\r\ntests/test_tutorial/test_subcommands/test_callback_override/test_tutorial001.py ..                                                                                   [ 87%]\r\ntests/test_tutorial/test_subcommands/test_callback_override/test_tutorial002.py ..                                                                                   [ 87%]\r\ntests/test_tutorial/test_subcommands/test_callback_override/test_tutorial003.py ...                                                                                  [ 88%]\r\ntests/test_tutorial/test_subcommands/test_callback_override/test_tutorial004.py ...                                                                                  [ 89%]\r\ntests/test_tutorial/test_subcommands/test_name_help/test_tutorial001.py ....                                                                                         [ 89%]\r\ntests/test_tutorial/test_subcommands/test_name_help/test_tutorial002.py ....                                                                                         [ 90%]\r\ntests/test_tutorial/test_subcommands/test_name_help/test_tutorial003.py ....                                                                                         [ 91%]\r\ntests/test_tutorial/test_subcommands/test_name_help/test_tutorial004.py ....                                                                                         [ 91%]\r\ntests/test_tutorial/test_subcommands/test_name_help/test_tutorial005.py ....                                                                                         [ 92%]\r\ntests/test_tutorial/test_subcommands/test_name_help/test_tutorial006.py ....                                                                                         [ 93%]\r\ntests/test_tutorial/test_subcommands/test_name_help/test_tutorial007.py ....                                                                                         [ 93%]\r\ntests/test_tutorial/test_subcommands/test_name_help/test_tutorial008.py ....                                                                                         [ 94%]\r\ntests/test_tutorial/test_terminating/test_tutorial001.py ....                                                                                                        [ 95%]\r\ntests/test_tutorial/test_terminating/test_tutorial002.py ...                                                                                                         [ 95%]\r\ntests/test_tutorial/test_terminating/test_tutorial003.py .....                                                                                                       [ 96%]\r\ntests/test_tutorial/test_testing/test_app01.py ...                                                                                                                   [ 97%]\r\ntests/test_tutorial/test_testing/test_app02.py ...                                                                                                                   [ 97%]\r\ntests/test_tutorial/test_testing/test_app03.py ...                                                                                                                   [ 98%]\r\ntests/test_tutorial/test_using_click/test_tutorial003.py ....                                                                                                        [ 99%]\r\ntests/test_tutorial/test_using_click/test_tutorial004.py .....                                                                                                       [100%]\r\n\r\n================================================================================= FAILURES =================================================================================\r\n_____________________________________________________________________________ test_not_exists ______________________________________________________________________________\r\n\r\ntmpdir = local('/tmp/pytest-of-tkloczko/pytest-317/test_not_exists1')\r\n\r\n    def test_not_exists(tmpdir):\r\n        config_file = Path(tmpdir) / \"config.txt\"\r\n        if config_file.exists():  # pragma no cover\r\n            config_file.unlink()\r\n        result = runner.invoke(app, [\"--config\", f\"{config_file}\"])\r\n        assert result.exit_code != 0\r\n        assert \"Invalid value for '--config': File\" in result.output\r\n>       assert \"does not exist\" in result.output\r\nE       assert 'does not exist' in \"Usage: main [OPTIONS]\\nTry 'main --help' for help.\\n╭─ Error ────────────────────────────────────────────────────────...                                 │\\n╰──────────────────────────────────────────────────────────────────────────────╯\\n\"\r\nE        +  where \"Usage: main [OPTIONS]\\nTry 'main --help' for help.\\n╭─ Error ────────────────────────────────────────────────────────...                                 │\\n╰──────────────────────────────────────────────────────────────────────────────╯\\n\" = <Result SystemExit(2)>.output\r\n\r\ntests/test_tutorial/test_parameter_types/test_path/test_tutorial002.py:22: AssertionError\r\n============================================================================= warnings summary =============================================================================\r\ntests/test_tutorial/test_options/test_completion/test_tutorial002.py::test_1\r\ntests/test_tutorial/test_options/test_completion/test_tutorial003.py::test_1\r\ntests/test_tutorial/test_options/test_completion/test_tutorial004.py::test_1\r\ntests/test_tutorial/test_options/test_completion/test_tutorial007.py::test_1\r\ntests/test_tutorial/test_options/test_completion/test_tutorial008.py::test_1\r\ntests/test_tutorial/test_options/test_completion/test_tutorial009.py::test_1\r\n  /home/tkloczko/rpmbuild/BUILDROOT/python-typer-0.6.1-2.fc35.x86_64/usr/lib/python3.8/site-packages/typer/core.py:491: DeprecationWarning: 'autocompletion' is renamed to 'shell_complete'. The old name is deprecated and will be removed in Click 8.1. See the docs about 'Parameter' for information about new behavior.\r\n    _typer_param_setup_autocompletion_compat(\r\n\r\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\r\n========================================================================= short test summary info ==========================================================================\r\nFAILED tests/test_tutorial/test_parameter_types/test_path/test_tutorial002.py::test_not_exists - assert 'does not exist' in \"Usage: main [OPTIONS]\\nTry 'main --help' for...\r\n==================================================== 1 failed, 563 passed, 3 deselected, 6 warnings in 70.30s (0:01:10) ====================================================\r\n```\r\n</details>\r\n",
          "created_at": "2022-07-13T05:56:49Z",
          "type": "comment"
        },
        {
          "author": "musicinmybrain",
          "body": "> Just tested and looks like this version is failing in yet another new unit\r\n\r\nI’m also seeing the same `test_not_exists` failure while working on updating the package for Fedora Rawhide to 0.6.1. It wasn’t present in 0.5.0.\r\n\r\nI suspect that the expected output comes from a dependency, and the version available in the distribution is different from what would be installed with `pip` or `flit` into a virtualenv. Since I’m not loosening any version bounds in the spec file (at least not for runtime dependencies), it’s probably that one of the dependencies in Fedora is not fully up to date with its upstream.\r\n",
          "created_at": "2022-07-13T14:10:51Z",
          "type": "comment"
        },
        {
          "author": "sergiosacj",
          "body": "I saw the same failure when updating typer to Debian, the problem is related to Rich. This library respects some [standard environment variables](https://rich.readthedocs.io/en/latest/console.html#environment-variables) such as COLUMNS, but this variable can break tests that perform string comparisons if the terminal width is small. The Typer CI passes by running tests with a large terminal width as it is possible to override the terminal width by setting the [TERMINAL_WIDTH](https://github.com/tiangolo/typer/blob/master/scripts/test.sh#L6-L7) variable.",
          "created_at": "2022-10-07T03:14:28Z",
          "type": "comment"
        },
        {
          "author": "tiangolo",
          "body": "Thanks for the help here @sergiosacj  ! 👏  🙇 \r\n\r\nIf that solves the original problem, then you can close this issue @kloczek  ✔️",
          "created_at": "2022-11-11T18:09:27Z",
          "type": "comment"
        },
        {
          "author": "musicinmybrain",
          "body": "As @sergiosacj suggested,\r\n\r\n```sh\r\nexport TERMINAL_WIDTH=3000\r\n```\r\n\r\nfixes the problem for me in the Fedora Linux package for version 0.6.1.\r\n\r\nUpdating to 0.7.0 also makes the problem go away, whether I set `TERMINAL_WIDTH` or not.",
          "created_at": "2022-11-12T17:25:13Z",
          "type": "comment"
        },
        {
          "author": "kloczek",
          "body": "On building package build procedure has no access to pty so terminal width is unknown.\r\n",
          "created_at": "2022-11-12T20:07:33Z",
          "type": "comment"
        },
        {
          "author": "tiangolo",
          "body": "Have you tried with the latest source? There was some similar thing with OpenSUSE and they contributed a PR with what they needed.\r\n\r\nYou might also create a PR with what you need and why that is needed.\r\n\r\nFor my use case as maintainer, the tests and Pytest are working correctly in CI. But if there's something you would need different and a reason why the current default setup doesn't work for you, maybe you could suggest a PR.",
          "created_at": "2022-11-12T22:24:34Z",
          "type": "comment"
        },
        {
          "author": "kloczek",
          "body": "I cannot locate exact commit which could be applied on top of last tagged state to test that.\r\nCan you point on such commit?",
          "created_at": "2022-11-12T22:43:14Z",
          "type": "comment"
        },
        {
          "author": "tiangolo",
          "body": "What do you mean? It's just the `master` branch. The last commit in master is this one: https://github.com/tiangolo/typer/commit/e14cf38029ee332d3201ac9519a1242a6a722546",
          "created_at": "2022-11-13T10:02:52Z",
          "type": "comment"
        },
        {
          "author": "kloczek",
          "body": "I've testes pytest with `TERMINAL_WIDTH=3000 _TYPER_FORCE_DISABLE_TERMINAL=1` env variables and it improved results however still have three units failing\r\n<details>\r\n\r\n```console\r\n+ PYTHONPATH=/home/tkloczko/rpmbuild/BUILDROOT/python-typer-0.7.0-3.fc35.x86_64/usr/lib64/python3.8/site-packages:/home/tkloczko/rpmbuild/BUILDROOT/python-typer-0.7.0-3.fc35.x86_64/usr/lib/python3.8/site-packages\r\n+ /usr/bin/pytest -ra\r\n=========================================================================== test session starts ============================================================================\r\nplatform linux -- Python 3.8.15, pytest-7.1.3, pluggy-1.0.0\r\nrootdir: /home/tkloczko/rpmbuild/BUILD/typer-0.7.0, configfile: pyproject.toml\r\nplugins: cov-3.0.0\r\ncollected 567 items\r\n\r\ndocs_src/testing/app01/test_main.py .                                                                                                                                [  0%]\r\ndocs_src/testing/app02/test_main.py .                                                                                                                                [  0%]\r\ndocs_src/testing/app03/test_main.py .                                                                                                                                [  0%]\r\ntests/test_exit_errors.py ...                                                                                                                                        [  1%]\r\ntests/test_others.py ...........                                                                                                                                     [  2%]\r\ntests/test_prog_name.py .                                                                                                                                            [  3%]\r\ntests/test_rich_utils.py .                                                                                                                                           [  3%]\r\ntests/test_tracebacks.py ...                                                                                                                                         [  3%]\r\ntests/test_type_conversion.py ..........                                                                                                                             [  5%]\r\ntests/test_compat/test_option_get_help.py ....                                                                                                                       [  6%]\r\ntests/test_completion/test_completion.py FF........                                                                                                                  [  8%]\r\ntests/test_completion/test_completion_complete.py ..........                                                                                                         [  9%]\r\ntests/test_completion/test_completion_complete_no_help.py ....                                                                                                       [ 10%]\r\ntests/test_completion/test_completion_install.py .F...                                                                                                               [ 11%]\r\ntests/test_completion/test_completion_show.py ......                                                                                                                 [ 12%]\r\ntests/test_tutorial/test_arguments/test_default/test_tutorial001.py ....                                                                                             [ 13%]\r\ntests/test_tutorial/test_arguments/test_default/test_tutorial002.py ....                                                                                             [ 13%]\r\ntests/test_tutorial/test_arguments/test_envvar/test_tutorial001.py ......                                                                                            [ 14%]\r\ntests/test_tutorial/test_arguments/test_envvar/test_tutorial002.py .....                                                                                             [ 15%]\r\ntests/test_tutorial/test_arguments/test_envvar/test_tutorial003.py .....                                                                                             [ 16%]\r\ntests/test_tutorial/test_arguments/test_help/test_tutorial001.py ....                                                                                                [ 17%]\r\ntests/test_tutorial/test_arguments/test_help/test_tutorial002.py ...                                                                                                 [ 17%]\r\ntests/test_tutorial/test_arguments/test_help/test_tutorial003.py ...                                                                                                 [ 18%]\r\ntests/test_tutorial/test_arguments/test_help/test_tutorial004.py ...                                                                                                 [ 19%]\r\ntests/test_tutorial/test_arguments/test_help/test_tutorial005.py ...                                                                                                 [ 19%]\r\ntests/test_tutorial/test_arguments/test_help/test_tutorial006.py ...                                                                                                 [ 20%]\r\ntests/test_tutorial/test_arguments/test_help/test_tutorial007.py ...                                                                                                 [ 20%]\r\ntests/test_tutorial/test_arguments/test_help/test_tutorial008.py ....                                                                                                [ 21%]\r\ntests/test_tutorial/test_arguments/test_optional/test_tutorial001.py .....                                                                                           [ 22%]\r\ntests/test_tutorial/test_arguments/test_optional/test_tutorial002.py ....                                                                                            [ 22%]\r\ntests/test_tutorial/test_commands/test_arguments/test_tutorial001.py .....                                                                                           [ 23%]\r\ntests/test_tutorial/test_commands/test_callback/test_tutorial001.py ........                                                                                         [ 25%]\r\ntests/test_tutorial/test_commands/test_callback/test_tutorial002.py ..                                                                                               [ 25%]\r\ntests/test_tutorial/test_commands/test_callback/test_tutorial003.py ...                                                                                              [ 26%]\r\ntests/test_tutorial/test_commands/test_callback/test_tutorial004.py ...                                                                                              [ 26%]\r\ntests/test_tutorial/test_commands/test_context/test_tutorial001.py ...                                                                                               [ 27%]\r\ntests/test_tutorial/test_commands/test_context/test_tutorial002.py ....                                                                                              [ 27%]\r\ntests/test_tutorial/test_commands/test_context/test_tutorial003.py ....                                                                                              [ 28%]\r\ntests/test_tutorial/test_commands/test_context/test_tutorial004.py ..                                                                                                [ 28%]\r\ntests/test_tutorial/test_commands/test_help/test_tutorial001.py ............                                                                                         [ 31%]\r\ntests/test_tutorial/test_commands/test_help/test_tutorial002.py ......                                                                                               [ 32%]\r\ntests/test_tutorial/test_commands/test_help/test_tutorial003.py ....                                                                                                 [ 32%]\r\ntests/test_tutorial/test_commands/test_help/test_tutorial004.py ......                                                                                               [ 33%]\r\ntests/test_tutorial/test_commands/test_help/test_tutorial005.py ......                                                                                               [ 34%]\r\ntests/test_tutorial/test_commands/test_help/test_tutorial006.py ...                                                                                                  [ 35%]\r\ntests/test_tutorial/test_commands/test_help/test_tutorial007.py ....                                                                                                 [ 36%]\r\ntests/test_tutorial/test_commands/test_help/test_tutorial008.py ...                                                                                                  [ 36%]\r\ntests/test_tutorial/test_commands/test_index/test_tutorial001.py ...                                                                                                 [ 37%]\r\ntests/test_tutorial/test_commands/test_index/test_tutorial002.py ....                                                                                                [ 37%]\r\ntests/test_tutorial/test_commands/test_name/test_tutorial001.py ....                                                                                                 [ 38%]\r\ntests/test_tutorial/test_commands/test_one_or_multiple/test_tutorial001.py ...                                                                                       [ 39%]\r\ntests/test_tutorial/test_commands/test_one_or_multiple/test_tutorial002.py ...                                                                                       [ 39%]\r\ntests/test_tutorial/test_commands/test_options/test_tutorial001.py .........                                                                                         [ 41%]\r\ntests/test_tutorial/test_exceptions/test_tutorial001.py ...                                                                                                          [ 41%]\r\ntests/test_tutorial/test_exceptions/test_tutorial002.py ...                                                                                                          [ 42%]\r\ntests/test_tutorial/test_exceptions/test_tutorial003.py ..                                                                                                           [ 42%]\r\ntests/test_tutorial/test_exceptions/test_tutorial004.py ..                                                                                                           [ 43%]\r\ntests/test_tutorial/test_first_steps/test_tutorial001.py ..                                                                                                          [ 43%]\r\ntests/test_tutorial/test_first_steps/test_tutorial002.py ...                                                                                                         [ 43%]\r\ntests/test_tutorial/test_first_steps/test_tutorial003.py ...                                                                                                         [ 44%]\r\ntests/test_tutorial/test_first_steps/test_tutorial004.py ......                                                                                                      [ 45%]\r\ntests/test_tutorial/test_first_steps/test_tutorial005.py ......                                                                                                      [ 46%]\r\ntests/test_tutorial/test_first_steps/test_tutorial006.py ......                                                                                                      [ 47%]\r\ntests/test_tutorial/test_multiple_values/test_arguments_with_multiple_values/test_tutorial001.py ..                                                                  [ 47%]\r\ntests/test_tutorial/test_multiple_values/test_arguments_with_multiple_values/test_tutorial002.py .....                                                               [ 48%]\r\ntests/test_tutorial/test_multiple_values/test_multiple_options/test_tutorial001.py ....                                                                              [ 49%]\r\ntests/test_tutorial/test_multiple_values/test_multiple_options/test_tutorial002.py ....                                                                              [ 50%]\r\ntests/test_tutorial/test_multiple_values/test_options_with_multiple_values/test_tutorial001.py .....                                                                 [ 51%]\r\ntests/test_tutorial/test_options/test_callback/test_tutorial001.py ...                                                                                               [ 51%]\r\ntests/test_tutorial/test_options/test_callback/test_tutorial003.py ....                                                                                              [ 52%]\r\ntests/test_tutorial/test_options/test_callback/test_tutorial004.py ....                                                                                              [ 53%]\r\ntests/test_tutorial/test_options/test_help/test_tutorial001.py .....                                                                                                 [ 53%]\r\ntests/test_tutorial/test_options/test_help/test_tutorial002.py ....                                                                                                  [ 54%]\r\ntests/test_tutorial/test_options/test_help/test_tutorial003.py ...                                                                                                   [ 55%]\r\ntests/test_tutorial/test_options/test_name/test_tutorial001.py ...                                                                                                   [ 55%]\r\ntests/test_tutorial/test_options/test_name/test_tutorial002.py ....                                                                                                  [ 56%]\r\ntests/test_tutorial/test_options/test_name/test_tutorial003.py ...                                                                                                   [ 56%]\r\ntests/test_tutorial/test_options/test_name/test_tutorial004.py ....                                                                                                  [ 57%]\r\ntests/test_tutorial/test_options/test_name/test_tutorial005.py ......                                                                                                [ 58%]\r\ntests/test_tutorial/test_options/test_prompt/test_tutorial001.py ....                                                                                                [ 59%]\r\ntests/test_tutorial/test_options/test_prompt/test_tutorial002.py ....                                                                                                [ 60%]\r\ntests/test_tutorial/test_options/test_prompt/test_tutorial003.py .....                                                                                               [ 61%]\r\ntests/test_tutorial/test_options/test_required/test_tutorial002.py .....                                                                                             [ 61%]\r\ntests/test_tutorial/test_options/test_version/test_tutorial003.py .....                                                                                              [ 62%]\r\ntests/test_tutorial/test_options_autocompletion/test_tutorial002.py ...                                                                                              [ 63%]\r\ntests/test_tutorial/test_options_autocompletion/test_tutorial003.py ...                                                                                              [ 63%]\r\ntests/test_tutorial/test_options_autocompletion/test_tutorial004.py ...                                                                                              [ 64%]\r\ntests/test_tutorial/test_options_autocompletion/test_tutorial007.py ...                                                                                              [ 64%]\r\ntests/test_tutorial/test_options_autocompletion/test_tutorial008.py ...                                                                                              [ 65%]\r\ntests/test_tutorial/test_options_autocompletion/test_tutorial009.py ...                                                                                              [ 65%]\r\ntests/test_tutorial/test_parameter_types/test_bool/test_tutorial001.py .....                                                                                         [ 66%]\r\ntests/test_tutorial/test_parameter_types/test_bool/test_tutorial002.py .......                                                                                       [ 68%]\r\ntests/test_tutorial/test_parameter_types/test_bool/test_tutorial003.py ....                                                                                          [ 68%]\r\ntests/test_tutorial/test_parameter_types/test_bool/test_tutorial004.py .....                                                                                         [ 69%]\r\ntests/test_tutorial/test_parameter_types/test_datetime/test_tutorial001.py ....                                                                                      [ 70%]\r\ntests/test_tutorial/test_parameter_types/test_datetime/test_tutorial002.py ...                                                                                       [ 70%]\r\ntests/test_tutorial/test_parameter_types/test_enum/test_tutorial001.py ....                                                                                          [ 71%]\r\ntests/test_tutorial/test_parameter_types/test_enum/test_tutorial002.py ...                                                                                           [ 72%]\r\ntests/test_tutorial/test_parameter_types/test_file/test_tutorial001.py ..                                                                                            [ 72%]\r\ntests/test_tutorial/test_parameter_types/test_file/test_tutorial002.py ..                                                                                            [ 72%]\r\ntests/test_tutorial/test_parameter_types/test_file/test_tutorial003.py ..                                                                                            [ 73%]\r\ntests/test_tutorial/test_parameter_types/test_file/test_tutorial004.py ..                                                                                            [ 73%]\r\ntests/test_tutorial/test_parameter_types/test_file/test_tutorial005.py ..                                                                                            [ 73%]\r\ntests/test_tutorial/test_parameter_types/test_index/test_tutorial001.py ....                                                                                         [ 74%]\r\ntests/test_tutorial/test_parameter_types/test_number/test_tutorial001.py ........                                                                                    [ 76%]\r\ntests/test_tutorial/test_parameter_types/test_number/test_tutorial002.py ...                                                                                         [ 76%]\r\ntests/test_tutorial/test_parameter_types/test_number/test_tutorial003.py .......                                                                                     [ 77%]\r\ntests/test_tutorial/test_parameter_types/test_path/test_tutorial001.py .....                                                                                         [ 78%]\r\ntests/test_tutorial/test_parameter_types/test_path/test_tutorial002.py ....                                                                                          [ 79%]\r\ntests/test_tutorial/test_parameter_types/test_uuid/test_tutorial001.py ...                                                                                           [ 79%]\r\ntests/test_tutorial/test_prompt/test_tutorial001.py ..                                                                                                               [ 80%]\r\ntests/test_tutorial/test_prompt/test_tutorial002.py ...                                                                                                              [ 80%]\r\ntests/test_tutorial/test_prompt/test_tutorial003.py ...                                                                                                              [ 81%]\r\ntests/test_tutorial/test_subcommands/test_tutorial001.py .........                                                                                                   [ 82%]\r\ntests/test_tutorial/test_subcommands/test_tutorial002.py .........                                                                                                   [ 84%]\r\ntests/test_tutorial/test_subcommands/test_tutorial003.py ................                                                                                            [ 87%]\r\ntests/test_tutorial/test_subcommands/test_callback_override/test_tutorial001.py ..                                                                                   [ 87%]\r\ntests/test_tutorial/test_subcommands/test_callback_override/test_tutorial002.py ..                                                                                   [ 88%]\r\ntests/test_tutorial/test_subcommands/test_callback_override/test_tutorial003.py ...                                                                                  [ 88%]\r\ntests/test_tutorial/test_subcommands/test_callback_override/test_tutorial004.py ...                                                                                  [ 89%]\r\ntests/test_tutorial/test_subcommands/test_name_help/test_tutorial001.py ....                                                                                         [ 89%]\r\ntests/test_tutorial/test_subcommands/test_name_help/test_tutorial002.py ....                                                                                         [ 90%]\r\ntests/test_tutorial/test_subcommands/test_name_help/test_tutorial003.py ....                                                                                         [ 91%]\r\ntests/test_tutorial/test_subcommands/test_name_help/test_tutorial004.py ....                                                                                         [ 91%]\r\ntests/test_tutorial/test_subcommands/test_name_help/test_tutorial005.py ....                                                                                         [ 92%]\r\ntests/test_tutorial/test_subcommands/test_name_help/test_tutorial006.py ....                                                                                         [ 93%]\r\ntests/test_tutorial/test_subcommands/test_name_help/test_tutorial007.py ....                                                                                         [ 94%]\r\ntests/test_tutorial/test_subcommands/test_name_help/test_tutorial008.py ....                                                                                         [ 94%]\r\ntests/test_tutorial/test_terminating/test_tutorial001.py ....                                                                                                        [ 95%]\r\ntests/test_tutorial/test_terminating/test_tutorial002.py ...                                                                                                         [ 95%]\r\ntests/test_tutorial/test_terminating/test_tutorial003.py .....                                                                                                       [ 96%]\r\ntests/test_tutorial/test_testing/test_app01.py ...                                                                                                                   [ 97%]\r\ntests/test_tutorial/test_testing/test_app02.py ...                                                                                                                   [ 97%]\r\ntests/test_tutorial/test_testing/test_app03.py ...                                                                                                                   [ 98%]\r\ntests/test_tutorial/test_using_click/test_tutorial003.py ....                                                                                                        [ 99%]\r\ntests/test_tutorial/test_using_click/test_tutorial004.py .....                                                                                                       [100%]\r\n\r\n================================================================================= FAILURES =================================================================================\r\n___________________________________________________________________________ test_show_completion ___________________________________________________________________________\r\n\r\n    def test_show_completion():\r\n        result = subprocess.run(\r\n            [\r\n                \"bash\",\r\n                \"-c\",\r\n                f\"{sys.executable}  -m coverage run {mod.__file__} --show-completion\",\r\n            ],\r\n            stdout=subprocess.PIPE,\r\n            stderr=subprocess.PIPE,\r\n            encoding=\"utf-8\",\r\n            env={**os.environ, \"SHELL\": \"/bin/bash\", \"_TYPER_COMPLETE_TESTING\": \"True\"},\r\n        )\r\n>       assert \"_TUTORIAL001.PY_COMPLETE=complete_bash\" in result.stdout\r\nE       AssertionError: assert '_TUTORIAL001.PY_COMPLETE=complete_bash' in ''\r\nE        +  where '' = CompletedProcess(args=['bash', '-c', '/usr/bin/python3  -m coverage run /home/tkloczko/rpmbuild/BUILD/typer-0.7.0/docs_src/commands/index/tutorial001.py --show-completion'], returncode=1, stdout='', stderr='Shell sh not supported.\\n').stdout\r\n\r\ntests/test_completion/test_completion.py:21: AssertionError\r\n_________________________________________________________________________ test_install_completion __________________________________________________________________________\r\n\r\n    def test_install_completion():\r\n        bash_completion_path: Path = Path.home() / \".bashrc\"\r\n        text = \"\"\r\n        if bash_completion_path.is_file():  # pragma: nocover\r\n            text = bash_completion_path.read_text()\r\n        result = subprocess.run(\r\n            [\r\n                \"bash\",\r\n                \"-c\",\r\n                f\"{sys.executable} -m coverage run {mod.__file__} --install-completion\",\r\n            ],\r\n            stdout=subprocess.PIPE,\r\n            stderr=subprocess.PIPE,\r\n            encoding=\"utf-8\",\r\n            env={**os.environ, \"SHELL\": \"/bin/bash\", \"_TYPER_COMPLETE_TESTING\": \"True\"},\r\n        )\r\n        new_text = bash_completion_path.read_text()\r\n>       bash_completion_path.write_text(text)\r\n\r\ntests/test_completion/test_completion.py:41:\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n/usr/lib64/python3.8/pathlib.py:1255: in write_text\r\n    with self.open(mode='w', encoding=encoding, errors=errors) as f:\r\n/usr/lib64/python3.8/pathlib.py:1222: in open\r\n    return io.open(self, mode, buffering, encoding, errors, newline,\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\nself = PosixPath('/home/tkloczko/.bashrc'), name = '/home/tkloczko/.bashrc', flags = 524865, mode = 438\r\n\r\n    def _opener(self, name, flags, mode=0o666):\r\n        # A stub for the opener argument to built-in open()\r\n>       return self._accessor.open(self, flags, mode)\r\nE       PermissionError: [Errno 13] Permission denied: '/home/tkloczko/.bashrc'\r\n\r\n/usr/lib64/python3.8/pathlib.py:1078: PermissionError\r\n_______________________________________________________________________ test_completion_install_bash _______________________________________________________________________\r\n\r\n    def test_completion_install_bash():\r\n        bash_completion_path: Path = Path.home() / \".bashrc\"\r\n        text = \"\"\r\n        if bash_completion_path.is_file():\r\n            text = bash_completion_path.read_text()\r\n        result = subprocess.run(\r\n            [\"coverage\", \"run\", mod.__file__, \"--install-completion\", \"bash\"],\r\n            stdout=subprocess.PIPE,\r\n            stderr=subprocess.PIPE,\r\n            encoding=\"utf-8\",\r\n            env={\r\n                **os.environ,\r\n                \"_TYPER_COMPLETE_TESTING\": \"True\",\r\n                \"_TYPER_COMPLETE_TEST_DISABLE_SHELL_DETECTION\": \"True\",\r\n            },\r\n        )\r\n        new_text = bash_completion_path.read_text()\r\n>       bash_completion_path.write_text(text)\r\n\r\ntests/test_completion/test_completion_install.py:53:\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n/usr/lib64/python3.8/pathlib.py:1255: in write_text\r\n    with self.open(mode='w', encoding=encoding, errors=errors) as f:\r\n/usr/lib64/python3.8/pathlib.py:1222: in open\r\n    return io.open(self, mode, buffering, encoding, errors, newline,\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\nself = PosixPath('/home/tkloczko/.bashrc'), name = '/home/tkloczko/.bashrc', flags = 524865, mode = 438\r\n\r\n    def _opener(self, name, flags, mode=0o666):\r\n        # A stub for the opener argument to built-in open()\r\n>       return self._accessor.open(self, flags, mode)\r\nE       PermissionError: [Errno 13] Permission denied: '/home/tkloczko/.bashrc'\r\n\r\n/usr/lib64/python3.8/pathlib.py:1078: PermissionError\r\n========================================================================= short test summary info ==========================================================================\r\nFAILED tests/test_completion/test_completion.py::test_show_completion - AssertionError: assert '_TUTORIAL001.PY_COMPLETE=complete_bash' in ''\r\nFAILED tests/test_completion/test_completion.py::test_install_completion - PermissionError: [Errno 13] Permission denied: '/home/tkloczko/.bashrc'\r\nFAILED tests/test_completion/test_completion_install.py::test_completion_install_bash - PermissionError: [Errno 13] Permission denied: '/home/tkloczko/.bashrc'\r\n================================================================= 3 failed, 564 passed in 68.94s (0:01:08) =================================================================\r\n```\r\n</details>\r\n\r\nWhy test units are trying fiddle in files outside build env? 🤔 \r\n",
          "created_at": "2022-11-14T00:45:04Z",
          "type": "comment"
        },
        {
          "author": "kloczek",
          "body": "Gentle ping .. any update? 🤔 ",
          "created_at": "2024-03-18T01:54:38Z",
          "type": "comment"
        },
        {
          "author": "kloczek",
          "body": "Just tested 0.11.0 and still I see that test suite tries to write something in ~.bashrc.\r\n<details>\r\n<summary>Here is pytest output:</summary>\r\n\r\n```console\r\n+ export TERMINAL_WIDTH=3000 _TYPER_FORCE_DISABLE_TERMINAL=1\r\n+ TERMINAL_WIDTH=3000\r\n+ _TYPER_FORCE_DISABLE_TERMINAL=1\r\n+ PYTHONPATH=/home/tkloczko/rpmbuild/BUILDROOT/python-typer-0.11.0-2.fc36.x86_64/usr/lib64/python3.9/site-packages:/home/tkloczko/rpmbuild/BUILDROOT/python-typer-0.11.0-2.fc36.x86_64/usr/lib/python3.9/site-packages\r\n+ /usr/bin/pytest -ra -m 'not network'\r\n==================================================================================== test session starts ====================================================================================\r\nplatform linux -- Python 3.9.18, pytest-8.1.1, pluggy-1.4.0\r\nrootdir: /home/tkloczko/rpmbuild/BUILD/typer-0.11.0\r\nconfigfile: pyproject.toml\r\ncollected 901 items\r\n\r\ndocs_src/testing/app01/test_main.py .                                                                                                                                                 [  0%]\r\ndocs_src/testing/app02/test_main.py .                                                                                                                                                 [  0%]\r\ndocs_src/testing/app02_an/test_main.py .                                                                                                                                              [  0%]\r\ndocs_src/testing/app03/test_main.py .                                                                                                                                                 [  0%]\r\ntests/test_ambiguous_params.py ...................                                                                                                                                    [  2%]\r\ntests/test_annotated.py .s..                                                                                                                                                          [  2%]\r\ntests/test_compat/test_option_get_help.py ....                                                                                                                                        [  3%]\r\ntests/test_completion/test_completion.py FF........                                                                                                                                   [  4%]\r\ntests/test_completion/test_completion_complete.py ..........                                                                                                                          [  5%]\r\ntests/test_completion/test_completion_complete_no_help.py ....                                                                                                                        [  6%]\r\ntests/test_completion/test_completion_install.py .F...                                                                                                                                [  6%]\r\ntests/test_completion/test_completion_show.py .......                                                                                                                                 [  7%]\r\ntests/test_exit_errors.py ...                                                                                                                                                         [  7%]\r\ntests/test_others.py ..............                                                                                                                                                   [  9%]\r\ntests/test_prog_name.py .                                                                                                                                                             [  9%]\r\ntests/test_rich_utils.py .                                                                                                                                                            [  9%]\r\ntests/test_tracebacks.py ...                                                                                                                                                          [  9%]\r\ntests/test_tutorial/test_arguments/test_default/test_tutorial001.py ....                                                                                                              [ 10%]\r\ntests/test_tutorial/test_arguments/test_default/test_tutorial001_an.py ....                                                                                                           [ 10%]\r\ntests/test_tutorial/test_arguments/test_default/test_tutorial002.py ....                                                                                                              [ 11%]\r\ntests/test_tutorial/test_arguments/test_default/test_tutorial002_an.py ....                                                                                                           [ 11%]\r\ntests/test_tutorial/test_arguments/test_envvar/test_tutorial001.py ......                                                                                                             [ 12%]\r\ntests/test_tutorial/test_arguments/test_envvar/test_tutorial001_an.py ......                                                                                                          [ 12%]\r\ntests/test_tutorial/test_arguments/test_envvar/test_tutorial002.py .....                                                                                                              [ 13%]\r\ntests/test_tutorial/test_arguments/test_envvar/test_tutorial002_an.py .....                                                                                                           [ 14%]\r\ntests/test_tutorial/test_arguments/test_envvar/test_tutorial003.py .....                                                                                                              [ 14%]\r\ntests/test_tutorial/test_arguments/test_envvar/test_tutorial003_an.py .....                                                                                                           [ 15%]\r\ntests/test_tutorial/test_arguments/test_help/test_tutorial001.py ....                                                                                                                 [ 15%]\r\ntests/test_tutorial/test_arguments/test_help/test_tutorial001_an.py ....                                                                                                              [ 16%]\r\ntests/test_tutorial/test_arguments/test_help/test_tutorial002.py ...                                                                                                                  [ 16%]\r\ntests/test_tutorial/test_arguments/test_help/test_tutorial002_an.py ...                                                                                                               [ 16%]\r\ntests/test_tutorial/test_arguments/test_help/test_tutorial003.py ...                                                                                                                  [ 17%]\r\ntests/test_tutorial/test_arguments/test_help/test_tutorial003_an.py ...                                                                                                               [ 17%]\r\ntests/test_tutorial/test_arguments/test_help/test_tutorial004.py ...                                                                                                                  [ 17%]\r\ntests/test_tutorial/test_arguments/test_help/test_tutorial004_an.py ...                                                                                                               [ 18%]\r\ntests/test_tutorial/test_arguments/test_help/test_tutorial005.py ...                                                                                                                  [ 18%]\r\ntests/test_tutorial/test_arguments/test_help/test_tutorial005_an.py ...                                                                                                               [ 18%]\r\ntests/test_tutorial/test_arguments/test_help/test_tutorial006.py ...                                                                                                                  [ 19%]\r\ntests/test_tutorial/test_arguments/test_help/test_tutorial006_an.py ...                                                                                                               [ 19%]\r\ntests/test_tutorial/test_arguments/test_help/test_tutorial007.py ...                                                                                                                  [ 19%]\r\ntests/test_tutorial/test_arguments/test_help/test_tutorial007_an.py ...                                                                                                               [ 20%]\r\ntests/test_tutorial/test_arguments/test_help/test_tutorial008.py ....                                                                                                                 [ 20%]\r\ntests/test_tutorial/test_arguments/test_help/test_tutorial008_an.py ....                                                                                                              [ 20%]\r\ntests/test_tutorial/test_arguments/test_optional/test_tutorial001.py .....                                                                                                            [ 21%]\r\ntests/test_tutorial/test_arguments/test_optional/test_tutorial001_an.py .....                                                                                                         [ 22%]\r\ntests/test_tutorial/test_arguments/test_optional/test_tutorial002.py ....                                                                                                             [ 22%]\r\ntests/test_tutorial/test_arguments/test_optional/test_tutorial002_an.py ....                                                                                                          [ 22%]\r\ntests/test_tutorial/test_arguments/test_optional/test_tutorial003.py .....                                                                                                            [ 23%]\r\ntests/test_tutorial/test_commands/test_arguments/test_tutorial001.py .....                                                                                                            [ 24%]\r\ntests/test_tutorial/test_commands/test_callback/test_tutorial001.py ........                                                                                                          [ 24%]\r\ntests/test_tutorial/test_commands/test_callback/test_tutorial002.py ..                                                                                                                [ 25%]\r\ntests/test_tutorial/test_commands/test_callback/test_tutorial003.py ...                                                                                                               [ 25%]\r\ntests/test_tutorial/test_commands/test_callback/test_tutorial004.py ...                                                                                                               [ 25%]\r\ntests/test_tutorial/test_commands/test_context/test_tutorial001.py ...                                                                                                                [ 26%]\r\ntests/test_tutorial/test_commands/test_context/test_tutorial002.py ....                                                                                                               [ 26%]\r\ntests/test_tutorial/test_commands/test_context/test_tutorial003.py ....                                                                                                               [ 27%]\r\ntests/test_tutorial/test_commands/test_context/test_tutorial004.py ..                                                                                                                 [ 27%]\r\ntests/test_tutorial/test_commands/test_help/test_tutorial001.py ............                                                                                                          [ 28%]\r\ntests/test_tutorial/test_commands/test_help/test_tutorial001_an.py ............                                                                                                       [ 29%]\r\ntests/test_tutorial/test_commands/test_help/test_tutorial002.py ......                                                                                                                [ 30%]\r\ntests/test_tutorial/test_commands/test_help/test_tutorial003.py ....                                                                                                                  [ 31%]\r\ntests/test_tutorial/test_commands/test_help/test_tutorial004.py ......                                                                                                                [ 31%]\r\ntests/test_tutorial/test_commands/test_help/test_tutorial004_an.py ......                                                                                                             [ 32%]\r\ntests/test_tutorial/test_commands/test_help/test_tutorial005.py ......                                                                                                                [ 33%]\r\ntests/test_tutorial/test_commands/test_help/test_tutorial005_an.py ......                                                                                                             [ 33%]\r\ntests/test_tutorial/test_commands/test_help/test_tutorial006.py ...                                                                                                                   [ 34%]\r\ntests/test_tutorial/test_commands/test_help/test_tutorial007.py ....                                                                                                                  [ 34%]\r\ntests/test_tutorial/test_commands/test_help/test_tutorial007_an.py ....                                                                                                               [ 34%]\r\ntests/test_tutorial/test_commands/test_help/test_tutorial008.py ...                                                                                                                   [ 35%]\r\ntests/test_tutorial/test_commands/test_index/test_tutorial001.py ...                                                                                                                  [ 35%]\r\ntests/test_tutorial/test_commands/test_index/test_tutorial002.py ....                                                                                                                 [ 36%]\r\ntests/test_tutorial/test_commands/test_index/test_tutorial003.py ....                                                                                                                 [ 36%]\r\ntests/test_tutorial/test_commands/test_name/test_tutorial001.py ....                                                                                                                  [ 36%]\r\ntests/test_tutorial/test_commands/test_one_or_multiple/test_tutorial001.py ...                                                                                                        [ 37%]\r\ntests/test_tutorial/test_commands/test_one_or_multiple/test_tutorial002.py ...                                                                                                        [ 37%]\r\ntests/test_tutorial/test_commands/test_options/test_tutorial001.py .........                                                                                                          [ 38%]\r\ntests/test_tutorial/test_commands/test_options/test_tutorial001_an.py .........                                                                                                       [ 39%]\r\ntests/test_tutorial/test_exceptions/test_tutorial001.py ...                                                                                                                           [ 39%]\r\ntests/test_tutorial/test_exceptions/test_tutorial002.py ...                                                                                                                           [ 40%]\r\ntests/test_tutorial/test_exceptions/test_tutorial003.py ..                                                                                                                            [ 40%]\r\ntests/test_tutorial/test_exceptions/test_tutorial004.py ..                                                                                                                            [ 40%]\r\ntests/test_tutorial/test_first_steps/test_tutorial001.py ..                                                                                                                           [ 40%]\r\ntests/test_tutorial/test_first_steps/test_tutorial002.py ...                                                                                                                          [ 41%]\r\ntests/test_tutorial/test_first_steps/test_tutorial003.py ...                                                                                                                          [ 41%]\r\ntests/test_tutorial/test_first_steps/test_tutorial004.py ......                                                                                                                       [ 42%]\r\ntests/test_tutorial/test_first_steps/test_tutorial005.py ......                                                                                                                       [ 42%]\r\ntests/test_tutorial/test_first_steps/test_tutorial006.py ......                                                                                                                       [ 43%]\r\ntests/test_tutorial/test_multiple_values/test_arguments_with_multiple_values/test_tutorial001.py ..                                                                                   [ 43%]\r\ntests/test_tutorial/test_multiple_values/test_arguments_with_multiple_values/test_tutorial002.py .....                                                                                [ 44%]\r\ntests/test_tutorial/test_multiple_values/test_arguments_with_multiple_values/test_tutorial002_an.py .....                                                                             [ 44%]\r\ntests/test_tutorial/test_multiple_values/test_multiple_options/test_tutorial001.py ....                                                                                               [ 45%]\r\ntests/test_tutorial/test_multiple_values/test_multiple_options/test_tutorial001_an.py ....                                                                                            [ 45%]\r\ntests/test_tutorial/test_multiple_values/test_multiple_options/test_tutorial002.py ....                                                                                               [ 46%]\r\ntests/test_tutorial/test_multiple_values/test_multiple_options/test_tutorial002_an.py ....                                                                                            [ 46%]\r\ntests/test_tutorial/test_multiple_values/test_options_with_multiple_values/test_tutorial001.py .....                                                                                  [ 47%]\r\ntests/test_tutorial/test_multiple_values/test_options_with_multiple_values/test_tutorial001_an.py .....                                                                               [ 47%]\r\ntests/test_tutorial/test_options/test_callback/test_tutorial001.py ...                                                                                                                [ 48%]\r\ntests/test_tutorial/test_options/test_callback/test_tutorial001_an.py ...                                                                                                             [ 48%]\r\ntests/test_tutorial/test_options/test_callback/test_tutorial003.py ....                                                                                                               [ 48%]\r\ntests/test_tutorial/test_options/test_callback/test_tutorial003_an.py ....                                                                                                            [ 49%]\r\ntests/test_tutorial/test_options/test_callback/test_tutorial004.py ....                                                                                                               [ 49%]\r\ntests/test_tutorial/test_options/test_callback/test_tutorial004_an.py ....                                                                                                            [ 50%]\r\ntests/test_tutorial/test_options/test_help/test_tutorial001.py .....                                                                                                                  [ 50%]\r\ntests/test_tutorial/test_options/test_help/test_tutorial001_an.py .....                                                                                                               [ 51%]\r\ntests/test_tutorial/test_options/test_help/test_tutorial002.py ....                                                                                                                   [ 51%]\r\ntests/test_tutorial/test_options/test_help/test_tutorial002_an.py ....                                                                                                                [ 52%]\r\ntests/test_tutorial/test_options/test_help/test_tutorial003.py ...                                                                                                                    [ 52%]\r\ntests/test_tutorial/test_options/test_help/test_tutorial003_an.py ...                                                                                                                 [ 52%]\r\ntests/test_tutorial/test_options/test_name/test_tutorial001.py ....                                                                                                                   [ 53%]\r\ntests/test_tutorial/test_options/test_name/test_tutorial001_an.py ....                                                                                                                [ 53%]\r\ntests/test_tutorial/test_options/test_name/test_tutorial002.py ....                                                                                                                   [ 54%]\r\ntests/test_tutorial/test_options/test_name/test_tutorial002_an.py ....                                                                                                                [ 54%]\r\ntests/test_tutorial/test_options/test_name/test_tutorial003.py ...                                                                                                                    [ 55%]\r\ntests/test_tutorial/test_options/test_name/test_tutorial003_an.py ...                                                                                                                 [ 55%]\r\ntests/test_tutorial/test_options/test_name/test_tutorial004.py ....                                                                                                                   [ 55%]\r\ntests/test_tutorial/test_options/test_name/test_tutorial004_an.py ....                                                                                                                [ 56%]\r\ntests/test_tutorial/test_options/test_name/test_tutorial005.py ......                                                                                                                 [ 56%]\r\ntests/test_tutorial/test_options/test_name/test_tutorial005_an.py ......                                                                                                              [ 57%]\r\ntests/test_tutorial/test_options/test_prompt/test_tutorial001.py ....                                                                                                                 [ 58%]\r\ntests/test_tutorial/test_options/test_prompt/test_tutorial001_an.py ....                                                                                                              [ 58%]\r\ntests/test_tutorial/test_options/test_prompt/test_tutorial002.py ....                                                                                                                 [ 58%]\r\ntests/test_tutorial/test_options/test_prompt/test_tutorial002_an.py ....                                                                                                              [ 59%]\r\ntests/test_tutorial/test_options/test_prompt/test_tutorial003.py .....                                                                                                                [ 59%]\r\ntests/test_tutorial/test_options/test_prompt/test_tutorial003_an.py .....                                                                                                             [ 60%]\r\ntests/test_tutorial/test_options/test_required/test_tutorial001.py .....                                                                                                              [ 61%]\r\ntests/test_tutorial/test_options/test_required/test_tutorial001_an.py .....                                                                                                           [ 61%]\r\ntests/test_tutorial/test_options/test_version/test_tutorial003.py .....                                                                                                               [ 62%]\r\ntests/test_tutorial/test_options/test_version/test_tutorial003_an.py .....                                                                                                            [ 62%]\r\ntests/test_tutorial/test_options_autocompletion/test_tutorial002.py ...                                                                                                               [ 63%]\r\ntests/test_tutorial/test_options_autocompletion/test_tutorial002_an.py ...                                                                                                            [ 63%]\r\ntests/test_tutorial/test_options_autocompletion/test_tutorial003.py ...                                                                                                               [ 63%]\r\ntests/test_tutorial/test_options_autocompletion/test_tutorial003_an.py ...                                                                                                            [ 64%]\r\ntests/test_tutorial/test_options_autocompletion/test_tutorial004.py ...                                                                                                               [ 64%]\r\ntests/test_tutorial/test_options_autocompletion/test_tutorial004_an.py ...                                                                                                            [ 64%]\r\ntests/test_tutorial/test_options_autocompletion/test_tutorial007.py ...                                                                                                               [ 65%]\r\ntests/test_tutorial/test_options_autocompletion/test_tutorial007_an.py ...                                                                                                            [ 65%]\r\ntests/test_tutorial/test_options_autocompletion/test_tutorial008.py ...                                                                                                               [ 65%]\r\ntests/test_tutorial/test_options_autocompletion/test_tutorial008_an.py ...                                                                                                            [ 66%]\r\ntests/test_tutorial/test_options_autocompletion/test_tutorial009.py ...                                                                                                               [ 66%]\r\ntests/test_tutorial/test_options_autocompletion/test_tutorial009_an.py ...                                                                                                            [ 66%]\r\ntests/test_tutorial/test_parameter_types/test_bool/test_tutorial001.py .....                                                                                                          [ 67%]\r\ntests/test_tutorial/test_parameter_types/test_bool/test_tutorial001_an.py .....                                                                                                       [ 67%]\r\ntests/test_tutorial/test_parameter_types/test_bool/test_tutorial002.py .......                                                                                                        [ 68%]\r\ntests/test_tutorial/test_parameter_types/test_bool/test_tutorial002_an.py .......                                                                                                     [ 69%]\r\ntests/test_tutorial/test_parameter_types/test_bool/test_tutorial003.py ....                                                                                                           [ 69%]\r\ntests/test_tutorial/test_parameter_types/test_bool/test_tutorial003_an.py ....                                                                                                        [ 70%]\r\ntests/test_tutorial/test_parameter_types/test_bool/test_tutorial004.py .....                                                                                                          [ 70%]\r\ntests/test_tutorial/test_parameter_types/test_bool/test_tutorial004_an.py .....                                                                                                       [ 71%]\r\ntests/test_tutorial/test_parameter_types/test_custom_types/test_tutorial001.py ....                                                                                                   [ 71%]\r\ntests/test_tutorial/test_parameter_types/test_custom_types/test_tutorial001_an.py ....                                                                                                [ 72%]\r\ntests/test_tutorial/test_parameter_types/test_custom_types/test_tutorial002.py ....                                                                                                   [ 72%]\r\ntests/test_tutorial/test_parameter_types/test_custom_types/test_tutorial002_an.py ....                                                                                                [ 73%]\r\ntests/test_tutorial/test_parameter_types/test_datetime/test_tutorial001.py ....                                                                                                       [ 73%]\r\ntests/test_tutorial/test_parameter_types/test_datetime/test_tutorial002.py ...                                                                                                        [ 73%]\r\ntests/test_tutorial/test_parameter_types/test_datetime/test_tutorial002_an.py ...                                                                                                     [ 74%]\r\ntests/test_tutorial/test_parameter_types/test_enum/test_tutorial001.py .....                                                                                                          [ 74%]\r\ntests/test_tutorial/test_parameter_types/test_enum/test_tutorial002.py ...                                                                                                            [ 75%]\r\ntests/test_tutorial/test_parameter_types/test_enum/test_tutorial002_an.py ...                                                                                                         [ 75%]\r\ntests/test_tutorial/test_parameter_types/test_enum/test_tutorial003.py .....                                                                                                          [ 76%]\r\ntests/test_tutorial/test_parameter_types/test_enum/test_tutorial003_an.py .....                                                                                                       [ 76%]\r\ntests/test_tutorial/test_parameter_types/test_file/test_tutorial001.py ..                                                                                                             [ 76%]\r\ntests/test_tutorial/test_parameter_types/test_file/test_tutorial001_an.py ..                                                                                                          [ 77%]\r\ntests/test_tutorial/test_parameter_types/test_file/test_tutorial002.py ..                                                                                                             [ 77%]\r\ntests/test_tutorial/test_parameter_types/test_file/test_tutorial002_an.py ..                                                                                                          [ 77%]\r\ntests/test_tutorial/test_parameter_types/test_file/test_tutorial003.py ..                                                                                                             [ 77%]\r\ntests/test_tutorial/test_parameter_types/test_file/test_tutorial003_an.py ..                                                                                                          [ 77%]\r\ntests/test_tutorial/test_parameter_types/test_file/test_tutorial004.py ..                                                                                                             [ 78%]\r\ntests/test_tutorial/test_parameter_types/test_file/test_tutorial004_an.py ..                                                                                                          [ 78%]\r\ntests/test_tutorial/test_parameter_types/test_file/test_tutorial005.py ..                                                                                                             [ 78%]\r\ntests/test_tutorial/test_parameter_types/test_file/test_tutorial005_an.py ..                                                                                                          [ 78%]\r\ntests/test_tutorial/test_parameter_types/test_index/test_tutorial001.py ....                                                                                                          [ 79%]\r\ntests/test_tutorial/test_parameter_types/test_number/test_tutorial001.py ........                                                                                                     [ 80%]\r\ntests/test_tutorial/test_parameter_types/test_number/test_tutorial001_an.py ........                                                                                                  [ 81%]\r\ntests/test_tutorial/test_parameter_types/test_number/test_tutorial002.py ...                                                                                                          [ 81%]\r\ntests/test_tutorial/test_parameter_types/test_number/test_tutorial002_an.py ...                                                                                                       [ 81%]\r\ntests/test_tutorial/test_parameter_types/test_number/test_tutorial003.py .......                                                                                                      [ 82%]\r\ntests/test_tutorial/test_parameter_types/test_number/test_tutorial003_an.py .......                                                                                                   [ 83%]\r\ntests/test_tutorial/test_parameter_types/test_path/test_tutorial001.py .....                                                                                                          [ 83%]\r\ntests/test_tutorial/test_parameter_types/test_path/test_tutorial001_an.py .....                                                                                                       [ 84%]\r\ntests/test_tutorial/test_parameter_types/test_path/test_tutorial002.py ....                                                                                                           [ 84%]\r\ntests/test_tutorial/test_parameter_types/test_path/test_tutorial002_an.py ....                                                                                                        [ 85%]\r\ntests/test_tutorial/test_parameter_types/test_uuid/test_tutorial001.py ...                                                                                                            [ 85%]\r\ntests/test_tutorial/test_prompt/test_tutorial001.py ..                                                                                                                                [ 85%]\r\ntests/test_tutorial/test_prompt/test_tutorial002.py ...                                                                                                                               [ 86%]\r\ntests/test_tutorial/test_prompt/test_tutorial003.py ...                                                                                                                               [ 86%]\r\ntests/test_tutorial/test_subcommands/test_callback_override/test_tutorial001.py ..                                                                                                    [ 86%]\r\ntests/test_tutorial/test_subcommands/test_callback_override/test_tutorial002.py ..                                                                                                    [ 86%]\r\ntests/test_tutorial/test_subcommands/test_callback_override/test_tutorial003.py ...                                                                                                   [ 87%]\r\ntests/test_tutorial/test_subcommands/test_callback_override/test_tutorial004.py ...                                                                                                   [ 87%]\r\ntests/test_tutorial/test_subcommands/test_name_help/test_tutorial001.py ....                                                                                                          [ 88%]\r\ntests/test_tutorial/test_subcommands/test_name_help/test_tutorial002.py ....                                                                                                          [ 88%]\r\ntests/test_tutorial/test_subcommands/test_name_help/test_tutorial003.py ....                                                                                                          [ 88%]\r\ntests/test_tutorial/test_subcommands/test_name_help/test_tutorial004.py ....                                                                                                          [ 89%]\r\ntests/test_tutorial/test_subcommands/test_name_help/test_tutorial005.py ....                                                                                                          [ 89%]\r\ntests/test_tutorial/test_subcommands/test_name_help/test_tutorial006.py ....                                                                                                          [ 90%]\r\ntests/test_tutorial/test_subcommands/test_name_help/test_tutorial007.py ....                                                                                                          [ 90%]\r\ntests/test_tutorial/test_subcommands/test_name_help/test_tutorial008.py ....                                                                                                          [ 91%]\r\ntests/test_tutorial/test_subcommands/test_tutorial001.py .........                                                                                                                    [ 92%]\r\ntests/test_tutorial/test_subcommands/test_tutorial002.py .........                                                                                                                    [ 93%]\r\ntests/test_tutorial/test_subcommands/test_tutorial003.py ................                                                                                                             [ 94%]\r\ntests/test_tutorial/test_terminating/test_tutorial001.py ....                                                                                                                         [ 95%]\r\ntests/test_tutorial/test_terminating/test_tutorial002.py ...                                                                                                                          [ 95%]\r\ntests/test_tutorial/test_terminating/test_tutorial003.py .....                                                                                                                        [ 96%]\r\ntests/test_tutorial/test_testing/test_app01.py ...                                                                                                                                    [ 96%]\r\ntests/test_tutorial/test_testing/test_app02.py ...                                                                                                                                    [ 96%]\r\ntests/test_tutorial/test_testing/test_app02_an.py ...                                                                                                                                 [ 97%]\r\ntests/test_tutorial/test_testing/test_app03.py ...                                                                                                                                    [ 97%]\r\ntests/test_tutorial/test_using_click/test_tutorial003.py .....                                                                                                                        [ 98%]\r\ntests/test_tutorial/test_using_click/test_tutorial004.py .....                                                                                                                        [ 98%]\r\ntests/test_type_conversion.py ............                                                                                                                                            [100%]\r\n\r\n========================================================================================= FAILURES ==========================================================================================\r\n___________________________________________________________________________________ test_show_completion ____________________________________________________________________________________\r\n\r\n    def test_show_completion():\r\n        result = subprocess.run(\r\n            [\r\n                \"bash\",\r\n                \"-c\",\r\n                f\"{sys.executable}  -m coverage run {mod.__file__} --show-completion\",\r\n            ],\r\n            capture_output=True,\r\n            encoding=\"utf-8\",\r\n            env={**os.environ, \"SHELL\": \"/bin/bash\", \"_TYPER_COMPLETE_TESTING\": \"True\"},\r\n        )\r\n>       assert \"_TUTORIAL001.PY_COMPLETE=complete_bash\" in result.stdout\r\nE       AssertionError: assert '_TUTORIAL001.PY_COMPLETE=complete_bash' in ''\r\nE        +  where '' = CompletedProcess(args=['bash', '-c', '/usr/bin/python3  -m coverage run /home/tkloczko/rpmbuild/BUILD/typer-0.11.0/docs_src/commands/index/tutorial001.py --show-completion'], returncode=1, stdout='', stderr='Shell sh not supported.\\n').stdout\r\n\r\ntests/test_completion/test_completion.py:20: AssertionError\r\n__________________________________________________________________________________ test_install_completion __________________________________________________________________________________\r\n\r\n    def test_install_completion():\r\n        bash_completion_path: Path = Path.home() / \".bashrc\"\r\n        text = \"\"\r\n        if bash_completion_path.is_file():  # pragma: no cover\r\n            text = bash_completion_path.read_text()\r\n        result = subprocess.run(\r\n            [\r\n                \"bash\",\r\n                \"-c\",\r\n                f\"{sys.executable} -m coverage run {mod.__file__} --install-completion\",\r\n            ],\r\n            capture_output=True,\r\n            encoding=\"utf-8\",\r\n            env={**os.environ, \"SHELL\": \"/bin/bash\", \"_TYPER_COMPLETE_TESTING\": \"True\"},\r\n        )\r\n        new_text = bash_completion_path.read_text()\r\n>       bash_completion_path.write_text(text)\r\n\r\ntests/test_completion/test_completion.py:39:\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n/usr/lib64/python3.9/pathlib.py:1285: in write_text\r\n    with self.open(mode='w', encoding=encoding, errors=errors) as f:\r\n/usr/lib64/python3.9/pathlib.py:1252: in open\r\n    return io.open(self, mode, buffering, encoding, errors, newline,\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\nself = PosixPath('/home/tkloczko/.bashrc'), name = '/home/tkloczko/.bashrc', flags = 524865, mode = 438\r\n\r\n    def _opener(self, name, flags, mode=0o666):\r\n        # A stub for the opener argument to built-in open()\r\n>       return self._accessor.open(self, flags, mode)\r\nE       PermissionError: [Errno 13] Permission denied: '/home/tkloczko/.bashrc'\r\n\r\n/usr/lib64/python3.9/pathlib.py:1120: PermissionError\r\n_______________________________________________________________________________ test_completion_install_bash ________________________________________________________________________________\r\n\r\n    def test_completion_install_bash():\r\n        bash_completion_path: Path = Path.home() / \".bashrc\"\r\n        text = \"\"\r\n        if bash_completion_path.is_file():\r\n            text = bash_completion_path.read_text()\r\n        result = subprocess.run(\r\n            [\r\n                sys.executable,\r\n                \"-m\",\r\n                \"coverage\",\r\n                \"run\",\r\n                mod.__file__,\r\n                \"--install-completion\",\r\n                \"bash\",\r\n            ],\r\n            capture_output=True,\r\n            encoding=\"utf-8\",\r\n            env={\r\n                **os.environ,\r\n                \"_TYPER_COMPLETE_TESTING\": \"True\",\r\n                \"_TYPER_COMPLETE_TEST_DISABLE_SHELL_DETECTION\": \"True\",\r\n            },\r\n        )\r\n        new_text = bash_completion_path.read_text()\r\n>       bash_completion_path.write_text(text)\r\n\r\ntests/test_completion/test_completion_install.py:56:\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n/usr/lib64/python3.9/pathlib.py:1285: in write_text\r\n    with self.open(mode='w', encoding=encoding, errors=errors) as f:\r\n/usr/lib64/python3.9/pathlib.py:1252: in open\r\n    return io.open(self, mode, buffering, encoding, errors, newline,\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\nself = PosixPath('/home/tkloczko/.bashrc'), name = '/home/tkloczko/.bashrc', flags = 524865, mode = 438\r\n\r\n    def _opener(self, name, flags, mode=0o666):\r\n        # A stub for the opener argument to built-in open()\r\n>       return self._accessor.open(self, flags, mode)\r\nE       PermissionError: [Errno 13] Permission denied: '/home/tkloczko/.bashrc'\r\n\r\n/usr/lib64/python3.9/pathlib.py:1120: PermissionError\r\n================================================================================== short test summary info ==================================================================================\r\nSKIPPED [1] tests/test_annotated.py:26: requires python3.10+\r\nFAILED tests/test_completion/test_completion.py::test_show_completion - AssertionError: assert '_TUTORIAL001.PY_COMPLETE=complete_bash' in ''\r\nFAILED tests/test_completion/test_completion.py::test_install_completion - PermissionError: [Errno 13] Permission denied: '/home/tkloczko/.bashrc'\r\nFAILED tests/test_completion/test_completion_install.py::test_completion_install_bash - PermissionError: [Errno 13] Permission denied: '/home/tkloczko/.bashrc'\r\n=================================================================== 3 failed, 897 passed, 1 skipped in 123.20s (0:02:03) ====================================================================\r\n```\r\n</details>\r\n",
          "created_at": "2024-03-27T06:57:22Z",
          "type": "comment"
        },
        {
          "author": "svlandeg",
          "body": "Hey @kloczek, apologies for the late follow-up. \r\n\r\nWe've been discussing this [here](https://github.com/fastapi/typer/pull/866) and it sounds like Tiangolo's [proposal](https://github.com/fastapi/typer/pull/866#issuecomment-2316421622) would fix your issue, right?\r\n\r\n> maybe we could have the \"install completion\" tests run only under some opt-in env var or something like that, that we could enable by default on CI, or we could enable manually when testing locally, but wouldn't affect others that come and try to run the tests. ",
          "created_at": "2024-09-05T09:17:44Z",
          "type": "comment"
        },
        {
          "author": "kloczek",
          "body": "Do you wan me to test that? 🤔 ",
          "created_at": "2024-09-05T21:53:43Z",
          "type": "comment"
        },
        {
          "author": "svlandeg",
          "body": "Once we've got a solution ready you could, yea :-) ",
          "created_at": "2024-09-06T07:18:04Z",
          "type": "comment"
        }
      ]
    },
    {
      "repository": "fastapi/typer",
      "issue_number": 410,
      "issue_title": "Empty tuple returned for Option instead of expected `None` when no values passed",
      "issue_url": "https://github.com/fastapi/typer/issues/410",
      "closed_at": "2024-03-22T15:02:43Z",
      "merged_prs": [
        {
          "pr_number": 664,
          "pr_title": "🐛 Fix default value of `None` for CLI Parameters when the type is `list | None` and the default value is `None`",
          "pr_url": "https://github.com/fastapi/typer/pull/664",
          "merged_at": "2024-03-23T17:17:14Z",
          "base_commit": {
            "sha": "74433d22b489d13fe1a0bb1f6729127cfa942996",
            "ref": "master"
          }
        }
      ],
      "discussion": [
        {
          "author": "Andrew-Sheridan",
          "body": "### First Check\n\n- [X] I added a very descriptive title to this issue.\n- [X] I used the GitHub search to find a similar issue and didn't find it.\n- [X] I searched the Typer documentation, with the integrated search.\n- [X] I already searched in Google \"How to X in Typer\" and didn't find any information.\n- [X] I already read and followed all the tutorial in the docs and didn't find an answer.\n- [X] I already checked if it is not related to Typer but to [Click](https://github.com/pallets/click).\n\n### Commit to Help\n\n- [X] I commit to help with one of those options 👆\n\n### Example Code\n\n```python\nimport typer\r\nfrom typing import Optional, List\r\n\r\napp = typer.Typer(add_completion=False)\r\n\r\n\r\n@app.command()\r\ndef main(\r\n    foos: Optional[tuple[str]] = typer.Option(None, \"--foo\"),\r\n    bar: Optional[str] = typer.Option(None, \"--bar\"),\r\n):\r\n    print(f\"{type(foos)=}, {foos=}\")\r\n    print(f\"{type(bar)=}, {bar=}\")\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    app()\n```\n\n\n### Description\n\nIf an option is declared as `foo: Optional[List[str]] = typer.Option(None)` it should provide `None` if nothing is passed. Currently it is providing `()`, an empty tuple.\r\n\r\nIn comparison `bar: Optional[str] = typer.Option(None)` does provide `None` when missing, as expected.\r\n\r\n\r\n```console\r\n❯ python issue.py --help\r\nUsage: issue.py [OPTIONS]\r\n\r\nOptions:\r\n  --foo TEXT\r\n  --bar TEXT\r\n  --help      Show this message and exit.\r\n```\r\n\r\nNothing passed causes the returned value for `foo` to be an empty tuple, it should be `None`:\r\n```console\r\n❯ python issue.py\r\ntype(foos)=<class 'tuple'>, foos=()\r\ntype(bar)=<class 'NoneType'>, bar=None\r\n```\r\n\r\nPassing values it returns a tuple of the values\r\n```console\r\n❯ python issue.py --foo Hello --foo World --bar Goodbye\r\ntype(foos)=<class 'tuple'>, foos=('Hello', 'World')\r\ntype(bar)=<class 'str'>, bar='Goodbye'\r\n```\r\n\r\n\n\n### Operating System\n\nmacOS\n\n### Operating System Details\n\n_No response_\n\n### Typer Version\n\n0.4.1\n\n### Python Version\n\n3.10.0\n\n### Additional Context\n\nhttps://github.com/tiangolo/typer/issues/127#issuecomment-721710767",
          "type": "issue"
        },
        {
          "author": "jonasjancarik",
          "body": "The same thing happens with lists (an empty list is returned instead of `None`) when you use `Optional[List[str]] = typer.Option(None)` (as suggested in https://typer.tiangolo.com/tutorial/multiple-values/multiple-options/)",
          "created_at": "2022-08-30T09:59:09Z",
          "type": "comment"
        },
        {
          "author": "svlandeg",
          "body": "Hi, thanks for the report! It looks like this is still an issue. I'll go ahead and merge this issue report with the similar report in https://github.com/tiangolo/typer/issues/170, and close this one to keep the discussion in one thread. ",
          "created_at": "2024-03-22T15:02:43Z",
          "type": "comment"
        }
      ]
    },
    {
      "repository": "fastapi/typer",
      "issue_number": 359,
      "issue_title": "powershell completion fails with partial word because it includes the incomplete word with completed args",
      "issue_url": "https://github.com/fastapi/typer/issues/359",
      "closed_at": "2024-08-24T20:44:58Z",
      "merged_prs": [
        {
          "pr_number": 360,
          "pr_title": "🐛 Fix PowerShell completion with incomplete word",
          "pr_url": "https://github.com/fastapi/typer/pull/360",
          "merged_at": "2024-08-24T20:44:57Z",
          "base_commit": {
            "sha": "fda56d00be573d22dc761174895e26a0a1d12e78",
            "ref": "master"
          }
        }
      ],
      "discussion": [
        {
          "author": "patricksurry",
          "body": "### First Check\r\n\r\n- [X] I added a very descriptive title to this issue.\r\n- [X] I used the GitHub search to find a similar issue and didn't find it.\r\n- [X] I searched the Typer documentation, with the integrated search.\r\n- [X] I already searched in Google \"How to X in Typer\" and didn't find any information.\r\n- [X] I already read and followed all the tutorial in the docs and didn't find an answer.\r\n- [X] I already checked if it is not related to Typer but to [Click](https://github.com/pallets/click).\r\n\r\n### Commit to Help\r\n\r\n- [X] I commit to help with one of those options 👆\r\n\r\n### Example Code\r\n\r\n```python\r\nimport typer\r\n\r\nvalid_names = [\"Camila\", \"Carlos\", \"Sebastian\"]\r\n\r\n\r\ndef complete_name(incomplete: str):\r\n    completion = []\r\n    for name in valid_names:\r\n        if name.startswith(incomplete):\r\n            completion.append(name)\r\n    return completion\r\n\r\n\r\ndef main(\r\n    name: str = typer.Option(\r\n        \"World\", help=\"The name to say hi to.\", autocompletion=complete_name\r\n    )\r\n):\r\n    typer.echo(f\"Hello {name}\")\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    typer.run(main)\r\n```\r\n\r\n\r\n### Description\r\n\r\nThe intro example from the documentation fails in powershell if you start an incomplete name.  For example `typer ./main.py run --name Ca[TAB][TAB]` fails to suggest completions, tho `typer ./main.py run --name [TAB][TAB]` does.  \r\n\r\nThe [powershell completion](https://github.com/tiangolo/typer/blob/b97298181bd2a932be70ba417b9a712294fa327c/typer/_completion_click8.py#L37) set `args` to the full list of arguments including the incomplete word, e.g. `args = ['--name', 'Ca'], incomplete='Ca'` unlike the [bash completion](https://github.com/tiangolo/typer/blob/b97298181bd2a932be70ba417b9a712294fa327c/typer/_completion_click8.py#L37) which drops the incomplete word, e.g. `args = ['--name'], incomplete='Ca'`.\r\n\r\nIt looks straightforward to use the [`$cursorPosition`](https://github.com/tiangolo/typer/blob/b97298181bd2a932be70ba417b9a712294fa327c/typer/_completion_shared.py#L56)\r\n variable to figure out where to truncate the string and take all but the last arg up to that point.  I'll experiment and make a PR.\r\n\r\n\r\n### Operating System\r\n\r\nWindows\r\n\r\n### Operating System Details\r\n\r\nWindows 11, powershell 7\r\n\r\n### Typer Version\r\n\r\n0.4.0\r\n\r\n### Python Version\r\n\r\n3.7.12\r\n\r\n### Additional Context\r\n\r\n_No response_",
          "type": "issue"
        },
        {
          "author": "tiangolo",
          "body": "Thanks for the report @patricksurry! And thanks for the PR https://github.com/fastapi/typer/pull/360\r\n\r\nThis fix will be available in Typer `0.12.5`, released in the next few hours. :tada: ",
          "created_at": "2024-08-24T20:45:50Z",
          "type": "comment"
        }
      ]
    },
    {
      "repository": "fastapi/typer",
      "issue_number": 348,
      "issue_title": "PEP 604 Support",
      "issue_url": "https://github.com/fastapi/typer/issues/348",
      "closed_at": "2024-08-17T02:22:44Z",
      "merged_prs": [
        {
          "pr_number": 664,
          "pr_title": "🐛 Fix default value of `None` for CLI Parameters when the type is `list | None` and the default value is `None`",
          "pr_url": "https://github.com/fastapi/typer/pull/664",
          "merged_at": "2024-03-23T17:17:14Z",
          "base_commit": {
            "sha": "74433d22b489d13fe1a0bb1f6729127cfa942996",
            "ref": "master"
          }
        }
      ],
      "discussion": [
        {
          "author": "AngellusMortis",
          "body": "### First Check\n\n- [X] I added a very descriptive title to this issue.\n- [X] I used the GitHub search to find a similar issue and didn't find it.\n- [X] I searched the Typer documentation, with the integrated search.\n- [X] I already searched in Google \"How to X in Typer\" and didn't find any information.\n- [X] I already read and followed all the tutorial in the docs and didn't find an answer.\n- [X] I already checked if it is not related to Typer but to [Click](https://github.com/pallets/click).\n\n### Commit to Help\n\n- [X] I commit to help with one of those options 👆\n\n### Example Code\n\n```python\nfrom pathlib import Path\r\nimport typer\r\n\r\n\r\ndef main(output: Path | None):\r\n    typer.guess_name(f\"Hello {name}\")\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    typer.run(main)\n```\n\n\n### Description\n\nUsing an argument with the type of `pathlib.Path | None` (as per [PEP 604](https://www.python.org/dev/peps/pep-0604/)) raise the error:\r\n\r\n```\r\nType not yet supported: pathlib.Path | None\r\n```\n\n### Wanted Solution\n\n`| None` types should work instead of having to need to use `Optional[]`.\n\n### Wanted Code\n\n```python\nfrom pathlib import Path\r\nimport typer\r\n\r\n\r\ndef main(output: Path | None):\r\n    typer.echo(output)\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    typer.run(main)\n```\n\n\n### Alternatives\n\n_No response_\n\n### Operating System\n\nLinux\n\n### Operating System Details\n\n_No response_\n\n### Typer Version\n\n0.4.0\n\n### Python Version\n\n3.10.1\n\n### Additional Context\n\n_No response_",
          "type": "issue"
        },
        {
          "author": "navhits",
          "body": "I'm thinking if you can do this `output: Path = None`? When you have `Path | None`, the function expects either `Path` or `None` to be passed. This is the case even if you use `Optional[]` without setting a default value type. \r\nPlus I believe Typer is tested for up to Python 3.9. This means most of the features from Python 3.10 might not work as expected. Let's just say certain recursive dependencies used by Typer also might have similar troubles.",
          "created_at": "2022-01-18T07:18:38Z",
          "type": "comment"
        },
        {
          "author": "SRv6d",
          "body": "+1\r\nEven using Python 3.10 without the `__future__`  imports PEP 604 isn't supported.\r\n@tiangolo Are there any plans to support this in the near future?",
          "created_at": "2022-05-22T14:37:31Z",
          "type": "comment"
        },
        {
          "author": "navhits",
          "body": "Could this be more of a Pydantic issue?",
          "created_at": "2022-05-22T16:21:35Z",
          "type": "comment"
        },
        {
          "author": "SRv6d",
          "body": "@navhits I'm not exactly sure what you mean. Pydantic supports PEP 604 type hints.",
          "created_at": "2022-05-24T21:31:13Z",
          "type": "comment"
        },
        {
          "author": "navhits",
          "body": "If that's the case, then try building from [python3.10 branch](https://github.com/tiangolo/typer/tree/python3.10). In my understanding 604 is a 3.10 focussed enhancement.",
          "created_at": "2022-05-25T01:29:11Z",
          "type": "comment"
        },
        {
          "author": "navhits",
          "body": "Ok. There's a [0.4.1](https://github.com/tiangolo/typer/releases/tag/0.4.1) release already. Try this version @SRv6d ",
          "created_at": "2022-05-25T01:32:28Z",
          "type": "comment"
        },
        {
          "author": "SRv6d",
          "body": "I've been on that version since march.",
          "created_at": "2022-05-25T20:16:10Z",
          "type": "comment"
        },
        {
          "author": "Sighery",
          "body": "Seems this is still broken as of 0.7.0, even though that release is supposed to support Python 3.11 (and therefore I assumed these new type annotations included with Python3.10)",
          "created_at": "2022-11-10T10:29:36Z",
          "type": "comment"
        },
        {
          "author": "aberres",
          "body": "Yeps, running into this as well.\r\n\r\nAs we have `pyupgrade` in place enforcing PEP 604, I am in an awkward situation 🤔",
          "created_at": "2022-12-05T14:17:21Z",
          "type": "comment"
        },
        {
          "author": "AngellusMortis",
          "body": "> As we have pyupgrade in place \r\n\r\nMake them standalone types and pyupgrade will not change it. Or exclude the file from pyupgrade (your CLI interface is separated from the rest of your app, right?).\r\n\r\n```python\r\nPathOrNone = Path | None\r\n\r\ndef main(output: PathOrNone):\r\n    typer.guess_name(f\"Hello {name}\")\r\n```",
          "created_at": "2022-12-05T14:19:38Z",
          "type": "comment"
        },
        {
          "author": "Sighery",
          "body": "> > As we have pyupgrade in place\r\n> \r\n> Make them standalone types and pyupgrade will not change it. Or exclude the file from pyupgrade (your CLI interface is separated from the rest of your app, right?).\r\n> \r\n> ```python\r\n> PathOrNone = Path | None\r\n> \r\n> def main(output: PathOrNone):\r\n>     typer.guess_name(f\"Hello {name}\")\r\n> ```\r\n\r\nLast I tried, making them standalone types would still give errors in `typer`, as it just doesn't support the new union notation at all. If you pass it a standalone type, it'll just go through an extra hop to get the types that are in an union in the standalone type, and then fail again because it doesn't understand `|`",
          "created_at": "2022-12-05T14:24:04Z",
          "type": "comment"
        },
        {
          "author": "AngellusMortis",
          "body": "Sorry, bad example, I just woke up. 😂 \r\n\r\n```python\r\nPathOrNone = Optional[Path]\r\n\r\ndef main(output: PathOrNone):\r\n    typer.guess_name(f\"Hello {name}\")\r\n```\r\n\r\npyupgrade should not change `Optional[]` type aliases.",
          "created_at": "2022-12-05T14:25:56Z",
          "type": "comment"
        },
        {
          "author": "aberres",
          "body": "> ```python\r\n> PathOrNone = Optional[Path]\r\n> ```\r\n\r\nNice one, thanks!\r\n\r\n\r\n",
          "created_at": "2022-12-05T14:33:28Z",
          "type": "comment"
        },
        {
          "author": "johnthagen",
          "body": "Since the PR doesn't link to this issue, I'll link it here. This PR appears to be trying to fix this issue:\r\n\r\n- https://github.com/tiangolo/typer/pull/522",
          "created_at": "2023-01-03T13:26:23Z",
          "type": "comment"
        },
        {
          "author": "johnthagen",
          "body": "For visibility, the current open PR for this issue is\r\n\r\n- #676",
          "created_at": "2024-01-16T13:53:36Z",
          "type": "comment"
        },
        {
          "author": "svlandeg",
          "body": "Confirmed that either #676 or #548 will fix this issue!",
          "created_at": "2024-04-11T12:46:20Z",
          "type": "comment"
        },
        {
          "author": "Spenhouet",
          "body": "Pydantic also has this issue and supports the union type as of pydantic 2.5. Not sure if this requires typer to support pydantic >=2.5?",
          "created_at": "2024-05-22T15:17:56Z",
          "type": "comment"
        },
        {
          "author": "tiangolo",
          "body": "Thanks everyone for the feedback! :coffee: \r\n\r\nThis should have been fixed by https://github.com/fastapi/typer/pull/548\r\n\r\nIt is now available in Typer `0.12.4` :rocket: ",
          "created_at": "2024-08-17T03:46:57Z",
          "type": "comment"
        }
      ]
    },
    {
      "repository": "fastapi/typer",
      "issue_number": 334,
      "issue_title": "typer.Argument with autocompletion",
      "issue_url": "https://github.com/fastapi/typer/issues/334",
      "closed_at": "2024-08-16T22:20:30Z",
      "merged_prs": [
        {
          "pr_number": 737,
          "pr_title": "🐛 Fix `shell_complete` not working for Arguments",
          "pr_url": "https://github.com/fastapi/typer/pull/737",
          "merged_at": "2024-08-16T22:20:29Z",
          "base_commit": {
            "sha": "fda56d00be573d22dc761174895e26a0a1d12e78",
            "ref": "master"
          }
        }
      ],
      "discussion": [
        {
          "author": "mdantonio",
          "body": "### First Check\n\n- [X] I added a very descriptive title to this issue.\n- [X] I used the GitHub search to find a similar issue and didn't find it.\n- [X] I searched the Typer documentation, with the integrated search.\n- [X] I already searched in Google \"How to X in Typer\" and didn't find any information.\n- [X] I already read and followed all the tutorial in the docs and didn't find an answer.\n- [X] I already checked if it is not related to Typer but to [Click](https://github.com/pallets/click).\n\n### Commit to Help\n\n- [X] I commit to help with one of those options 👆\n\n### Example Code\n\n```python\nNot working:\r\n    myparam: str = typer.Argument(\r\n        \"\",\r\n        shell_complete=my_autocomplete,\r\n    )\r\n\r\nWorking:\r\n    myparam: str = typer.Option(\r\n        \"\",\r\n        shell_complete=my_autocomplete,\r\n    ),\n```\n\n\n### Description\n\nI'm trying to enable shell complete on an Argument but it does not work. On the opposite with Options everything is working as expected\r\n\r\nI think that the same problem was already in the previous versions of typer (so that it is NOT introduced by typer 0.4.0 & click 8... but i'm not totally sure about that)\r\n\r\nBased on tests on click, shell_complete on arguments should work: https://github.com/pallets/click/blob/48cb86d85fc1abfcf1478ee660e42aaa5382fd64/examples/completion/completion.py#L25\r\n\r\nin typer I can't find tests with arguments, I only found this with option https://github.com/tiangolo/typer/blob/a1520dcda685220a9a796288f5eaaebd00d68845/tests/assets/compat_click7_8.py#L20\r\n\r\n\n\n### Operating System\n\nLinux\n\n### Operating System Details\n\nUbuntu 20.04\n\n### Typer Version\n\n0.4.0\n\n### Python Version\n\nPython 3.9.5\n\n### Additional Context\n\nclick                  8.0.1                \r\n",
          "type": "issue"
        },
        {
          "author": "patricksurry",
          "body": "this (mostly) works for me using `typer.Argument('default', autocompletion=my_autocomplete)` tho am running into a weird bug with pwsh/win11 vs bash/osx",
          "created_at": "2022-02-21T13:55:21Z",
          "type": "comment"
        },
        {
          "author": "mdantonio",
          "body": "@patricksurry autocompletion works, but it is deprecated in click\r\n\r\n```\r\nDeprecationWarning: 'autocompletion' is renamed to 'shell_complete'. The old name is deprecated and will be removed in Click 8.1. See the docs about 'Parameter' for information about new behavior.\r\n```\r\n\r\n\r\nI'm still unable to make Arguments work with shell_complete.\r\n\r\nOn the opposite, shell_complete works very well with Options.\r\n\r\nThis is the situation, at least for me:\r\n\r\n|          | autocomplete | shell_completion |\r\n|----------|--------------|------------------|\r\n| Option   | :heavy_check_mark:             | :heavy_check_mark:                 |\r\n| Argument | :heavy_check_mark:            | :heavy_multiplication_x:                 |",
          "created_at": "2022-02-27T12:58:22Z",
          "type": "comment"
        },
        {
          "author": "patricksurry",
          "body": "which shell are you using with `--install-completion`?  my problem turned out to be a [bug with powershell completion](https://github.com/tiangolo/typer/pull/360) \r\n\r\ndoes that mean the typer docs are out of date?  they don't seem to mention shell_completion.   i wonder if the deprecation warning itself (via `logging.warn`) might actually mess things up since it could be generating spurious output in the completion execution path (e.g. when the _TYPER... env vars are set)?",
          "created_at": "2022-02-27T17:21:29Z",
          "type": "comment"
        },
        {
          "author": "mdantonio",
          "body": "I'm using bash (on Ubuntu 20.04). But I assume (maybe I'm wrong) that completion should work on the shell because it works with Options. In case of troubles at shell level I was expecting the completion to don't work at all\r\n\r\nYou are right about the docs, no mention of shell_complete.\r\nshell_complete has been added with typer 0.4.0 to support click 8 (with this PR https://github.com/tiangolo/typer/pull/317)\r\n\r\nThere is a test with typer.Option + shell_complete\r\nhttps://github.com/tiangolo/typer/blob/a1520dcda685220a9a796288f5eaaebd00d68845/tests/assets/compat_click7_8.py#L20\r\n\r\nBut nothing with typer.Argument + shell_complete\r\n\r\nThe lack of documentation may suggest that the support is still not completed. I think that only @tiangolo can clarify",
          "created_at": "2022-02-28T05:52:07Z",
          "type": "comment"
        },
        {
          "author": "torstello",
          "body": "I experience exactly the same behaviour / error:\r\nmy env:\r\n fish 3.3.1\r\n typer: 0.4.1\r\n click: 8.1.2\r\n \r\n ",
          "created_at": "2022-04-20T09:02:37Z",
          "type": "comment"
        },
        {
          "author": "CasperWA",
          "body": "This issue seems to be fixed, at least when using Ubuntu 22.04, env:\r\ntyper: 0.9.0\r\nclick: 8.1.7",
          "created_at": "2023-12-12T14:23:04Z",
          "type": "comment"
        },
        {
          "author": "bckohan",
          "body": "This is in fact a very simple bug. The shell_complete parameter is not passed to TyperArgument. [See here](https://github.com/tiangolo/typer/blob/master/typer/main.py#L918-L942).\r\n\r\nI will submit a PR.",
          "created_at": "2024-01-24T20:17:03Z",
          "type": "comment"
        },
        {
          "author": "bckohan",
          "body": "**If anyone has the ability to switch this issue label to a bug that would be appreciated!**\r\n\r\nIt might be a while before my PR is merged so, here's the most minimally invasive monkey patch I could come up with to fix this:\r\n\r\n```python\r\n\r\nfrom typer import __version__\r\n\r\nif (0, 4, 0) <= tuple(int(v) for v in __version__.split(\".\")) <= (0, 13, 0):\r\n    from typer import main as typer_main\r\n    from typer.models import ParamMeta\r\n\r\n    upstream_get_click_param = typer_main.get_click_param\r\n\r\n    def patched_get_click_param(\r\n        param: ParamMeta,\r\n    ) -> t.Tuple[t.Union[click.Argument, click.Option], t.Any]:\r\n        \"\"\"\r\n        Patch this bug: https://github.com/tiangolo/typer/issues/334\r\n        \"\"\"\r\n        click_param = upstream_get_click_param(param)\r\n        if isinstance(click_param[0], click.Argument) and getattr(\r\n            param.default, \"shell_complete\", None\r\n        ):\r\n            click_param[0]._custom_shell_complete = param.default.shell_complete\r\n        return click_param\r\n\r\n    typer_main.get_click_param = patched_get_click_param\r\n\r\n```",
          "created_at": "2024-01-31T19:04:51Z",
          "type": "comment"
        },
        {
          "author": "svlandeg",
          "body": "Hi @mdantonio, @patricksurry, @torstello and @bckohan! I would like to draw your attention to https://github.com/fastapi/typer/issues/949 and https://github.com/fastapi/typer/pull/974. \r\n\r\nIn summary, we've decided to stick to `autocompletion` as the name of the parameter, and to not support `shell_complete` going forward (it wasn't really functional or documented anyway).\r\n\r\nI just wanted to check with you whether that works for you, or whether there are use-cases you can't cover with the original [`autocompletion` functionality](https://typer.tiangolo.com/tutorial/options-autocompletion).",
          "created_at": "2024-09-05T12:48:35Z",
          "type": "comment"
        },
        {
          "author": "mdantonio",
          "body": "makes sense, thank you",
          "created_at": "2024-09-07T06:55:56Z",
          "type": "comment"
        }
      ]
    },
    {
      "repository": "fastapi/typer",
      "issue_number": 328,
      "issue_title": "Main app with no commands no longer shows callback docstring in v0.4.0",
      "issue_url": "https://github.com/fastapi/typer/issues/328",
      "closed_at": "2024-03-23T15:31:05Z",
      "merged_prs": [
        {
          "pr_number": 751,
          "pr_title": "📝 Add docs and test for `no_args_is_help` feature",
          "pr_url": "https://github.com/fastapi/typer/pull/751",
          "merged_at": "2024-03-23T15:30:46Z",
          "base_commit": {
            "sha": "74433d22b489d13fe1a0bb1f6729127cfa942996",
            "ref": "master"
          }
        }
      ],
      "discussion": [
        {
          "author": "jayqi",
          "body": "### First Check\r\n\r\n- [X] I added a very descriptive title to this issue.\r\n- [X] I used the GitHub search to find a similar issue and didn't find it.\r\n- [X] I searched the Typer documentation, with the integrated search.\r\n- [X] I already searched in Google \"How to X in Typer\" and didn't find any information.\r\n- [X] I already read and followed all the tutorial in the docs and didn't find an answer.\r\n- [X] I already checked if it is not related to Typer but to [Click](https://github.com/pallets/click).\r\n\r\n### Commit to Help\r\n\r\n- [X] I commit to help with one of those options 👆\r\n\r\n### Example Code\r\n\r\n```python\r\nimport typer\r\n\r\napp = typer.Typer()\r\n\r\n@app.callback()\r\ndef main():\r\n    \"\"\"Main program help text.\"\"\"\r\n    pass\r\n\r\n@app.command()\r\ndef foo():\r\n    \"\"\"foo command help text.\"\"\"\r\n    typer.echo(\"Executed foo.\")\r\n\r\nif __name__ == \"__main__\":\r\n    app()\r\n```\r\n\r\n\r\n### Description\r\n\r\nNot sure if this should be considered a bug or enhancement, since this was an undocumented change that could potentially be considered a regression.\r\n\r\n- In typer<=0.3.2, when the main application is executed without any commands, it would previously print the help text from the callback and exit with status code 0.\r\n- In typer 0.4.0, this same behavior prints only `Try 'app.py --help' for help.` and `Error: Missing command.` and exits with status code 2. \r\n\r\nI'm fine with the status code change—it does seem to me like an improvement that it has an error code. Thank you for this change. (Though it would be nice for this to be documented in the change log.)\r\n\r\nHowever, I think it would be useful to also directly print the help text without requiring users to make another invocation with `--help`, as was the previous behavior. The `git` program, for example, will exit with status 1 but also print the help text when used without any commands.\r\n\r\nThis appears to be only a typer change, and not a click change, as typer 0.4.0 behaves the same with way both click 8.0.1 and click 7.1.2.\r\n\r\n### typer 0.4.0; click 8.0.1\r\n\r\n```\r\n❯ python -c \"import typer; print('typer', typer.__version__); import click; print('click', click.__version__)\"\r\ntyper 0.4.0\r\nclick 8.0.1\r\n\r\n❯ python app.py\r\nUsage: app.py [OPTIONS] COMMAND [ARGS]...\r\nTry 'app.py --help' for help.\r\n\r\nError: Missing command.\r\n\r\n❯ echo $?\r\n2\r\n```\r\n\r\n### typer 0.4.0; click 7.1.2\r\n\r\n```\r\n❯ python -c \"import typer; print('typer', typer.__version__); import click; print('click', click.__version__)\"\r\ntyper 0.4.0\r\nclick 7.1.2\r\n\r\n ❯ python app.py\r\nUsage: app.py [OPTIONS] COMMAND [ARGS]...\r\nTry 'app.py --help' for help.\r\n\r\nError: Missing command.\r\n\r\n❯ echo $?\r\n2\r\n```\r\n\r\n### typer 0.3.2; click 7.1.2\r\n\r\n```\r\n❯ python -c \"import typer; print('typer', typer.__version__); import click; print('click', click.__version__)\"\r\ntyper 0.3.2\r\nclick 7.1.2\r\n\r\n❯ python app.py\r\nUsage: app.py [OPTIONS] COMMAND [ARGS]...\r\n\r\n  Main program help text.\r\n\r\nOptions:\r\n  --install-completion  Install completion for the current shell.\r\n  --show-completion     Show completion for the current shell, to copy it or\r\n                        customize the installation.\r\n\r\n  --help                Show this message and exit.\r\n\r\nCommands:\r\n  foo  foo command help text.\r\n\r\n❯ echo $?\r\n0\r\n```\r\n\r\n### Operating System\r\n\r\nmacOS\r\n\r\n### Operating System Details\r\n\r\n_No response_\r\n\r\n### Typer Version\r\n\r\n0.4.0\r\n\r\n### Python Version\r\n\r\n3.8.10\r\n\r\n### Additional Context\r\n\r\n_No response_",
          "type": "issue"
        },
        {
          "author": "toinbis",
          "body": "I am facing the same bug. It is very annoying. Have to stick to 0.3.2 due to this. Took 5 hours of lazy exploration to find out what's going on.\r\n\r\n@tiangolo - could you kindly comment if this is an expected change in functionality, or a bug og 0.4.0? If it's expected, is there any chance to get the old functionality back? :)\r\n\r\nThanks!",
          "created_at": "2021-12-26T22:33:40Z",
          "type": "comment"
        },
        {
          "author": "michaeloliverx",
          "body": "You can use the `no_args_is_help` for this behaviour: \r\n\r\n```python\r\ncli = typer.Typer(no_args_is_help=True)\r\n```",
          "created_at": "2022-01-04T11:04:42Z",
          "type": "comment"
        },
        {
          "author": "jayqi",
          "body": "Aha, the `no_args_is_help` argument does recover the old behavior. Thanks! However, it looks like then that the command's status code is 0 (the way it was before). Is there no way to get both the help printed and also have a non-zero status code? I think the status code change is an improvement that I would also like to keep. ",
          "created_at": "2022-01-04T15:34:18Z",
          "type": "comment"
        },
        {
          "author": "travisviome",
          "body": "Is there a way to set `no_args_is_help=True` globally? Currently, the only workarounds I can think of are:\r\n\r\n1. Set this parameter for every instance of Typer and command. This isn't ideal since it adds quite a lot of clutter.\r\n2. Create a wrapper for the Typer class. It would look something like this and be used everywhere instead:\r\n\r\n```\r\n# typer_wrapper.py\r\n\r\nimport typer\r\n\r\ndef Typer():\r\n    return typer.Typer(no_args_is_help=True)\r\n```\r\n\r\n3. CMD+click into typer.Typer and change the default value for `no_args_is_help` parameters in site-packages installed locally. Of course this only makes sense if you're using the scripts locally and not planning on packaging your CLI.\r\n\r\n```\r\nno_args_is_help: bool = True,\r\n```\r\n\r\nIt would be good if there is a way to set it one time globally. I like being able to see the help text and command list without having to type `--help` every time.\r\n\r\nBut there is an issue where zero argument commands don't get executed so maybe defaulting no_args_is_help to False is by design...",
          "created_at": "2022-02-06T04:45:15Z",
          "type": "comment"
        },
        {
          "author": "marabesi",
          "body": "I am facing the same issue described by @jayqi, I have the following app:\r\n\r\n```python\r\napp = typer.Typer()\r\n\r\n@app.command()\r\ndef main(\r\n    config_file: Optional[Path] = typer.Option(None),\r\n    metrics: Optional[MetricsOptions] = typer.Option(None, help=\"\"),\r\n    input_file: Optional[Path] = typer.Option(\r\n        None,\r\n        exists=True,\r\n        file_okay=True\r\n    ),\r\n    source: Optional[str] = typer.Option(None),\r\n    fetch: Optional[str] = typer.Option(None)\r\n):\r\n\r\nif __name__ == \"__main__\":\r\n    app()\r\n```\r\n\r\nIf I run the app without arguments (pipenv run python ./omnim/src/cli/app.py), I get the following:\r\n\r\n```\r\nTypeError: stat: path should be string, bytes, os.PathLike or integer, not NoneType\r\n```\r\n\r\nSuch behavior is kinda expected, as I have a argument that is a file and it must exists(based on the configuration of the app), therefore, if I update the type app to the following:\r\n\r\n```\r\napp = typer.Typer(no_args_is_help=True, invoke_without_command=True)\r\n```\r\n\r\nI would expect that to show up the help message, but this is not what is happening, I still get the error about the file.\r\n\r\nI tried different approaches but it seems none is working, any considerations why?\r\n\r\nThe code is available at https://github.com/shadowman/omni-metric",
          "created_at": "2022-02-06T11:05:45Z",
          "type": "comment"
        },
        {
          "author": "jayqi",
          "body": "@marabesi I suspect that your error may be a different problem. I think it's coming from `input_file` having a default of `None` but requiring `exists=True`. It seems like maybe typer is running `os.stat` to check for that path's existence but it's getting run on `None`. This probably should be a new, separate issue—it seems like this is an uncaught error, and either typer should convert `None` to `Path()` and still work, or it should give a typer error that says the value for `input_file` is not a valid path. ",
          "created_at": "2022-02-06T17:07:30Z",
          "type": "comment"
        },
        {
          "author": "marabesi",
          "body": "thanks for the heads up @jayqi ",
          "created_at": "2022-03-06T20:31:59Z",
          "type": "comment"
        },
        {
          "author": "FrancescElies",
          "body": "Could we change the default of `no_args_is_help` to `True`? actually is pretty handy to get the help when no args are passed.",
          "created_at": "2022-05-31T13:56:08Z",
          "type": "comment"
        },
        {
          "author": "Benoss",
          "body": "Maybe we should add `no_args_is_help` in the docs? Maybe on this page https://typer.tiangolo.com/tutorial/options/help/ had to search quite a wile to find this thread :)",
          "created_at": "2022-11-04T08:13:07Z",
          "type": "comment"
        },
        {
          "author": "atgctg",
          "body": "These should be the default args in my opinion:\r\n\r\n```py\r\ncontext_settings={\"help_option_names\": [\"-h\", \"--help\"]},\r\nno_args_is_help=True,\r\n```\r\n\r\n#201",
          "created_at": "2023-07-03T11:24:46Z",
          "type": "comment"
        },
        {
          "author": "huxuan",
          "body": "+1 for the regression behavior, and vote on the default True behavior for `no_args_is_help`.",
          "created_at": "2023-08-07T06:24:12Z",
          "type": "comment"
        }
      ]
    },
    {
      "repository": "fastapi/typer",
      "issue_number": 290,
      "issue_title": "[BUG] formatting issue with enum default values in help text",
      "issue_url": "https://github.com/fastapi/typer/issues/290",
      "closed_at": "2024-03-23T16:31:18Z",
      "merged_prs": [
        {
          "pr_number": 473,
          "pr_title": "🐛 Fix display of default value for Enum parameters inside of a list, include docs and tests",
          "pr_url": "https://github.com/fastapi/typer/pull/473",
          "merged_at": "2024-03-23T16:31:17Z",
          "base_commit": {
            "sha": "2169a2502b53deab69ccd8fc5dcb5a6ffcdb8f08",
            "ref": "master"
          }
        }
      ],
      "discussion": [
        {
          "author": "asieira",
          "body": "### Describe the bug\r\n\r\nUnder certain circumstances, enum Option defaults are displayed at `EnumClass.value` instead of just `value`. I was able to reproduce it when a list of enums is expected, but there might be more scenarios.\r\n\r\n### To Reproduce\r\n\r\nSteps to reproduce the behavior with a minimum self-contained file.\r\n\r\nReplace each part with your own scenario:\r\n\r\n* Create a file `main.py` with:\r\n\r\n```Python\r\nfrom enum import Enum\r\nfrom typing import List\r\n\r\nimport typer\r\n\r\napp = typer.Typer()\r\n\r\nclass NeuralNetwork(str, Enum):\r\n    SIMPLE = \"simple\"\r\n    CONV = \"conv\"\r\n    LSTM = \"lstm\"\r\n\r\n@app.command()\r\ndef main(\r\n        network: List[NeuralNetwork] = typer.Option([NeuralNetwork.SIMPLE], case_sensitive=False)\r\n):\r\n    typer.echo(f\"Training neural network of type: {network.value}\")\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    app()\r\n```\r\n\r\n* Call it with:\r\n\r\n```bash\r\npython main.py --help\r\n```\r\n\r\n* It outputs:\r\n\r\n```\r\nUsage: main.py [OPTIONS]\r\n\r\nOptions:\r\n  --network [simple|conv|lstm]    [default: NeuralNetwork.SIMPLE]\r\n  --install-completion [bash|zsh|fish|powershell|pwsh]\r\n                                  Install completion for the specified shell.\r\n  --show-completion [bash|zsh|fish|powershell|pwsh]\r\n                                  Show completion for the specified shell, to\r\n                                  copy it or customize the installation.\r\n\r\n  --help                          Show this message and exit.\r\n```\r\n\r\n* But I expected it to output:\r\n\r\n```\r\nUsage: main.py [OPTIONS]\r\n\r\nOptions:\r\n  --network [simple|conv|lstm]    [default: simple]\r\n  --install-completion [bash|zsh|fish|powershell|pwsh]\r\n                                  Install completion for the specified shell.\r\n  --show-completion [bash|zsh|fish|powershell|pwsh]\r\n                                  Show completion for the specified shell, to\r\n                                  copy it or customize the installation.\r\n\r\n  --help                          Show this message and exit.\r\n```\r\n\r\n### Expected behavior\r\n\r\nI expected the enum string value to be displayed, not including the class name which is just confusing for the CLI user.\r\n\r\n### Environment\r\n\r\n* OS: macOS 11.4 (Intel)\r\n* Typer Version [e.g. 0.3.0], get it with: 0.3.2\r\n* Python: 3.9.5\r\n",
          "type": "issue"
        },
        {
          "author": "asieira",
          "body": "Seems to be related to https://github.com/tiangolo/typer/blob/master/typer/core.py#L71",
          "created_at": "2021-06-11T18:26:44Z",
          "type": "comment"
        },
        {
          "author": "sathoune",
          "body": "I checked this out and you are right and wrong. \r\n\r\nThis is wrong:\r\nThe code references you are showing is related to Arguments and it is not executing with Option like in your example. In reality, the formatting happens here:\r\nhttps://github.com/pallets/click/blob/7.1.2/src/click/core.py#L1887\r\nor in 8.0 click:\r\nhttps://github.com/pallets/click/blob/main/src/click/core.py#L2733\r\n\r\nthe logic in both of these and the Typer code you pointed to is basically the same so it is a detail. You can confirm it when using debugger.\r\n\r\nThe right is:\r\nthe exact same thing will happen when using Argument.\r\n\r\nIt is something that I don't understand but looks like it is related to `format` method on string.\r\n\r\nYou can check out the behaviour of enum:\r\n```python\r\nfrom enum import Enum\r\n\r\n\r\nclass NeuralNetwork(str, Enum):\r\n    SIMPLE = \"simple\"\r\n    CONV = \"conv\"\r\n    LSTM = \"lstm\"\r\n\r\n\r\nprint(\"First set:\")\r\nprint(\"print: \", NeuralNetwork.SIMPLE)\r\nprint(\"single; this happens with single value: {}\".format(NeuralNetwork.SIMPLE))\r\nprint(\"casted: {}\".format(str(NeuralNetwork.SIMPLE)))\r\nprint(\"list: {}\".format([NeuralNetwork.SIMPLE]))\r\nprint(\"casted list; this is coded: {}\".format([str(NeuralNetwork.SIMPLE)]))\r\nprint(\"list of values: {}\".format([NeuralNetwork.SIMPLE.value]))\r\n```\r\nThe result is:\r\n```bash\r\nFirst set:\r\nprint:  NeuralNetwork.SIMPLE\r\nsingle; this happens with single value: simple\r\ncasted: NeuralNetwork.SIMPLE\r\nlist: [<NeuralNetwork.SIMPLE: 'simple'>]\r\ncasted list; this is coded: ['NeuralNetwork.SIMPLE']\r\nlist of values: ['simple']\r\n```\r\n\r\nYou can fix this from your side by overwriting `__str__` method on your enum, the default is:\r\n```python\r\ndef __str__(self):\r\n    return \"%s.%s\" % (self.__class__.__name__, self._name_)\r\n```\r\nSo you could do something like that:\r\n``` python\r\n\r\nfrom enum import Enum\r\n\r\nclass NeuralNetwork2(str, Enum):\r\n    SIMPLE = \"simple\"\r\n    CONV = \"conv\"\r\n    LSTM = \"lstm\"\r\n\r\n    def __str__(self):\r\n        return self.value\r\n\r\n\r\nprint(\"Second set:\")\r\nprint(\"print: \", NeuralNetwork2.SIMPLE)\r\nprint(\"single; this happens with single value: {}\".format(NeuralNetwork2.SIMPLE))\r\nprint(\"casted: {}\".format(str(NeuralNetwork2.SIMPLE)))\r\nprint(\"list: {}\".format([NeuralNetwork2.SIMPLE]))\r\nprint(\"casted list; this is coded: {}\".format([str(NeuralNetwork2.SIMPLE)]))\r\nprint(\"list of values: {}\".format([NeuralNetwork2.SIMPLE.value]))\r\n```\r\nHere result is:\r\n```bash\r\nSecond set:\r\nprint:  simple\r\nsingle; this happens with single value: simple\r\ncasted: simple\r\nlist: [<NeuralNetwork2.SIMPLE: 'simple'>]\r\ncasted list; this is coded: ['simple']\r\nlist of values: ['simple']\r\n```\r\nThe modified enum is fixing the help for me.\r\n\r\nIf you don't want to modify the magic method you can also pass the value instead of the Enum instance:\r\n```python\r\n\r\n@app.command()\r\ndef main(\r\n    network: NeuralNetwork = typer.Option(\r\n        [NeuralNetwork.SIMPLE.value,]\r\n    )\r\n):\r\n    typer.echo(f\"Training neural network of type: {network[0]}\")\r\n```\r\n\r\nI think this issue probably happens because it looks like Click does not support Enums: \r\nhttps://click.palletsprojects.com/en/8.0.x/parameters/#parameter-types\r\nand that probably is Typer thing to handle this case.",
          "created_at": "2021-06-13T21:54:25Z",
          "type": "comment"
        },
        {
          "author": "asieira",
          "body": "Seems like Typer should be mapping Enum instances to [click.Choice](https://click.palletsprojects.com/en/8.0.x/options/#choice-opts) based on the enum values, no?",
          "created_at": "2022-10-28T12:29:09Z",
          "type": "comment"
        },
        {
          "author": "jalaziz",
          "body": "Just ran into this. Here's a super simple reproduction without a list:\r\n\r\n```\r\n#!/usr/bin/env python3\r\n\r\nfrom enum import Enum\r\n\r\nimport typer\r\n\r\napp = typer.Typer()\r\n\r\n\r\nclass Choice(str, Enum):\r\n    foo = \"foo\"\r\n    bar = \"bar\"\r\n\r\n\r\n@app.command()\r\ndef select_choice(choice: Choice = Choice.foo):\r\n    print(choice)\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    app()\r\n```\r\n\r\nI'm using Python 3.10 (in case that makes a difference).",
          "created_at": "2023-05-03T06:54:46Z",
          "type": "comment"
        },
        {
          "author": "asieira",
          "body": "I submitted https://github.com/tiangolo/typer/pull/473 to help address this, not sure how to help further to get this issue fixed. 🤔 ",
          "created_at": "2023-05-03T19:43:03Z",
          "type": "comment"
        },
        {
          "author": "tiangolo",
          "body": "Thanks for the fix @asieira! :rocket: \r\n\r\nThis will be available in the next few hours in Typer 0.9.2 :rocket: ",
          "created_at": "2024-03-23T16:34:13Z",
          "type": "comment"
        }
      ]
    },
    {
      "repository": "fastapi/typer",
      "issue_number": 208,
      "issue_title": "[BUG] Applying help_option_names to the Typer instance is inconsistent",
      "issue_url": "https://github.com/fastapi/typer/issues/208",
      "closed_at": "2022-07-13T00:07:37Z",
      "merged_prs": [
        {
          "pr_number": 210,
          "pr_title": "🐛 Fix `context_settings` for a Typer app with a single command",
          "pr_url": "https://github.com/fastapi/typer/pull/210",
          "merged_at": "2022-07-02T16:36:55Z",
          "base_commit": {
            "sha": "e663db02cd98c4ac9337e2dfbf75e7a2ba490a48",
            "ref": "master"
          }
        }
      ],
      "discussion": [
        {
          "author": "richieadler",
          "body": "### Description of the bug\r\n\r\nThe results of applying `help_option_names` to the **Typer** instance are inconsistent, depending whether one has only one command or more than one.\r\n\r\n### To Reproduce\r\n\r\n* Create a file `main.py` with:\r\n\r\n```Python\r\nimport typer\r\n\r\nCONTEXT_SETTINGS = dict(help_option_names=['-h', '--help'])\r\n\r\napp = typer.Typer(context_settings=CONTEXT_SETTINGS, add_completion=False)\r\n\r\n@app.command()\r\ndef hello(nom: str):\r\n    print(f\"Hello {nom}\")\r\n\r\n@app.command()\r\ndef bye(nom: str):\r\n    print(f\"Bye {nom}\")\r\n\r\nif __name__ == '__main__':\r\n    app()\r\n\r\n```\r\n\r\n* Call it with:\r\n\r\n```bash\r\npython main.py -h\r\n```\r\n\r\n* It outputs:\r\n\r\n```\r\nUsage: test_typer.py [OPTIONS] COMMAND [ARGS]...\r\n\r\nOptions:\r\n  -h, --help  Show this message and exit.\r\n\r\nCommands:\r\n  bye\r\n  hello\r\n```\r\n\r\n* However, if the whole function `bye` is commented out, the same execution results in:\r\n\r\n```\r\nUsage: test_typer.py [OPTIONS] NOM\r\nTry 'test_typer.py --help' for help.\r\n\r\nError: no such option: -h\r\n```\r\n\r\n### Expected behavior\r\n\r\nThe message should be:\r\n\r\n```\r\nUsage: test_typer.py [OPTIONS] NOM\r\n\r\nArguments:\r\n  NOM  [required]\r\n\r\nOptions:\r\n  -h, --help  Show this message and exit.\r\n```\r\n\r\n### Environment\r\n\r\n* OS: Windows 10 [Version 10.0.19041.685]\r\n* Typer Version: 0.3.2\r\n* Python version: Python 3.9.1 (tags/v3.9.1:1e5d33e, Dec  7 2020, 17:08:21) [MSC v.1927 64 bit (AMD64)] on win32\r\n\r\n",
          "type": "issue"
        },
        {
          "author": "malthunayan",
          "body": "@richieadler just add your context settings to the command instead of the `Typer`  instance if you have a single command and it should work as expected. In your example that would be:\r\n```\r\nimport typer\r\n\r\nCONTEXT_SETTINGS = dict(help_option_names=[\"-h\", \"--help\"])\r\n\r\napp = typer.Typer(add_completion=False)\r\n\r\n\r\n@app.command(context_settings=CONTEXT_SETTINGS)\r\ndef hello(nom: str):\r\n    print(f\"Hello {nom}\")\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    app()\r\n```\r\n\r\nIf you have multiple commands or a command and a callback, then just move your `CONTEXT_SETTINGS` back again to where you instantiate the `Typer` object. I hope this helps you out.\r\n\r\nThe reason why it works this way is because internally when `typer` creates the command above it creates a `click` command. If it is multiple commands then it creates a `click` group. When `typer` is creating the `click` group it is passing the entire `app` object in, however if it is a single command, then it just passes the registered command (not the entire `typer` instance).  This means you have to pass in your desired settings to the command object instead of the `typer` instance. I hope I made sense, if not, I'd be happy to answer more of your questions.",
          "created_at": "2020-12-17T23:04:28Z",
          "type": "comment"
        },
        {
          "author": "daddycocoaman",
          "body": "@malthunayan explained it very well. IMO though, the fact that the context settings DO get passed when multiple commands exists should mean they should still get passed when there's only one command, especially since creating the app object with a single command is a completely valid design. It's possible to do with just a few extra lines of code in how the single command is handled. \r\n\r\nI've already tested a change and I'm gonna put in a PR later today but not sure if it'll be implemented anytime soon. :P But in the meantime, adding the context_settings to the command, not the typer app, is the way go.",
          "created_at": "2020-12-17T23:27:42Z",
          "type": "comment"
        },
        {
          "author": "tiangolo",
          "body": "Thanks for the detailed description and example! :bow: \r\n\r\nThis was fixed by @daddycocoaman here: https://github.com/tiangolo/typer/pull/210\r\n\r\nIt will be available in Typer version `0.4.2` released in some hours. :tada: ",
          "created_at": "2022-07-02T16:39:23Z",
          "type": "comment"
        },
        {
          "author": "github-actions",
          "body": "Assuming the original issue was solved, it will be automatically closed now. But feel free to add more comments or create new issues.",
          "created_at": "2022-07-13T00:07:36Z",
          "type": "comment"
        }
      ]
    },
    {
      "repository": "fastapi/typer",
      "issue_number": 184,
      "issue_title": "[FEATURE] Use Python 3.9's `Annotated[T, *metadata]` (PEP 593) to describe parameters",
      "issue_url": "https://github.com/fastapi/typer/issues/184",
      "closed_at": "2023-05-13T00:05:02Z",
      "merged_prs": [
        {
          "pr_number": 584,
          "pr_title": "✨ Add support for PEP-593 `Annotated` for specifying options and arguments",
          "pr_url": "https://github.com/fastapi/typer/pull/584",
          "merged_at": "2023-05-02T04:19:19Z",
          "base_commit": {
            "sha": "1260b8dd93e54c748183f899985013b3ae6765c0",
            "ref": "master"
          }
        }
      ],
      "discussion": [
        {
          "author": "gwennlbh",
          "body": "### Is your feature request related to a problem\r\n\r\nNot really, the current solution is already great.\r\n\r\n### The solution you would like\r\n\r\nAdd an alternative syntax to describe optional parameters, [PEP 593](https://www.python.org/dev/peps/pep-0593/)'s `Annotated[T, *metadata]`. Now, strictly speaking of syntax, it's not much better, but it's built into python, and thus might help integration with IDEs in the future.\r\n\r\nHelp for optional parameters could be provided as the second argument of `Annotated`:\r\n\r\n```python\r\ndef my_action(a: str, b: Annotated[bool, \"description\"], c: Annotated[str, \"output\"] = \"~/.config/\"):\r\n```\r\n\r\nis equivalent to\r\n\r\n```python\r\ndef my_action(a: str, b: bool = Argument(..., help=\"description\"), c: str = Option(\"~/.config/\", help=\"output\")):\r\n```\r\n\r\n\r\nAs a bonus, there's no need to do a weird `thing: type = Argument(..., help=\"description\")` when you want to specify help without giving a default value, just do `thing: Annotated[type, \"description\"]`\r\n\r\nAlso, it might be a little easier to implement since there's no messing with default values.\r\n\r\nAn `Annotated` parameter to the function will resolve to:\r\n\r\n- `Argument` if it has no default value\r\n- `Option` else\r\n\r\n### Describe alternatives you've considered\r\n\r\nMaking it always resolve to `Argument` or always to `Option`, or use something like `Annotated[type, \"description\", form=Argument` for arguments and `Annotated[type, \"description\", form=Option]` for options. I'm not sure about this.\r\n\r\n\r\n\r\ntbh this is debatable, but I figured I'd throw the idea out there, since this shiny new python 3.9 feature could be useful to Typer, as it seems that the use case described in the PEP is fitting:\r\n\r\n> This PEP adds an Annotated type to the typing module to decorate existing types with context-specific metadata. Specifically, a type T can be annotated with metadata x via the typehint Annotated[T, x]. This metadata can be used for either static analysis or at runtime. If a library (or tool) encounters a typehint Annotated[T, x] and has no special logic for metadata x, it should ignore it and simply treat the type as T.\r\n\r\n— [PEP 593, python.org](https://www.python.org/dev/peps/pep-0593/#motivation)\r\n",
          "type": "issue"
        },
        {
          "author": "baterflyrity",
          "body": "It would be very useful. Cant wait implementation.",
          "created_at": "2021-03-03T14:03:09Z",
          "type": "comment"
        },
        {
          "author": "mficek",
          "body": "+1 for implementation. Can I help in any way? Is there any option to plug-in typer with this functionality?",
          "created_at": "2022-03-16T10:49:08Z",
          "type": "comment"
        },
        {
          "author": "NowanIlfideme",
          "body": "Similar PR in FastAPI repo hasn't been merged yet, it's possible this is waiting for Pydantic-Core to be released more broadly (I know Sebastian and Samuel Colvin talk :yum:) to fix this at an even more fundamental level.",
          "created_at": "2022-10-04T06:51:23Z",
          "type": "comment"
        },
        {
          "author": "tiangolo",
          "body": "Hello there! This was implemented in https://github.com/tiangolo/typer/pull/584, here are the new docs: https://typer.tiangolo.com/tutorial/arguments/optional/#an-alternative-cli-argument-declaration, it's available in Typer 0.9.0, just released :rocket: ",
          "created_at": "2023-05-02T05:34:32Z",
          "type": "comment"
        },
        {
          "author": "github-actions",
          "body": "Assuming the original issue was solved, it will be automatically closed now. But feel free to add more comments or create new issues.",
          "created_at": "2023-05-13T00:05:02Z",
          "type": "comment"
        }
      ]
    },
    {
      "repository": "fastapi/typer",
      "issue_number": 172,
      "issue_title": "[DOC] Confirmation prompt part is located at two different places",
      "issue_url": "https://github.com/fastapi/typer/issues/172",
      "closed_at": "2022-05-23T00:07:11Z",
      "merged_prs": [
        {
          "pr_number": 220,
          "pr_title": "🎨 Fix format in docs explaining `datetime` parameter type",
          "pr_url": "https://github.com/fastapi/typer/pull/220",
          "merged_at": "2022-05-12T19:02:23Z",
          "base_commit": {
            "sha": "c3b1c86626fb7b1592b7c6442fd1d13772368afc",
            "ref": "master"
          }
        }
      ],
      "discussion": [
        {
          "author": "nalepae",
          "body": "Confirmation prompt part is located at two different places in the documentation.\r\n\r\n**First place:** https://typer.tiangolo.com/tutorial/options/prompt/\r\n![image](https://user-images.githubusercontent.com/4943830/94872080-f38b8f00-044b-11eb-869b-481e2030f8f9.png)\r\n\r\n**Second place:** https://typer.tiangolo.com/tutorial/options/password/\r\n![image](https://user-images.githubusercontent.com/4943830/94872117-0a31e600-044c-11eb-9edf-18137a0ecc21.png)\r\n",
          "type": "issue"
        },
        {
          "author": "nalepae",
          "body": "Also, I guess the little stars here :\r\nhttps://typer.tiangolo.com/tutorial/parameter-types/datetime/\r\n![image](https://user-images.githubusercontent.com/4943830/94909342-51979100-04a3-11eb-8d3e-58435e2548d0.png)\r\n\r\nare not what you intended to have :)",
          "created_at": "2020-10-02T09:38:49Z",
          "type": "comment"
        },
        {
          "author": "tiangolo",
          "body": "Thanks! About the parameter explained in both places, it's relevant in both cases, so I would rather leave it as is. About the datetime format, it was fixed here: https://github.com/tiangolo/typer/pull/220 thanks!",
          "created_at": "2022-05-12T19:01:31Z",
          "type": "comment"
        },
        {
          "author": "github-actions",
          "body": "Assuming the original issue was solved, it will be automatically closed now. But feel free to add more comments or create new issues.",
          "created_at": "2022-05-23T00:07:11Z",
          "type": "comment"
        }
      ]
    },
    {
      "repository": "fastapi/typer",
      "issue_number": 162,
      "issue_title": "[BUG] Completions that include colons get separated in zsh",
      "issue_url": "https://github.com/fastapi/typer/issues/162",
      "closed_at": "2024-11-17T21:19:01Z",
      "merged_prs": [
        {
          "pr_number": 988,
          "pr_title": "🐛 Allow colon in zsh autocomplete values and descriptions",
          "pr_url": "https://github.com/fastapi/typer/pull/988",
          "merged_at": "2024-11-07T17:09:14Z",
          "base_commit": {
            "sha": "c04c5554ec246e2a85ff9736c2434e03676c24c0",
            "ref": "master"
          }
        }
      ],
      "discussion": [
        {
          "author": "jaywonchung",
          "body": "### Describe the bug\r\n\r\nI have completions (via the `autocompletion` keyword argument in Arguments and Options) that include a colon (`:`) in the string. In zsh, these completions get split into completion candidates and help texts at the colon.\r\n\r\n### To Reproduce\r\n* Create a file `main.py` with:\r\n\r\n```Python\r\nimport typer\r\n\r\nimages = [\"alpine:latest\", \"nvidia/cuda:10.0-devel-ubuntu18.04\"]\r\n\r\ndef _complete(value: str) -> str:\r\n    for image in images:\r\n        if image.startswith(value):\r\n            yield value\r\n\r\napp = typer.Typer()\r\n\r\n@app.command(\"image\")\r\ndef hello(name: str = typer.Option(..., autocompletion=_complete)):\r\n    typer.echo(name)\r\n\r\nif __name__ == \"__main__\":\r\n    app()\r\n```\r\n\r\n* Trigger autocompletion with [TAB] on ZSH\r\n\r\n```bash\r\n$ <app_entrypoint> image --name [TAB]\r\n```\r\n\r\n* It outputs:\r\n\r\n```\r\n$ <app_entrypoint> image --name [TAB]\r\nalpine       -- latest\r\nnvidia/cuda  -- 10.0-devel-ubuntu18.04\r\n```\r\nWhen I cycle through the completion candidates, only `alpine` and `nvidia/cuda` gets filled in.\r\n\r\n* But I expected it to output:\r\n\r\n```\r\n$ <app_entrypoint> image --name [TAB]\r\nalpine:latest\r\nnvidia/cuda:10.0-devel-ubuntu18.04\r\n```\r\n\r\n### Environment\r\n\r\n* OS: Ubuntu 18.04\r\n* Typer Version: 0.3.2\r\n* Python version: 3.7.9\r\n* Zsh version: 5.4.2 (x86_64-ubuntu-linux-gnu)\r\n\r\n### Additional context\r\n\r\nI tried the exact same thing in Bash, and it worked as expected (the output in \"But I expected it to output\").\r\n",
          "type": "issue"
        },
        {
          "author": "alextremblay",
          "body": "I don't think this is a bug in typer, I think this is just the nature / default behaviour of the zsh completion system. zsh expects the results of your completetion function to take the form `completion_candidate:help_text` and formats that output accordingly.\r\nThere are ways of getting around that in zsh, like so: https://unix.stackexchange.com/questions/445889/use-colon-as-filename-separator-in-zsh-tab-completion\r\n\r\nbut I suspect this is beyond the scope of typer's zsh auto-completion support (I'm not a core contributor, i can't speak for them, this is just my two cents)",
          "created_at": "2020-12-04T15:53:59Z",
          "type": "comment"
        },
        {
          "author": "tddschn",
          "body": "@alextremblay I tried the snippet in the link but it didn't work. \r\nI want my autocompletion function to return something like \r\n\r\n`B6:AA:33:B5:C0:93 -- Lmi 10.0.201.222 0`\r\n\r\nbut got `B6 -- AA:33:B5:C0:93 -- Lmi 10.0.201.222 0` instead.\r\n\r\nI have no idea how zsh completion works, can you help me configure zsh so that the completions work? Thank you!\r\n",
          "created_at": "2022-05-15T13:08:01Z",
          "type": "comment"
        },
        {
          "author": "alextremblay",
          "body": "@tddschn sadly, no. i think this is something that would need to change in typer's auto-generated zsh autocomplete script.\r\n\r\nyou could try editing the generated script yourself, but then if you change your CLI's code and need to regenerate autocompletions, your changes will be wiped out\r\n",
          "created_at": "2022-05-17T14:30:38Z",
          "type": "comment"
        },
        {
          "author": "tiangolo",
          "body": "Thanks @jaywonchung! This was handled by @snapbug in https://github.com/fastapi/typer/pull/988, the fix will be available in version 0.12.6 in the next hours. :nerd_face: :rocket: ",
          "created_at": "2024-11-07T17:11:21Z",
          "type": "comment"
        },
        {
          "author": "github-actions",
          "body": "Assuming the original need was handled, this will be automatically closed now. But feel free to add more comments or create new issues or PRs.",
          "created_at": "2024-11-17T21:19:00Z",
          "type": "comment"
        }
      ]
    },
    {
      "repository": "fastapi/typer",
      "issue_number": 158,
      "issue_title": "[BUG] Type hint for show_default of typer.Option is incorrect",
      "issue_url": "https://github.com/fastapi/typer/issues/158",
      "closed_at": "2024-03-23T16:01:47Z",
      "merged_prs": [
        {
          "pr_number": 501,
          "pr_title": "🐛 Update type annotations for `show_default` parameter and update docs for setting a \"Custom default string\"",
          "pr_url": "https://github.com/fastapi/typer/pull/501",
          "merged_at": "2024-03-23T16:01:46Z",
          "base_commit": {
            "sha": "74433d22b489d13fe1a0bb1f6729127cfa942996",
            "ref": "master"
          }
        }
      ],
      "discussion": [
        {
          "author": "gadostal-swordfish",
          "body": "### Describe the bug\r\n\r\nFor typer.Argument, the type hint for show_default is this: show_default: Union[bool, str] = True,\r\nfor typer.Option, the type hint is this: show_default: bool = True,\r\n\r\nFor an argument, I can override the text that accompanies the default value to be something like \"working directory\". This \r\npermits me to do document generation including usage blocks that don't have paths from the build system in them.\r\n\r\nFor an option, I can do the same but I need to suppress type check. The functionality works regardless of the type hints. \r\n\r\n### To Reproduce\r\n\r\nRun mypy against this code:\r\n\r\n```\r\ndef docker_build(context_path: Path = typer.Argument(Path.cwd(), exists=True,\r\n                                                     show_default=working_directory_label,\r\n                                                     resolve_path=True),\r\n                           dockerfile: Path = typer.Option(Path.cwd() / \"Dockerfile\", \"--file\", \"-f\", exists=True, dir_okay=False,\r\n                                                                              show_default=\"Dockerfile in working directory\", resolve_path =True)):\r\n    pass\r\n```\r\n\r\n### Environment\r\n\r\n* OS: Centos7\r\n* Typer Version 0.3.1\r\n* Python version: 3.6.8\r\n",
          "type": "issue"
        },
        {
          "author": "Dymstro",
          "body": "I'm also running into this issue.\r\n\r\n[355](https://github.com/tiangolo/typer/pull/355) fixes this",
          "created_at": "2022-03-08T13:10:31Z",
          "type": "comment"
        },
        {
          "author": "plannigan",
          "body": "Since it seems like the other PR might be slowed down by introducing other functionality, I created a PR solely to address this issue.",
          "created_at": "2022-11-15T03:13:42Z",
          "type": "comment"
        }
      ]
    },
    {
      "repository": "fastapi/typer",
      "issue_number": 142,
      "issue_title": "[FEATURE] Add __all__ definition to __init__",
      "issue_url": "https://github.com/fastapi/typer/issues/142",
      "closed_at": "2020-08-16T21:32:28Z",
      "merged_prs": [
        {
          "pr_number": 147,
          "pr_title": "✨ Add support for mypy --strict",
          "pr_url": "https://github.com/fastapi/typer/pull/147",
          "merged_at": "2020-08-16T14:39:15Z",
          "base_commit": {
            "sha": "c4e3e460db89073a9b06c1ec90733ad732956e8e",
            "ref": "master"
          }
        }
      ],
      "discussion": [
        {
          "author": "martsa1",
          "body": "### Is your feature request related to a problem\r\n\r\nYes\r\n\r\nWhen running a fairly strict mypy configuration, mypy complains that the typer module is missing all its attributes.\r\n\r\n### The solution you would like\r\n\r\nWe can resolve this by adding a `__all__` definition to the top level init.\r\n\r\n### Describe alternatives you've considered\r\n\r\nUsing a less strict mypy configuration doesn't yield these errors, but that then allows typing compromises to slip into my code elsewhere.\r\n\r\n### Additional context\r\n\r\nSample mypy config:\r\n```ini\r\n[mypy]\r\nallow_redefinition = False\r\ncheck_untyped_defs = True\r\ndisallow_any_generics = True\r\ndisallow_any_unimported = True\r\ndisallow_incomplete_defs = True\r\ndisallow_subclassing_any = True\r\ndisallow_untyped_calls = True\r\ndisallow_untyped_decorators = True\r\ndisallow_untyped_defs = True\r\nignore_errors = False\r\nignore_missing_imports = True\r\nimplicit_reexport = False\r\nlocal_partial_types = True\r\nmypy_path = type_stubs\r\nno_implicit_optional = True\r\nstrict_equality = True\r\nstrict_optional = True\r\nwarn_no_return = True\r\nwarn_redundant_casts = True\r\nwarn_return_any = True\r\nwarn_unreachable = True\r\nwarn_unused_configs = True\r\nwarn_unused_ignores = True\r\n```\r\n\r\nSample script:\r\n```python\r\nimport typer\r\n\r\n\r\ndef main() -> None:\r\n    typer.secho(\"hello, world!\", fg=typer.colors.GREEN)\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    main()\r\n```\r\n\r\nMypy Errors:\r\n```console\r\n$ mypy sample.py\r\nsample.py:5: error: Module has no attribute \"secho\"; maybe \"echo\"?\r\nFound 1 error in 1 file (checked 1 source file)\r\n```\r\n\r\nAdding the following to `typer/__init__.py`:\r\n```python\r\n__all__ = [\r\n    \"Abort\",\r\n    \"Argument\",\r\n    \"BadParameter\",\r\n    \"CallbackParam\",\r\n    \"Context\",\r\n    \"Exit\",\r\n    \"FileBinaryRead\",\r\n    \"FileBinaryWrite\",\r\n    \"FileText\",\r\n    \"FileTextWrite\",\r\n    \"Option\",\r\n    \"Typer\",\r\n    \"clear\",\r\n    \"colors\",\r\n    \"confirm\",\r\n    \"echo\",\r\n    \"echo_via_pager\",\r\n    \"edit\",\r\n    \"format_filename\",\r\n    \"get_app_dir\",\r\n    \"get_binary_stream\",\r\n    \"get_terminal_size\",\r\n    \"get_text_stream\",\r\n    \"getchar\",\r\n    \"launch\",\r\n    \"open_file\",\r\n    \"pause\",\r\n    \"progressbar\",\r\n    \"prompt\",\r\n    \"run\",\r\n    \"secho\",\r\n    \"style\",\r\n    \"unstyle\",\r\n]\r\n```\r\n\r\nResolves the above error & any others like it.\r\n\r\nTyper version: 0.2.1, mypy version: 0.782, python: 3.6.10\r\n",
          "type": "issue"
        },
        {
          "author": "victorphoenix3",
          "body": "I could work on this!",
          "created_at": "2020-07-20T11:55:11Z",
          "type": "comment"
        },
        {
          "author": "martsa1",
          "body": "If no-one gets to it I'll eventually raise a PR.  I was thinking it would be worth a test to verify that the `__all__` is up to date with the imports as part of such a PR.  It wouldn't take very long (assuming the above list is correct), and would help ensure that any future import additions/removals are kept up to date.\r\n\r\nI might have time the weekend after this, but if you're likely to get to it first, by all means go for it. :smile: ",
          "created_at": "2020-07-22T12:55:14Z",
          "type": "comment"
        },
        {
          "author": "victorphoenix3",
          "body": "- The issue arises because of the `--no-implicit-reexport` flag that is enabled during a `--strict` mypy run. It does not allow re-exporting imported modules unless  the item is imported using `import-x-as-x` or is included in  `__all__` . \r\nIn my PR I have used `import x as x` rather than `__all__` which requires extra maintenance.\r\n- Another option is to add `implicit_reexport = True` to the `mypy.ini` file  and the import/export errors don't arise even with the strict configuration.",
          "created_at": "2020-07-29T06:30:39Z",
          "type": "comment"
        },
        {
          "author": "victorphoenix3",
          "body": "@tiangolo ",
          "created_at": "2020-07-29T06:35:33Z",
          "type": "comment"
        },
        {
          "author": "pmav99",
          "body": "this is a probably a duplicate of #112",
          "created_at": "2020-08-03T12:00:35Z",
          "type": "comment"
        },
        {
          "author": "tiangolo",
          "body": "Thanks for the discussion here everyone! @victorphoenix3 added support for `mypy --strict`  on https://github.com/tiangolo/typer/pull/147.\r\n\r\nAvailable in Typer version `0.3.2` :rocket: :tada: ",
          "created_at": "2020-08-16T14:55:53Z",
          "type": "comment"
        },
        {
          "author": "martsa1",
          "body": "@victorphoenix3 Thanks for getting to this!  Your implementation is much nicer than anything I would have put together!\r\n\r\n@tiangolo Thanks for merging, and thanks for the awesome Typer. :+1: ",
          "created_at": "2020-08-16T21:32:28Z",
          "type": "comment"
        }
      ]
    },
    {
      "repository": "fastapi/typer",
      "issue_number": 127,
      "issue_title": "[BUG] Multiple value option gives tuple and not list",
      "issue_url": "https://github.com/fastapi/typer/issues/127",
      "closed_at": "2022-07-02T17:26:03Z",
      "merged_prs": [
        {
          "pr_number": 143,
          "pr_title": "🐛 Fix type conversion for `List` and `Tuple` and their internal types",
          "pr_url": "https://github.com/fastapi/typer/pull/143",
          "merged_at": "2022-07-02T17:26:03Z",
          "base_commit": {
            "sha": "b0fc0f00ebbcd7ae719d7153cfa93b430d714659",
            "ref": "master"
          }
        }
      ],
      "discussion": [
        {
          "author": "jayqi",
          "body": "### Describe the bug\r\n\r\nThe standard way to configure an option that expects multiple values is to declare with `List`, as [described in the docs](https://typer.tiangolo.com/tutorial/multiple-values/multiple-options/).\r\n\r\nHowever, this provides a tuple of values, and not a list of values, as one would expect based on the type hint declaration. It also contradicts the [documentation](https://typer.tiangolo.com/tutorial/multiple-values/multiple-options/), which states \"You will receive the values as you declared them, as a list of str\".\r\n\r\n### To Reproduce\r\n\r\nSteps to reproduce the behavior with a minimum self-contained file.\r\n\r\n* Create a file `main.py` with:\r\n\r\n```Python\r\nfrom typing import List\r\nimport typer\r\n\r\n\r\ndef my_command(opt: List[str] = [\"foo\", \"bar\"]):\r\n    typer.echo(opt)\r\n    typer.echo(type(opt))\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    typer.run(my_command)\r\n```\r\n\r\n* Call it with:\r\n\r\n```bash\r\npython main.py\r\n```\r\n\r\n  * It outputs:\r\n\r\n```\r\n('foo', 'bar')\r\n<class 'tuple'>\r\n```\r\n\r\n* Call it with:\r\n\r\n```bash\r\npython main.py --opt baz\r\n```\r\n\r\n  * It outputs:\r\n\r\n```\r\n('baz',)\r\n<class 'tuple'>\r\n```\r\n\r\n### Expected behavior\r\n\r\nI would expect to get a container of values that is class `list` as declared. \r\n\r\n### Environment\r\n\r\n* OS: macOS 10.15.4\r\n* Python 3.6.10\r\n* Typer 0.3.0\r\n",
          "type": "issue"
        },
        {
          "author": "ovezovs",
          "body": "I was able to reproduce this issue. Would this be considered a bug or a documentation issue, @tiangolo? I'd like to work on this.",
          "created_at": "2020-06-26T20:19:37Z",
          "type": "comment"
        },
        {
          "author": "ovezovs",
          "body": "UPDATE: I have discussed this with my MLH mentor and we concluded that it was a bug, however, I am not sure if the bug is in the typing library or Typer itself.",
          "created_at": "2020-07-02T18:36:59Z",
          "type": "comment"
        },
        {
          "author": "tiangolo",
          "body": "Hey @ovezovs ! Thanks!\r\n\r\nYes, I think it would probably make sense to ensure that the value passed is a `list` in this case, converting it to a list if it is not.",
          "created_at": "2020-07-04T12:58:23Z",
          "type": "comment"
        },
        {
          "author": "hellowhistler",
          "body": "> UPDATE: I have discussed this with my MLH mentor and we concluded that it was a bug, however, I am not sure if the bug is in the typing library or Typer itself.\r\n\r\nHi @ovezovs, are you still planning on looking into this (or already working on it)? I encountered this bug in the wild, and if you've changed your mind, I'd be interested in trying to fix it.",
          "created_at": "2020-07-15T02:02:49Z",
          "type": "comment"
        },
        {
          "author": "ovezovs",
          "body": "> Hi @ovezovs, are you still planning on looking into this (or already working on it)? I encountered this bug in the wild, and if you've changed your mind, I'd be interested in trying to fix it.\r\n\r\nFeel free to take on it.",
          "created_at": "2020-07-16T00:06:44Z",
          "type": "comment"
        },
        {
          "author": "Andrew-Sheridan",
          "body": "As an extra layer to this, if an option is declared as `foo: Optional[List[str]] = typer.Option(None)` it should provide `None` if nothing is passed. Currently it is providing `()`, an empty tuple.\r\n\r\nIn comparison `bar: Optional[str] = typer.Option(None)` _does_ provide `None` when missing, as expected.\r\n\r\nWould this be considered the same issue, or should I raise a new one?",
          "created_at": "2020-11-04T12:45:10Z",
          "type": "comment"
        },
        {
          "author": "tiangolo",
          "body": "Thanks for the clear example @jayqi! :nerd_face: :cake: \r\n\r\nAnd thanks for the discussion everyone. :coffee: \r\n\r\n@Andrew-Sheridan, could you please create a new issue with that example?\r\n\r\nThis was fixed by @hellowhistler in https://github.com/tiangolo/typer/pull/143\r\n\r\nIt will be available in the next release, in some hours, Typer version `0.4.2` :tada: ",
          "created_at": "2022-07-02T17:25:44Z",
          "type": "comment"
        },
        {
          "author": "Andrew-Sheridan",
          "body": "> @Andrew-Sheridan, could you please create a new issue with that example?\r\n\r\nCreated #410 with the example",
          "created_at": "2022-07-03T15:35:53Z",
          "type": "comment"
        }
      ]
    },
    {
      "repository": "fastapi/typer",
      "issue_number": 125,
      "issue_title": "Use Optional in docs",
      "issue_url": "https://github.com/fastapi/typer/issues/125",
      "closed_at": "2020-08-16T12:05:30Z",
      "merged_prs": [
        {
          "pr_number": 131,
          "pr_title": "Support for Optional added to docs for CLI Argument and Options",
          "pr_url": "https://github.com/fastapi/typer/pull/131",
          "merged_at": "2020-08-16T12:01:20Z",
          "base_commit": {
            "sha": "c2235d1bbf2c9c51862f2ac63dffaa05fa2ca310",
            "ref": "master"
          }
        }
      ],
      "discussion": [
        {
          "author": "tiangolo",
          "body": "As part of https://github.com/tiangolo/typer/issues/124, I updated the initial docs that introduce `Optional` for values that default to `None`.\r\n\r\nWe should have all the docs that have *CLI arguments* or *CLI options* with a default value of `None` to be declared using `Optional[some_type]`, that way the editor will be able to help to detect unsafe operations that assume that the value is not `None`.\r\n\r\nThe quick intro to `Optional` is now here: https://typer.tiangolo.com/tutorial/#python-types",
          "type": "issue"
        },
        {
          "author": "rkbeatss",
          "body": "will be working on it 🥰 ",
          "created_at": "2020-06-25T17:08:48Z",
          "type": "comment"
        },
        {
          "author": "tiangolo",
          "body": "Thanks @rkbeatss ! :rocket: :cake: ",
          "created_at": "2020-08-16T12:05:30Z",
          "type": "comment"
        }
      ]
    },
    {
      "repository": "fastapi/typer",
      "issue_number": 124,
      "issue_title": "Update docs with new Arguments help section",
      "issue_url": "https://github.com/fastapi/typer/issues/124",
      "closed_at": "2020-08-16T12:19:41Z",
      "merged_prs": [
        {
          "pr_number": 135,
          "pr_title": "Update docs with the new --help argument",
          "pr_url": "https://github.com/fastapi/typer/pull/135",
          "merged_at": "2020-08-16T12:19:41Z",
          "base_commit": {
            "sha": "c4e3e460db89073a9b06c1ec90733ad732956e8e",
            "ref": "master"
          }
        }
      ],
      "discussion": [
        {
          "author": "tiangolo",
          "body": "The new support for `help` parameters in *CLI arguments* from https://github.com/tiangolo/typer/pull/123 changes how the help text is generated with *CLI arguments*.\r\n\r\nIt also now shows default values by default.\r\n\r\nSo, many of the demos showing how it would look like in the terminal have to be updated to show the new real output.\r\n\r\n* Any example that has *CLI arguments* and uses `--help` will change.\r\n* And any example that has a default value for *CLI arguments* or *CLI options* and uses `--help`, will change too.\r\n\r\nThe task here is to read all the docs, page by page, and copy the code in the example, run the same commands as in the demonstration and update the output (copy it from the terminal) to the docs when it changes.\r\n\r\nIn most/all of the cases, it should require just to copy the example code, run it with the example commands, and copy the output back in the docs.\r\n\r\nBut it requires a lot of attention to the details to make sure not to skip/forget any example that also changes, to preserve the demonstration comments and guides, and to recognize when there are changes.\r\n\r\nAnd the changes are probably a lot, spread through all the docs :sweat_smile: ",
          "type": "issue"
        },
        {
          "author": "victorphoenix3",
          "body": "I could work on this! :)",
          "created_at": "2020-06-25T15:09:42Z",
          "type": "comment"
        }
      ]
    },
    {
      "repository": "fastapi/typer",
      "issue_number": 118,
      "issue_title": "[QUESTION] Is there a better way to pass prog_name without going through the Click command?",
      "issue_url": "https://github.com/fastapi/typer/issues/118",
      "closed_at": "2020-06-23T11:29:46Z",
      "merged_prs": [
        {
          "pr_number": 120,
          "pr_title": "Support passing `prog_name`",
          "pr_url": "https://github.com/fastapi/typer/pull/120",
          "merged_at": "2020-06-23T11:29:45Z",
          "base_commit": {
            "sha": "f6304f16fd5463f7754460b71236f3e1f05d4bcb",
            "ref": "master"
          }
        }
      ],
      "discussion": [
        {
          "author": "tarcisioe",
          "body": "### First check\r\n\r\n* [x] I used the GitHub search to find a similar issue and didn't find it.\r\n* [x] I searched the Typer documentation, with the integrated search.\r\n* [x] I already searched in Google \"How to X in Typer\" and didn't find any information.\r\n* [x] I already searched in Google \"How to X in Click\" and didn't find any information (doesn't really apply).\r\n\r\n### Description\r\n\r\nIs it possible to inform typer of the program name without using `typer.main.get_command`?\r\n\r\nConsider the following structure:\r\n\r\n```\r\ntyper_test\r\n├── __init__.py\r\n└── __main__.py\r\n```\r\n\r\nAnd `__main__.py` having\r\n\r\n```python\r\nimport typer\r\n\r\napp = typer.Typer()\r\n\r\n\r\n@app.command()\r\ndef main(i: int):\r\n    pass\r\n\r\n\r\nif __name__ == '__main__':\r\n    typer.main.get_command(app)(prog_name=__package__)\r\n```\r\n\r\nUnless I call the command like this (in contrast to `app()`), the usage shows `__main__.py`.\r\n\r\nCompare `app()`:\r\n\r\n```\r\n$ python -m typer_test                                                                                                                                                                            \r\nUsage: __main__.py [OPTIONS] I\r\nTry '__main__.py --help' for help.\r\n\r\nError: Missing argument 'I'.\r\n```\r\n\r\nto `typer.main.get_command(app)(prog_name=__package__)`:\r\n\r\n```\r\n$ python -m typer_test                                                                                                                                                                               \r\nUsage: typer_test [OPTIONS] I\r\nTry 'typer_test --help' for help.\r\n\r\nError: Missing argument 'I'.\r\n```\r\n\r\nI couldn't find any parameter on `Typer` to override this, neither on documentation nor by reading the source code. It seems like a pretty desirable feature to be more straightforward than having to call the Click command directly, though, so I may be missing something here. Is there any other way to do this?",
          "type": "issue"
        },
        {
          "author": "tiangolo",
          "body": "It is currently not supported, and it should be supported :sweat_smile: .\r\n\r\n---\r\n\r\nIt's actually not difficult to implement, so I'll mark it as `good first issue`.\r\n\r\nHere are some instructions for anyone that wants to help with this :smile: \r\n\r\nThe method at `Typer.__call__(self)` should now take `Typer.__call__(self, *args, **kwargs)`\r\nAnd then it should call the generated Click command as:\r\n\r\n```Python\r\nreturn get_command(self)(*args, **kwargs)\r\n```\r\n\r\nTo test it, I think the best/simplest way would be to have a simple application in a file, with something like `app(prog_name=\"custom-name\")` and then call it with a sub-process (as is done in many tests) calling coverage to run it, and checking that the help text uses the `custom-name`.",
          "created_at": "2020-06-21T12:37:35Z",
          "type": "comment"
        }
      ]
    },
    {
      "repository": "fastapi/typer",
      "issue_number": 84,
      "issue_title": "[BUG] Typer.style fails in Windows Powershell with colorama installed",
      "issue_url": "https://github.com/fastapi/typer/issues/84",
      "closed_at": "2020-04-18T11:13:13Z",
      "merged_prs": [
        {
          "pr_number": 89,
          "pr_title": "Add emphasis note about using typer.echo instead of print",
          "pr_url": "https://github.com/fastapi/typer/pull/89",
          "merged_at": "2020-04-18T10:46:55Z",
          "base_commit": {
            "sha": "d7d05e69fcd0401a19161ccbcf5444280285ad5c",
            "ref": "master"
          }
        }
      ],
      "discussion": [
        {
          "author": "Fronkan",
          "body": "### Describe the bug\r\nI tried to print red text in powershell on Windows. However, it just  printed with escape symbols instead. This is with colorama installed and if i manually initialize colorama the colors works as it should.\r\n\r\n### To Reproduce\r\n\r\nReporduce non-working version:\r\n```Python\r\nimport typer\r\ndef main():\r\n    print(typer.style(\"RED\", fg=typer.colors.RED))\r\nif __name__ == \"__main__\":\r\n    typer.run(main)\r\n```\r\nOutputs:\r\n```\r\n\u001b[31mRED\u001b[0m\r\n```\r\n\r\nWith manual colorma init:\r\n```Python\r\nimport typer\r\nimport colorama\r\ncolorama.init()\r\ndef main():\r\n    print(typer.style(\"RED\", fg=typer.colors.RED))\r\nif __name__ == \"__main__\":\r\n    typer.run(main)\r\n```\r\nOuputs, in red text:\r\n```\r\nRED\r\n```\r\n\r\n### Expected behavior\r\nAs it in the documentation, https://typer.tiangolo.com/tutorial/printing/#color,  is stated that you don't have to manually initialize colorama I expected the first to work.\r\n\r\n### Environment\r\n\r\n* OS: Windows\r\n* Typer Version: 0.1.1\r\n* Python version: 3.7.2\r\n",
          "type": "issue"
        },
        {
          "author": "tiangolo",
          "body": "So, for all the Colorama Windows magic to work you have to use `typer.echo()` instead of `print()`, like:\r\n\r\n```Python\r\nimport typer\r\ndef main():\r\n    typer.echo(typer.style(\"RED\", fg=typer.colors.RED))\r\nif __name__ == \"__main__\":\r\n    typer.run(main)\r\n```\r\n\r\n<!-- issue-manager: answered -->",
          "created_at": "2020-04-18T08:57:08Z",
          "type": "comment"
        },
        {
          "author": "Fronkan",
          "body": "Thank you! I must haves missed this.",
          "created_at": "2020-04-18T11:13:13Z",
          "type": "comment"
        }
      ]
    },
    {
      "repository": "fastapi/typer",
      "issue_number": 77,
      "issue_title": "Add support for custom parameter types",
      "issue_url": "https://github.com/fastapi/typer/issues/77",
      "closed_at": "2023-05-01T11:47:35Z",
      "merged_prs": [
        {
          "pr_number": 583,
          "pr_title": "✨ Add support for custom types and parsers (updates/builds upon PR #443)",
          "pr_url": "https://github.com/fastapi/typer/pull/583",
          "merged_at": "2023-05-01T10:03:27Z",
          "base_commit": {
            "sha": "8dd7642d6ed098203a61c77ecfa495880573c6e4",
            "ref": "master"
          }
        }
      ],
      "discussion": [
        {
          "author": "ananis25",
          "body": "I want to extend the CLI app with custom data types not supported by Typer/Click. Right now, the Typer app raises an error on encountering an unsupported type. \r\n\r\n### The solution you would like\r\n\r\nWe could add a method to the Typer object to register custom data types along with a function to convert terminal input string to an object of the desired type. \r\n\r\nA possible API could be:\r\n\r\n```py\r\napp = typer.Typer()\r\napp.register_custom_type(_type, _deserializer)\r\n```\r\n\r\nHere is the monkey-patched solution I use right now without providing a `registration` API. If this seems like a useful feature, I'll try refine this and submit a PR. \r\n\r\n```py3\r\nimport datetime\r\nfrom typing import Any, Callable, Optional\r\n\r\nimport typer\r\nimport click\r\n\r\n\r\n_get_click_type = typer.main.get_click_type\r\nREGISTERED_TYPES = {\r\n    datetime.date: lambda string: datetime.datetime.strptime(string, '%Y-%m-%d').date()\r\n}\r\n\r\nclass TyperCustomParam(click.ParamType):\r\n    name = 'CustomParameter'\r\n    def __init__(self, typ: type, deserializer: Optional[Callable] = None): \r\n        self.name = typ.__name__\r\n        self._deserializer = typ if deserializer is None else deserializer\r\n\r\n    def convert(self, value, param, ctx): \r\n        try:\r\n            return self._deserializer(value)\r\n        except Exception as E: \r\n            self.fail(\r\n                f\"couldn't serialize {value} to an instance of type {self.name}, error: {E}\"\r\n            )\r\n\r\ndef supersede_get_click_type(\r\n    *, annotation: Any, parameter_info: typer.main.ParameterInfo\r\n) -> click.ParamType:\r\n    if annotation in REGISTERED_TYPES:\r\n        return TyperCustomParam(annotation, REGISTERED_TYPES[annotation])\r\n    else:\r\n        return _get_click_type(annotation=annotation, parameter_info=parameter_info)\r\n\r\ntyper.main.get_click_type = supersede_get_click_type\r\n```\r\n\r\n### Alternatives\r\nAlternatives would be to either modify the original routine or create a wrapper function to accept a Click supported datatype and convert later. Letting users create custom types directly is preferred since that lets us create CLIs without touching existing code.\r\n\r\nThank you for looking into this. Similar to FastAPI, typer is a really nice library. \r\n",
          "type": "issue"
        },
        {
          "author": "jackric",
          "body": "I need this feature (actually for `datetime.date` like your example) - so please make PR!",
          "created_at": "2020-08-27T08:43:23Z",
          "type": "comment"
        },
        {
          "author": "ananis25",
          "body": "Hey @jackric, the method used above requires a global container, which makes me uneasy. You could probably use this snippet in your code and import the `typer` module from it. ",
          "created_at": "2020-08-30T08:19:14Z",
          "type": "comment"
        },
        {
          "author": "jackric",
          "body": "@ananis25 I think a nice approach would be to register custom types with a new function - either on `typer` or a `typer.Typer` object:\r\n```python\r\nimport typer\r\ntyper.register_type(datetime.date, lambda string: datetime.datetime.strptime(string, '%Y-%m-%d').date())\r\n```\r\n```python\r\nimport typer\r\napp = typer.Typer()\r\napp.register_type(datetime.date, lambda string: datetime.datetime.strptime(string, '%Y-%m-%d').date())\r\n```\r\n`typer.main.get_click_type` would then check an internal store of registered types before its default behaviour.\r\nFor bonus points, allow multiple deserializing functions to be tried in order. They could be specified as a list to `register_type`, or multiple calls to `register_type`",
          "created_at": "2020-09-02T16:37:18Z",
          "type": "comment"
        },
        {
          "author": "ananis25",
          "body": "If I understand correctly, the above snippet does exactly this, isn't it? I'd leave it to the maintainers to see if they really want to add this.",
          "created_at": "2020-09-06T08:29:10Z",
          "type": "comment"
        },
        {
          "author": "sylann",
          "body": "I agree with the solution proposed by @jackric.\r\nAlso, to add on top of that:\r\n\r\nThere are lots of \"wrapper types\" that can be called on a string input and give an augmented object that is still a string. Many more are just variants of already handled types.\r\n\r\nSo maybe if Typer did just try to call the annotated type by default, it would be a quick and easy way to solve many problems with not so much work.\r\nIt could even be enabled (or disabled) with an option in the Typer instanciation. In case some users somehow expect to get an error on unhandled types.\r\n\r\n--\r\n\r\nI think it should at least be possible to skip an unhandled type with a mere warning. To let users properly annotate their functions without having to use some crazy black magic.\r\n",
          "created_at": "2021-01-25T15:02:54Z",
          "type": "comment"
        },
        {
          "author": "tmr232",
          "body": "One thing that is missing when registering custom types (or at least not explicitly clear) is the usage when I just want to add a converter to an existing type. For example - parsing a hexadecimal number. I want to extend the parsing, but the result type is still a number. \r\n\r\nThe options I see for this are either:\r\n```python\r\n@app.command()\r\ndef command(number: int = Typer.Argument(converter=lambda x: int(x, 0)))\r\n```\r\n\r\nOr \r\n```python\r\nclass HexInt(int): pass\r\n\r\n# Fill in registering custom type\r\n\r\n@app.command()\r\ndef command(number: HexInt)\r\n```\r\n\r\nI am not sure what I think about either.",
          "created_at": "2021-01-26T15:00:22Z",
          "type": "comment"
        },
        {
          "author": "jackric",
          "body": "My 2 cents: declaring the `HexInt` class/type feels wrong, because later the type system says `number` is `HexInt`, when we really want to think of it as an `int`.",
          "created_at": "2021-01-26T16:17:16Z",
          "type": "comment"
        },
        {
          "author": "paulo-raca",
          "body": "I wrote a PR that implements this, please let me know what you think: https://github.com/tiangolo/typer/pull/443",
          "created_at": "2022-08-15T20:19:50Z",
          "type": "comment"
        },
        {
          "author": "dsully",
          "body": "+1 would love to see @paulo-raca 's PR merged. Thanks!",
          "created_at": "2023-03-08T14:36:12Z",
          "type": "comment"
        },
        {
          "author": "tiangolo",
          "body": "Thanks all! Support for this was added in https://github.com/tiangolo/typer/pull/583, the new docs are here: https://typer.tiangolo.com/tutorial/parameter-types/custom-types/, it's available in Typer `0.8.0`, just released. :tada: ",
          "created_at": "2023-05-01T11:40:35Z",
          "type": "comment"
        }
      ]
    },
    {
      "repository": "fastapi/typer",
      "issue_number": 75,
      "issue_title": "[FEATURE] Prevent install-completion from failing when command is not available",
      "issue_url": "https://github.com/fastapi/typer/issues/75",
      "closed_at": "2020-05-01T12:38:12Z",
      "merged_prs": [
        {
          "pr_number": 92,
          "pr_title": "Make installed completion lazy load",
          "pr_url": "https://github.com/fastapi/typer/pull/92",
          "merged_at": "2020-04-26T10:16:39Z",
          "base_commit": {
            "sha": "9cc3ebeab327f8c855b90fa9c67887c548dd7933",
            "ref": "master"
          }
        }
      ],
      "discussion": [
        {
          "author": "dbanty",
          "body": "When using click-completion in previous versions, if the command was not available in my path when the shell started, it wouldn't cause an error.  I have a variety of command line utilities added to various web apps that I don't want installed globally where I'd have to update them all the time.  Instead, they are available when I'm in the `poetry shell` for that project.\r\n\r\nI don't completely understand what click-completion was doing before, but it looks like it was only trying to evaluate completion when calling the command instead of at startup:\r\n\r\n```\r\n#compdef openapi-python-client\r\n _openapi-python-client() {\r\n    eval $(env COMMANDLINE=\"${words[1,$CURRENT]}\" _OPENAPI_PYTHON_CLIENT_COMPLETE=complete-zsh  openapi-python-client)\r\n }\r\n if [[ \"$(basename -- ${(%):-%x})\" != \"_openapi-python-client\" ]]; then\r\n    compdef _openapi-python-client openapi-python-client\r\n fi\r\n```\r\n\r\nWhereas Typer attempts to evaluate the command immediately:\r\n\r\n```\r\neval \"$(_OPENAPI_PYTHON_CLIENT_COMPLETE=source_zsh openapi-python-client)\"\r\n```\r\n\r\nWould it be possible to add some similar delayed evaluation to Typer?",
          "type": "issue"
        },
        {
          "author": "tiangolo",
          "body": "Thanks for the report @dbanty ! This should be fixed by #83 , released in `0.1.1`. :rocket: :tada: \r\n\r\n---\r\n\r\nMore details:\r\n\r\nSo, the `eval` evaluates a script generated from the program (inside of the `$( ...  openapi-python-client)`), and it, in turn, generates a script similar to the first one above, that is then evaluated there, directly from memory. The new script has a `2> /dev/null` so that the eval is just an empty string if the program is not installed.\r\n\r\n<!-- issue-manager: answered -->",
          "created_at": "2020-03-29T13:48:53Z",
          "type": "comment"
        },
        {
          "author": "dbanty",
          "body": "I confirmed the error no longer occurs with 0.1.1.  Unfortunately completion still doesn't work for something that's not available in the path at startup, which would be ideal.  I believe that click-completion used to do this?  But I can't confirm because I've already replaced all of my click-completion-using scripts.\r\n\r\nAs an example of use case, we have several web APIs where I work (one of which is using FastAPI!) and each of them has a CLI for utility functions (e.g. database migrations).  I have these as script entrypoints so that when we're in the poetry environment (e.g. `poetry shell` or the PyCharm terminal) we can just execute the CLI directly.  Actually installing these utilities globally doesn't make a ton of sense because we're constantly updating the projects (and wouldn't want to have to keep updating the globally installed version).\r\n\r\nI believe click-completion allowed this to work, where typing `my-command` and pressing tab would do nothing in the base shell, but once I was in `poetry shell` completion would start working. Of course maybe there is a better way of doing this so I welcome any thoughts / suggestions.\r\n",
          "created_at": "2020-03-30T13:19:46Z",
          "type": "comment"
        },
        {
          "author": "tiangolo",
          "body": "Yep, it makes sense and I agree. In fact, I'm suffering with the same problem as you :joy: \r\n\r\nSo yeah, I'm not sure what will be the best approach, but I will definitely update it to work for that use case. :rocket: ",
          "created_at": "2020-04-13T18:42:42Z",
          "type": "comment"
        },
        {
          "author": "tiangolo",
          "body": "This should be fixed by #92 , released in version `0.2.0` :tada: \r\n\r\nIf that solves your problem, you can close the issue :smile: \r\n\r\n<!-- issue-manager: answered -->",
          "created_at": "2020-04-26T10:56:20Z",
          "type": "comment"
        },
        {
          "author": "dbanty",
          "body": "Hey it works! Thanks! I did have to move the generated lines up in my .zshrc for them to start working. I put it above where I'm sourcing oh-my-zsh.sh because I've seen that be a problem elsewhere.",
          "created_at": "2020-05-01T12:38:12Z",
          "type": "comment"
        }
      ]
    },
    {
      "repository": "fastapi/typer",
      "issue_number": 53,
      "issue_title": "[FEATURE] Typing Support (PEP 561)",
      "issue_url": "https://github.com/fastapi/typer/issues/53",
      "closed_at": "2020-03-08T21:25:48Z",
      "merged_prs": [
        {
          "pr_number": 58,
          "pr_title": "Add support for PEP 561, typed API",
          "pr_url": "https://github.com/fastapi/typer/pull/58",
          "merged_at": "2020-03-08T18:11:14Z",
          "base_commit": {
            "sha": "095da33770a5b4478451c5ae0e793e15b4879537",
            "ref": "master"
          }
        }
      ],
      "discussion": [
        {
          "author": "dbanty",
          "body": "### Is your feature request related to a problem\r\n\r\nI would like mypy to be able to type check usages of Typer.  Currently running mypy on a project that uses Typer gives the \"Cannot find implementation or library stub for module named 'typer'\" error.\r\n\r\n### The solution you would like\r\n\r\nBecause everything is type annotated in the code base, I believe this is as simple as adding a `py.typed` file to the distribution.\r\n",
          "type": "issue"
        },
        {
          "author": "tiangolo",
          "body": "Thanks! Good point. This should have been solved by #58 .\r\n\r\nJust released as version `0.0.9`.\r\n\r\n<!-- issue-manager: answered -->",
          "created_at": "2020-03-08T18:15:34Z",
          "type": "comment"
        }
      ]
    }
  ]
}